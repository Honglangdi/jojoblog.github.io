<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IDEA自定义注释模板</title>
      <link href="/jojoblog.github.io/2023/07/11/idea-zi-ding-yi-zhu-shi-mo-ban/"/>
      <url>/jojoblog.github.io/2023/07/11/idea-zi-ding-yi-zhu-shi-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA自定义注释模板"><a href="#IDEA自定义注释模板" class="headerlink" title="IDEA自定义注释模板"></a>IDEA自定义注释模板</h1><h2 id="一、创建类注释的模板"><a href="#一、创建类注释的模板" class="headerlink" title="一、创建类注释的模板"></a>一、创建类注释的模板</h2><h3 id="1、页面截图"><a href="#1、页面截图" class="headerlink" title="1、页面截图"></a>1、页面截图</h3><p>相关操作页面截图如图1.1 IDEA 添加类注释截图所示。</p><img src="/jojoblog.github.io/2023/07/11/idea-zi-ding-yi-zhu-shi-mo-ban/IDEA%E6%B7%BB%E5%8A%A0%E7%B1%BB%E6%B3%A8%E9%87%8A%E6%88%AA%E5%9B%BE.jpg" class=""><p>​图1.1 IDEA 添加类注释截图</p><h3 id="2、操作步骤"><a href="#2、操作步骤" class="headerlink" title="2、操作步骤"></a>2、操作步骤</h3><ol><li><p>打开IDEA的Setting设置，按照图中指示，首先点击标注1所在 <strong>Editior</strong> 选项；然后点击标注2所在 <strong>File and Code Template</strong> 选项;接着再点击标注3 <strong>+</strong> ，即可出现如图所示页面。</p></li><li><p>图中标注4所在为<strong>模板名称</strong>，不做限制，但请尽量不要用奇奇怪怪的符号，避免出现问题。</p></li><li><p>图中标注5位置为模板生效的文件的后缀，设置为 <strong>java</strong> 即可，<span style="color:red"><strong>请不要随意修改这一项</strong></span>。</p></li><li><p>标注6所指的红色方框内即为模板内容。模板代码如下：</p><p>​</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * * @ClassName: ${NAME} * @Description: TODO  * @Author XXXX * @Date ${DATE} ${TIME} */</span></code></pre></li><li><p>标注8所指位置为创建人名称，<span style="color:red"><strong>建议直接写内容</strong></span>，不要使用$(user)函数.</p></li><li><p>标注7所指为类名函数，无需修改。标注9所指位置为时间函数，无需修改。</p></li><li><p>最后点击Apply按钮保存即可。</p></li></ol><p><span style="color:red"><strong>注意：</strong></span>设置完模板后，模板只针对创建文件时生效，每次创建java后缀的文件都会添加注释，但是复制剪切是不会生效。</p><h2 id="二、创建方法注释模板"><a href="#二、创建方法注释模板" class="headerlink" title="二、创建方法注释模板"></a>二、创建方法注释模板</h2><h3 id="1、创建模板分组"><a href="#1、创建模板分组" class="headerlink" title="1、创建模板分组"></a>1、创建模板分组</h3><p>按照图中所选，找到 <strong>Settings</strong> 的 <strong>Live Template</strong> ,点击右侧 <strong>+</strong> 号</p><img src="/jojoblog.github.io/2023/07/11/idea-zi-ding-yi-zhu-shi-mo-ban/IDEA%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A%E5%88%86%E7%BB%84%E6%88%AA%E5%9B%BE.jpg" class=""><p>然后点击 <strong>2 Template Group</strong> 创建分组</p><img src="/jojoblog.github.io/2023/07/11/idea-zi-ding-yi-zhu-shi-mo-ban/%E5%8A%A0%E5%A5%BD%E6%88%AA%E5%9B%BE.png" class=""><p>分组名称不做限制，自由随意</p><img src="/jojoblog.github.io/2023/07/11/idea-zi-ding-yi-zhu-shi-mo-ban/IDEA%E6%B7%BB%E5%8A%A0%E7%B1%BB%E6%B3%A8%E9%87%8A%E6%88%AA%E5%9B%BE3.jpg" class=""><h3 id="2、创建注释模板"><a href="#2、创建注释模板" class="headerlink" title="2、创建注释模板"></a>2、创建注释模板</h3><p>寻找到添加的模板分组，点击右侧 <strong>+</strong> 号，点击 <strong>1 Live Template</strong> 添加模板 ,<span style="color:red"><strong>要点击第一个</strong></span></p><img src="/jojoblog.github.io/2023/07/11/idea-zi-ding-yi-zhu-shi-mo-ban/%E5%8A%A0%E5%8F%B7%E6%88%AA%E5%9B%BE1.png" class=""><p>注释模板编写页面如下图所示:</p><img src="/jojoblog.github.io/2023/07/11/idea-zi-ding-yi-zhu-shi-mo-ban/IDEA%E6%B7%BB%E5%8A%A0%E7%B1%BB%E6%B3%A8%E9%87%8A%E6%88%AA%E5%9B%BE4.jpg" class=""><ol><li><p><span style="color:red"><strong>标注1所在为固定写法，请不要修改</strong></span></p></li><li><p>标注2位置为注释模板内容，具体如下：</p><pre><code>* * @Author HongLangdi~ * @Description //TODO  * @Date $date$ $time$ $param$ $return$ **/</code></pre><p><span style="color:red"><strong>注意：除了@Author后面的名字修改，请不要修改任何东西，包括缩进</strong></span></p></li><li><p>点击标注3位置为模板中的中的函数设置具体函数内容</p><img src="/jojoblog.github.io/2023/07/11/idea-zi-ding-yi-zhu-shi-mo-ban/IDEA%E6%B7%BB%E5%8A%A0%E7%B1%BB%E6%B3%A8%E9%87%8A%E6%88%AA%E5%9B%BE5.jpg" class=""><p>​</p><ul><li><p><strong>date</strong> 和 <strong>time</strong> 的函数是IDEA自带的，只需要点击 <strong>Expresion</strong> ，然后进行选择</p></li><li><p><strong>param</strong> 函数的表达式如下，只需复制粘贴在对应的 <strong>Expression</strong> 里面即可。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">groovyScript</span><span class="token punctuation">(</span><span class="token string">"def result = '';def params = \"${_1}\".replaceAll('[\\\\[|\\\\]|\\\\s]', '').split(',').toList(); for(i = 0; i &lt; params.size(); i++) {if(params[i] != '')result+='* @param ' + params[i] + ((i &lt; params.size() - 1) ? '\\r\\n ' : '')}; return result == '' ? null : '\\r\\n ' + result"</span><span class="token punctuation">,</span> <span class="token function">methodParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>return 函数表达式如下，只需复制粘贴在对应的 <strong>Expression</strong> 里面即可。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">groovyScript</span><span class="token punctuation">(</span><span class="token string">"return \"${_1}\" == 'void' ? null : '\\r\\n * @return ' + \"${_1}\""</span><span class="token punctuation">,</span> <span class="token function">methodReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>点击标注4位置，为注释模板设置触发按键</p><p>把该位置按键选择 <strong>Enter</strong>,即可 通过 <strong>“/“ + “Enter”</strong> 的方式使用模板<span style="color:red"><strong>不要跟着图点击，要点击Enter</strong></span></p><img src="/jojoblog.github.io/2023/07/11/idea-zi-ding-yi-zhu-shi-mo-ban/Enter.png" class=""></li><li><p>点击标注5位置，选择模板适用于 <strong>java</strong></p><img src="/jojoblog.github.io/2023/07/11/idea-zi-ding-yi-zhu-shi-mo-ban/%E9%80%89%E6%8B%A9.png" class=""></li></ol><p>最后，点击Apply即可</p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat服务器配置</title>
      <link href="/jojoblog.github.io/2023/07/11/tomcat-fu-wu-qi-pei-zhi/"/>
      <url>/jojoblog.github.io/2023/07/11/tomcat-fu-wu-qi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat-配置"><a href="#Tomcat-配置" class="headerlink" title="Tomcat 配置"></a>Tomcat 配置</h1><h2 id="一、环境变量配置"><a href="#一、环境变量配置" class="headerlink" title="一、环境变量配置"></a>一、环境变量配置</h2><p>1)、新建系统变量，变量名为<code>CATALINA_HOME</code><br>变量值为<code>解压Tomcat文件夹的路径</code>，</p><p>2)、找到系统变量Path，双击空白处或新建即可在末尾加上<code>%CATALINA_HOME%\bin</code></p><p><strong><span style="color:red;">注意：</span></strong></p><p><span style="color:red;">要运行Tomcat需要配置Java环境变量</span></p><h2 id="二、启动Tomcat"><a href="#二、启动Tomcat" class="headerlink" title="二、启动Tomcat"></a>二、启动Tomcat</h2><p>1、进入Windows命令行窗口（win+R，输入cmd，回车）<br>输入<code>startup.bat</code>回车</p><p>2、在浏览器访问 localhost:8080</p><h2 id="三、修改Tomcat配置"><a href="#三、修改Tomcat配置" class="headerlink" title="三、修改Tomcat配置"></a>三、修改Tomcat配置</h2><h3 id="1、启动乱码问题"><a href="#1、启动乱码问题" class="headerlink" title="1、启动乱码问题"></a>1、启动乱码问题</h3><p>输入<code>startup.bat</code>回车后启动界面日志输出乱码问题</p><ol><li>打开<a href="https://so.csdn.net/so/search?q=apache&amp;spm=1001.2101.3001.7020">apache</a>-tomcat-9.0.45-&gt;conf-&gt;logging.properties</li><li>用记事本打开<code>logging.properties</code>找到 java.util.logging.ConsoleHandler.encoding</li><li>把 java.util.logging.ConsoleHandler.encoding 的编码格斯修改成 GBK</li></ol><h3 id="2、端口占用问题"><a href="#2、端口占用问题" class="headerlink" title="2、端口占用问题"></a>2、端口占用问题</h3><p>Tomcat默认8080端口被占用</p><ol><li>打开apache-tomcat-9.0.45-&gt;conf-&gt;server.xml</li><li>找到 &lt;Connector port=”8080”</li><li>修改成 &lt;Connector port=”8080”</li></ol>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发规范手册</title>
      <link href="/jojoblog.github.io/2023/07/11/qian-duan-kai-fa-gui-fan-shou-ce/"/>
      <url>/jojoblog.github.io/2023/07/11/qian-duan-kai-fa-gui-fan-shou-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="前端开发规范手册"><a href="#前端开发规范手册" class="headerlink" title="前端开发规范手册"></a>前端开发规范手册</h1><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><h3 id="项目命名"><a href="#项目命名" class="headerlink" title="项目命名"></a>项目命名</h3><p>全部采用小写方式， 以下划线分隔。 </p><p>例：my_project_name </p><h3 id="目录命名"><a href="#目录命名" class="headerlink" title="目录命名"></a>目录命名</h3><p>参照项目命名规则； </p><p>有复数结构时，要采用复数命名法。</p><p> 例：scripts, styles, images, data_models JS</p><h3 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h3><p>参照项目命名规则。 </p><p>例：account_model.js </p><h3 id="CSS-SCSS文件命名"><a href="#CSS-SCSS文件命名" class="headerlink" title="CSS, SCSS文件命名"></a>CSS, SCSS文件命名</h3><p>参照项目命名规则。 </p><p>例：retina_sprites.scss </p><h3 id="HTML文件命名"><a href="#HTML文件命名" class="headerlink" title="HTML文件命名"></a>HTML文件命名</h3><p>参照项目命名规则。 </p><p>例：error_report.html</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>缩进使用soft tab（4个空格）； </li><li>嵌套的节点应该缩进； </li><li>在属性上，使用双引号，不要使用单引号； </li><li>属性名全小写，用中划线做分隔符； </li><li>不要在自动闭合标签结尾处使用斜线（<span style="color:blue;font-weight:bloder;"><strong><a href="http://dev.w3.org/html5/spec-author-view/syntax.html#syntax-start-tag">HTML5  规范</a></strong></span> 指出他们是可选的）； </li><li>不要忽略可选的关闭标签，例： <span style="color:red;font-weight:bloder;"><code>&lt;/li&gt;</code></span> 和 <span style="color:red;font-weight:bloder;"> <code>&lt;/body&gt;</code> </span>。</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/company_logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Company<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello-world<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello, world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="HTML5-doctype"><a href="#HTML5-doctype" class="headerlink" title="HTML5 doctype"></a>HTML5 doctype</h3><p>在页面开头使用这个简单地doctype来启用标准模式，使其在每个浏览器中尽可能一致的展现； 虽然doctype不区分大小写，但是按照惯例，doctype大写 （<span style="color:blue;font-weight:bloder;"><strong><a href="http://stackoverflow.com/questions/15594877/is-there-any-benefits-to-use-uppercase-or-lowercase-letters-with-html5-tagname">关于html属性，大写还是小写</a></strong></span>）。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="lang属性"><a href="#lang属性" class="headerlink" title="lang属性"></a>lang属性</h3><p>根据HTML5规范： </p><blockquote><p>应在html标签上加上lang属性。这会给语音工具和翻译工具帮助，告诉它们应当怎么去发音 和翻译.</p></blockquote><p>更多关于<span style="color:red;font-weight:bloder;"> lang </span>属性的说明在**<a href="http://www.w3.org/html/wg/drafts/html/master/semantics.html#the-html-element">这里</a>**；</p><p>在sitepoint上可以查到**<a href="http://reference.sitepoint.com/html/lang-codes">语言列表</a>**； </p><p>但sitepoint只是给出了语言的大类，例如中文只给出了zh，但是没有区分香港，台湾，大陆。而 微软给出了一份更加**<a href="http://msdn.microsoft.com/en-us/library/ms533052(v=vs.85).aspx">详细的语言列表</a>**，其中细分了zh-cn, zh-hk, zh-tw。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en-us<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>通过声明一个明确的字符编码，让浏览器轻松、快速的确定适合网页内容的渲染方式，通常指定 为’UTF-8’。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="IE兼容模式"><a href="#IE兼容模式" class="headerlink" title="IE兼容模式"></a>IE兼容模式</h3><p>用<span style="color:red;font-weight:bloder;"><code>&lt;meta&gt;</code> </span>  标签可以指定页面应该用什么版本的IE来渲染；</p><p>如果你想要了解更多，请点击<a href="http://stackoverflow.com/questions/6771258/whats-the-difference-if-meta-http-equiv-x-ua-compatible-content-ie-edge-e"><strong>这里</strong></a>；</p><p> 不同doctype在不同浏览器下会触发不同的渲染模式（**<a href="https://hsivonen.fi/doctype/">这篇文章</a>**总结的很到位）。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>Edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="引入CSS-JS"><a href="#引入CSS-JS" class="headerlink" title="引入CSS,JS"></a>引入CSS,JS</h3><p>根据<strong>HTML5规范</strong>, 通常在引入CSS和JS时不需要指明<span style="color:red;font-weight:bloder;"> type </span>，因为 <span style="color:red;font-weight:bloder;">text/css</span> 和<span style="color:red;font-weight:bloder;"> text/javascript </span>分别是他们的默认值。</p><p>HTML5 规范链接 </p><ul><li><strong><a href="http://www.w3.org/TR/2011/WD-html5-20110525/semantics.html#the-link-element">使用link</a></strong> </li><li><strong><a href="http://www.w3.org/TR/2011/WD-html5-20110525/semantics.html#the-style-element">使用style</a></strong> </li><li><a href="http://www.w3.org/TR/2011/WD-html5-20110525/scripting-1.html#the-script-element"><strong>使用script</strong></a></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- External CSS --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code_guide.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- In-document CSS --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token number">...</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- External JS --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code_guide.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- In-document JS --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token operator">...</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="属性顺序"><a href="#属性顺序" class="headerlink" title="属性顺序"></a>属性顺序</h3><ul><li><p><span style="color:red;font-weight:bloder;">class </span></p></li><li><p><span style="color:red;font-weight:bloder;">id </span></p></li><li><p><span style="color:red;font-weight:bloder;">name </span></p></li><li><p><span style="color:red;font-weight:bloder;">data-* </span></p></li><li><p><span style="color:red;font-weight:bloder;">src , for , type , href , value , max-length , max , min , pattern </span></p></li><li><p><span style="color:red;font-weight:bloder;">placeholder , title , alt </span></p></li><li><p><span style="color:red;font-weight:bloder;">aria-* , role </span></p></li><li><p><span style="color:red;font-weight:bloder;">required , readonly , disabled</span></p></li></ul><p><strong>class</strong>是为高可复用组件设计的，所以应处在第一位；</p><p><strong>id</strong>更加具体且应该尽量少使用，所以将它放在第二位。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">data-modal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggle<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Example link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="boolean属性"><a href="#boolean属性" class="headerlink" title="boolean属性"></a>boolean属性</h3><blockquote><p>boolean属性指不需要声明取值的属性，XHTML需要每个属性声明取值，但是HTML5并不需 要；</p><p>更多内容可以参考 **<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#boolean-attributes">WhatWG section on boolean attributes</a>**：</p><p>boolean属性的存在表示取值为true，不存在则表示取值为false。</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="JS生成标签"><a href="#JS生成标签" class="headerlink" title="JS生成标签"></a>JS生成标签</h3><p>在JS文件中生成标签让内容变得更难查找，更难编辑，性能更差。应该尽量避免这种情况的出 现。</p><h3 id="减少标签数量"><a href="#减少标签数量" class="headerlink" title="减少标签数量"></a>减少标签数量</h3><p>在编写HTML代码时，需要尽量避免多余的父节点； 很多时候，需要通过迭代和重构来使HTML变得更少。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Not well --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Better --></span>&lt;img class="avatar" src="..."</code></pre><h3 id="实用高于完美"><a href="#实用高于完美" class="headerlink" title="实用高于完美"></a>实用高于完美</h3><blockquote><p>尽量遵循HTML标准和语义，但是不应该以浪费实用性作为代价； </p><p>任何时候都要用尽量小的复杂度和尽量少的标签来解决问题。</p></blockquote><h2 id="CSS-SCSS"><a href="#CSS-SCSS" class="headerlink" title="CSS, SCSS"></a>CSS, SCSS</h2><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><blockquote><p>使用soft tab（<strong>4个空格</strong>）。</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.element</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><blockquote><p>每个属性声明末尾都要加分号。</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.element</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>以下几种情况不需要空格：</p><ul><li><p>属性名后 </p></li><li><p>多个规则的分隔符’,’前 </p></li><li><p><span style="color:red;font-weight:bloder;">!important ‘!’</span>后 </p></li><li><p>属性值中’(‘后和’)’前 </p></li><li><p>行末不要有多余的空格</p></li></ul><p>以下几种情况需要空格： </p><ul><li><p>属性值前 </p></li><li><p>选择器’&gt;’, ‘+’, ‘~’前后 </p></li><li><p>‘{‘前 </p></li><li><p><span style="color:red;font-weight:bloder;">!important</span> ‘!’前 </p></li><li><p><span style="color:red;font-weight:bloder;">@else</span> 前后 </p></li><li><p>属性值中的’,’后 </p></li><li><p>注释’/<em>‘后和’</em>/‘前</p></li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector"><span class="token class">.element</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span>red! important<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector"><span class="token class">.element</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector"><span class="token class">.element</span> ,<span class="token class">.dialog</span></span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector"><span class="token class">.element</span>,<span class="token class">.dialog</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector"><span class="token class">.element</span>><span class="token class">.dialog</span></span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector"><span class="token class">.element</span> > <span class="token class">.dialog</span></span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector"><span class="token class">.element</span></span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector"><span class="token class">.element</span> </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* not good */</span><span class="token atrule"><span class="token rule">@if</span></span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@else</span></span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token atrule"><span class="token rule">@if</span></span> <span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span> <span class="token atrule"><span class="token rule">@else</span></span> <span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span></code></pre><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><p>以下几种情况需要空行：</p><ul><li>文件最后保留一个空行 </li><li>‘}’后最好跟一个空行，包括scss中嵌套的规则 </li><li>属性之间需要适当的空行，具体见属性 <strong>声明顺序</strong></li></ul><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token selector">.dialog </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token selector"><span class="token parent important">&amp;</span>:after </span><span class="token punctuation">{</span>        <span class="token number">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token selector">.dialog </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token selector"><span class="token parent important">&amp;</span>:after </span><span class="token punctuation">{</span>        <span class="token number">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>以下几种情况不需要换行：</p><ul><li>‘{‘前</li></ul><p>以下几种情况需要换行：</p><ul><li>‘{‘后和’}’前 </li><li>每个属性独占一行 </li><li>多个规则的分隔符’,’后</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector"><span class="token class">.element</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector"><span class="token class">.element</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector"><span class="token class">.element</span>, <span class="token class">.dialog</span> </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector"><span class="token class">.element</span>,<span class="token class">.dialog</span> </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span></code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><blockquote><p>注释统一用’/* */‘（scss中也不要用’//‘），具体参照右边的写法； </p><p>缩进与下一行代码保持一致； </p><p>可位于一个代码行的末尾，与代码间隔一个空格。</p></blockquote><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">/* Modal header */</span><span class="token selector">.modal-header </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * Modal header */</span><span class="token selector">.modal-header </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token selector">.modal-header </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 50px */</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* color red */</span><span class="token punctuation">}</span></code></pre><h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><blockquote><p>最外层统一使用双引号； </p><p>url的内容要用引号； </p><p>属性选择器中的属性值需要引号。</p></blockquote><pre class=" language-scss"><code class="language-scss"><span class="token selector">.element:after </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">"logo.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">li[data-type="single"] </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span></code></pre><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><ul><li>类名使用小写字母，以中划线分隔 </li><li>id采用驼峰式命名 </li><li>scss中的变量、函数、混合、placeholder采用驼峰式命名</li></ul><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">/* class */</span><span class="token selector">.element-content </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* id */</span><span class="token selector">#myDialog </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 变量 */</span><span class="token property"><span class="token variable">$colorBlack</span></span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 函数 */</span><span class="token keyword">@function</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token variable">$px</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 混合 */</span><span class="token keyword">@mixin</span> <span class="token selector">centerBlock </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* placeholder */</span><span class="token selector"><span class="token placeholder">%myDialog</span> </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span></code></pre><h3 id="属性声明顺序"><a href="#属性声明顺序" class="headerlink" title="属性声明顺序"></a>属性声明顺序</h3><blockquote><p>相关的属性声明按右边的顺序做分组处理，组之间需要有一个空行</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.declaration-order</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#e5e5e5</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">font</span><span class="token punctuation">:</span> normal <span class="token number">13</span>px <span class="token string">"Helvetica Neue"</span>, sans-serif<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f5f5f5</span><span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>// 下面是推荐的属性的顺序[    [        <span class="token string">"display"</span>,        <span class="token string">"visibility"</span>,        <span class="token string">"float"</span>,        <span class="token string">"clear"</span>,        <span class="token string">"overflow"</span>,        <span class="token string">"overflow-x"</span>,        <span class="token string">"overflow-y"</span>,        <span class="token string">"clip"</span>,        <span class="token string">"zoom"</span>    ],    [        <span class="token string">"table-layout"</span>,        <span class="token string">"empty-cells"</span>,        <span class="token string">"caption-side"</span>,        <span class="token string">"border-spacing"</span>,        <span class="token string">"border-collapse"</span>,        <span class="token string">"list-style"</span>,        <span class="token string">"list-style-position"</span>,        <span class="token string">"list-style-type"</span>,        <span class="token string">"list-style-image"</span>    ],    [        <span class="token string">"-webkit-box-orient"</span>,        <span class="token string">"-webkit-box-direction"</span>,        <span class="token string">"-webkit-box-decoration-break"</span>,        <span class="token string">"-webkit-box-pack"</span>,        <span class="token string">"-webkit-box-align"</span>,        <span class="token string">"-webkit-box-flex"</span>    ],    [        <span class="token string">"position"</span>,        <span class="token string">"top"</span>,        <span class="token string">"right"</span>,        <span class="token string">"bottom"</span>,        <span class="token string">"left"</span>,        <span class="token string">"z-index"</span>    ],    [        <span class="token string">"margin"</span>,        <span class="token string">"margin-top"</span>,        <span class="token string">"margin-right"</span>,        <span class="token string">"margin-bottom"</span>,        <span class="token string">"margin-left"</span>,        <span class="token string">"-webkit-box-sizing"</span>,        <span class="token string">"-moz-box-sizing"</span>,        <span class="token string">"box-sizing"</span>,        <span class="token string">"border"</span>,        <span class="token string">"border-width"</span>,        <span class="token string">"border-style"</span>,        <span class="token string">"border-color"</span>,        <span class="token string">"border-top"</span>,        <span class="token string">"border-top-width"</span>,        <span class="token string">"border-top-style"</span>,        <span class="token string">"border-top-color"</span>,        <span class="token string">"border-right"</span>,        <span class="token string">"border-right-width"</span>,        <span class="token string">"border-right-style"</span>,        <span class="token string">"border-right-color"</span>,        <span class="token string">"border-bottom"</span>,        <span class="token string">"border-bottom-width"</span>,        <span class="token string">"border-bottom-style"</span>,        <span class="token string">"border-bottom-color"</span>,        <span class="token string">"border-left"</span>,        <span class="token string">"border-left-width"</span>,        <span class="token string">"border-left-style"</span>,        <span class="token string">"border-left-color"</span>,        <span class="token string">"-webkit-border-radius"</span>,        <span class="token string">"-moz-border-radius"</span>,        <span class="token string">"border-radius"</span>,        <span class="token string">"-webkit-border-top-left-radius"</span>,        <span class="token string">"-moz-border-radius-topleft"</span>,        <span class="token string">"border-top-left-radius"</span>,        <span class="token string">"-webkit-border-top-right-radius"</span>,        <span class="token string">"-moz-border-radius-topright"</span>,        <span class="token string">"border-top-right-radius"</span>,        <span class="token string">"-webkit-border-bottom-right-radius"</span>,        <span class="token string">"-moz-border-radius-bottomright"</span>,        <span class="token string">"border-bottom-right-radius"</span>,        <span class="token string">"-webkit-border-bottom-left-radius"</span>,        <span class="token string">"-moz-border-radius-bottomleft"</span>,        <span class="token string">"border-bottom-left-radius"</span>,        <span class="token string">"-webkit-border-image"</span>,        <span class="token string">"-moz-border-image"</span>,        <span class="token string">"-o-border-image"</span>,        <span class="token string">"border-image"</span>,        <span class="token string">"-webkit-border-image-source"</span>,        <span class="token string">"-moz-border-image-source"</span>,        <span class="token string">"-o-border-image-source"</span>,        <span class="token string">"border-image-source"</span>,        <span class="token string">"-webkit-border-image-slice"</span>,        <span class="token string">"-moz-border-image-slice"</span>,        <span class="token string">"-o-border-image-slice"</span>,        <span class="token string">"border-image-slice"</span>,        <span class="token string">"-webkit-border-image-width"</span>,        <span class="token string">"-moz-border-image-width"</span>,        <span class="token string">"-o-border-image-width"</span>,        <span class="token string">"border-image-width"</span>,        <span class="token string">"-webkit-border-image-outset"</span>,        <span class="token string">"-moz-border-image-outset"</span>,        <span class="token string">"-o-border-image-outset"</span>,        <span class="token string">"border-image-outset"</span>,        <span class="token string">"-webkit-border-image-repeat"</span>,        <span class="token string">"-moz-border-image-repeat"</span>,        <span class="token string">"-o-border-image-repeat"</span>,        <span class="token string">"border-image-repeat"</span>,        <span class="token string">"padding"</span>,        <span class="token string">"padding-top"</span>,        <span class="token string">"padding-right"</span>,        <span class="token string">"padding-bottom"</span>,        <span class="token string">"padding-left"</span>,        <span class="token string">"width"</span>,        <span class="token string">"min-width"</span>,        <span class="token string">"max-width"</span>,        <span class="token string">"height"</span>,        <span class="token string">"min-height"</span>,        <span class="token string">"max-height"</span>    ],    [        <span class="token string">"font"</span>,        <span class="token string">"font-family"</span>,        <span class="token string">"font-size"</span>,        <span class="token string">"font-weight"</span>,        <span class="token string">"font-style"</span>,        <span class="token string">"font-variant"</span>,        <span class="token string">"font-size-adjust"</span>,        <span class="token string">"font-stretch"</span>,        <span class="token string">"font-effect"</span>,        <span class="token string">"font-emphasize"</span>,        <span class="token string">"font-emphasize-position"</span>,        <span class="token string">"font-emphasize-style"</span>,        <span class="token string">"font-smooth"</span>,        <span class="token string">"line-height"</span>,        <span class="token string">"text-align"</span>,        <span class="token string">"-webkit-text-align-last"</span>,        <span class="token string">"-moz-text-align-last"</span>,        <span class="token string">"-ms-text-align-last"</span>,        <span class="token string">"text-align-last"</span>,        <span class="token string">"vertical-align"</span>,        <span class="token string">"white-space"</span>,        <span class="token string">"text-decoration"</span>,        <span class="token string">"text-emphasis"</span>,        <span class="token string">"text-emphasis-color"</span>,        <span class="token string">"text-emphasis-style"</span>,        <span class="token string">"text-emphasis-position"</span>,        <span class="token string">"text-indent"</span>,        <span class="token string">"-ms-text-justify"</span>,        <span class="token string">"text-justify"</span>,        <span class="token string">"letter-spacing"</span>,        <span class="token string">"word-spacing"</span>,        <span class="token string">"-ms-writing-mode"</span>,        <span class="token string">"text-outline"</span>,        <span class="token string">"text-transform"</span>,        <span class="token string">"text-wrap"</span>,        <span class="token string">"-ms-text-overflow"</span>,        <span class="token string">"text-overflow"</span>,        <span class="token string">"text-overflow-ellipsis"</span>,        <span class="token string">"text-overflow-mode"</span>,        <span class="token string">"-ms-word-wrap"</span>,        <span class="token string">"word-wrap"</span>,        <span class="token string">"-ms-word-break"</span>,        <span class="token string">"word-break"</span>    ],    [        <span class="token string">"color"</span>,        <span class="token string">"background"</span>,        <span class="token string">"filter:progid:DXImageTransform.Microsoft.AlphaImageLoader"</span>,        <span class="token string">"background-color"</span>,        <span class="token string">"background-image"</span>,        <span class="token string">"background-repeat"</span>,        <span class="token string">"background-attachment"</span>,        <span class="token string">"background-position"</span>,        <span class="token string">"-ms-background-position-x"</span>,        <span class="token string">"background-position-x"</span>,        <span class="token string">"-ms-background-position-y"</span>,        <span class="token string">"background-position-y"</span>,        <span class="token string">"-webkit-background-clip"</span>,        <span class="token string">"-moz-background-clip"</span>,        <span class="token string">"background-clip"</span>,        <span class="token string">"background-origin"</span>,        <span class="token string">"-webkit-background-size"</span>,        <span class="token string">"-moz-background-size"</span>,        <span class="token string">"-o-background-size"</span>,        <span class="token string">"background-size"</span>    ],    [        <span class="token string">"outline"</span>,        <span class="token string">"outline-width"</span>,        <span class="token string">"outline-style"</span>,        <span class="token string">"outline-color"</span>,        <span class="token string">"outline-offset"</span>,        <span class="token string">"opacity"</span>,        <span class="token string">"filter:progid:DXImageTransform.Microsoft.Alpha(Opacity"</span>,        <span class="token string">"-ms-filter:\\'progid:DXImageTransform.Microsoft.Alpha"</span>,        <span class="token string">"-ms-interpolation-mode"</span>,        <span class="token string">"-webkit-box-shadow"</span>,        <span class="token string">"-moz-box-shadow"</span>,        <span class="token string">"box-shadow"</span>,        <span class="token string">"filter:progid:DXImageTransform.Microsoft.gradient"</span>,        <span class="token string">"-ms-filter:\\'progid:DXImageTransform.Microsoft.gradient"</span>,        <span class="token string">"text-shadow"</span>    ],    [        <span class="token string">"-webkit-transition"</span>,        <span class="token string">"-moz-transition"</span>,        <span class="token string">"-ms-transition"</span>,        <span class="token string">"-o-transition"</span>,        <span class="token string">"transition"</span>,        <span class="token string">"-webkit-transition-delay"</span>,        <span class="token string">"-moz-transition-delay"</span>,        <span class="token string">"-ms-transition-delay"</span>,        <span class="token string">"-o-transition-delay"</span>,        <span class="token string">"transition-delay"</span>,        <span class="token string">"-webkit-transition-timing-function"</span>,        <span class="token string">"-moz-transition-timing-function"</span>,        <span class="token string">"-ms-transition-timing-function"</span>,        <span class="token string">"-o-transition-timing-function"</span>,        <span class="token string">"transition-timing-function"</span>,        <span class="token string">"-webkit-transition-duration"</span>,        <span class="token string">"-moz-transition-duration"</span>,        <span class="token string">"-ms-transition-duration"</span>,        <span class="token string">"-o-transition-duration"</span>,        <span class="token string">"transition-duration"</span>,        <span class="token string">"-webkit-transition-property"</span>,        <span class="token string">"-moz-transition-property"</span>,        <span class="token string">"-ms-transition-property"</span>,        <span class="token string">"-o-transition-property"</span>,        <span class="token string">"transition-property"</span>,        <span class="token string">"-webkit-transform"</span>,        <span class="token string">"-moz-transform"</span>,        <span class="token string">"-ms-transform"</span>,        <span class="token string">"-o-transform"</span>,        <span class="token string">"transform"</span>,        <span class="token string">"-webkit-transform-origin"</span>,        <span class="token string">"-moz-transform-origin"</span>,        <span class="token string">"-ms-transform-origin"</span>,        <span class="token string">"-o-transform-origin"</span>,        <span class="token string">"transform-origin"</span>,        <span class="token string">"-webkit-animation"</span>,        <span class="token string">"-moz-animation"</span>,        <span class="token string">"-ms-animation"</span>,        <span class="token string">"-o-animation"</span>,        <span class="token string">"animation"</span>,        <span class="token string">"-webkit-animation-name"</span>,        <span class="token string">"-moz-animation-name"</span>,        <span class="token string">"-ms-animation-name"</span>,        <span class="token string">"-o-animation-name"</span>,        <span class="token string">"animation-name"</span>,        <span class="token string">"-webkit-animation-duration"</span>,        <span class="token string">"-moz-animation-duration"</span>,        <span class="token string">"-ms-animation-duration"</span>,        <span class="token string">"-o-animation-duration"</span>,        <span class="token string">"animation-duration"</span>,        <span class="token string">"-webkit-animation-play-state"</span>,        <span class="token string">"-moz-animation-play-state"</span>,        <span class="token string">"-ms-animation-play-state"</span>,        <span class="token string">"-o-animation-play-state"</span>,        <span class="token string">"animation-play-state"</span>,        <span class="token string">"-webkit-animation-timing-function"</span>,        <span class="token string">"-moz-animation-timing-function"</span>,        <span class="token string">"-ms-animation-timing-function"</span>,        <span class="token string">"-o-animation-timing-function"</span>,        <span class="token string">"animation-timing-function"</span>,        <span class="token string">"-webkit-animation-delay"</span>,        <span class="token string">"-moz-animation-delay"</span>,        <span class="token string">"-ms-animation-delay"</span>,        <span class="token string">"-o-animation-delay"</span>,        <span class="token string">"animation-delay"</span>,        <span class="token string">"-webkit-animation-iteration-count"</span>,        <span class="token string">"-moz-animation-iteration-count"</span>,        <span class="token string">"-ms-animation-iteration-count"</span>,        <span class="token string">"-o-animation-iteration-count"</span>,        <span class="token string">"animation-iteration-count"</span>,        <span class="token string">"-webkit-animation-direction"</span>,        <span class="token string">"-moz-animation-direction"</span>,        <span class="token string">"-ms-animation-direction"</span>,        <span class="token string">"-o-animation-direction"</span>,        <span class="token string">"animation-direction"</span>    ],    [        <span class="token string">"content"</span>,        <span class="token string">"quotes"</span>,        <span class="token string">"counter-reset"</span>,        <span class="token string">"counter-increment"</span>,        <span class="token string">"resize"</span>,        <span class="token string">"cursor"</span>,        <span class="token string">"-webkit-user-select"</span>,        <span class="token string">"-moz-user-select"</span>,        <span class="token string">"-ms-user-select"</span>,        <span class="token string">"user-select"</span>,        <span class="token string">"nav-index"</span>,        <span class="token string">"nav-up"</span>,        <span class="token string">"nav-right"</span>,        <span class="token string">"nav-down"</span>,        <span class="token string">"nav-left"</span>,        <span class="token string">"-moz-tab-size"</span>,        <span class="token string">"-o-tab-size"</span>,        <span class="token string">"tab-size"</span>,        <span class="token string">"-webkit-hyphens"</span>,        <span class="token string">"-moz-hyphens"</span>,        <span class="token string">"hyphens"</span>,        <span class="token string">"pointer-events"</span>    ]]</code></pre><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><blockquote><p>颜色16进制用小写字母；</p><p>颜色16进制尽量用简写。</p></blockquote><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ABCDEF</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#001122</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#abcdef</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#012</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="属性简写"><a href="#属性简写" class="headerlink" title="属性简写"></a>属性简写</h3><blockquote><p>属性简写需要你非常清楚属性值的正确顺序，而且在大多数情况下并不需要设置属性简写中包含 的所有值，所以建议尽量分开声明会更加清晰；</p></blockquote><p><span style="color:red;font-weight:bloder;">margin </span>和<span style="color:red;font-weight:bloder;"> padding </span>相反，需要使用简写；</p><p>常见的属性简写包括： </p><ul><li><p><span style="color:red;font-weight:bloder;">font </span></p></li><li><p><span style="color:red;font-weight:bloder;">background </span></p></li><li><p><span style="color:red;font-weight:bloder;">transition </span></p></li><li><p><span style="color:red;font-weight:bloder;">animation </span></p></li></ul><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">transition</span><span class="token punctuation">:</span> opacity <span class="token number">1</span>s linear <span class="token number">2</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">transition-delay</span><span class="token punctuation">:</span> <span class="token number">2</span>s<span class="token punctuation">;</span>    <span class="token property">transition-timing-function</span><span class="token punctuation">:</span> linear<span class="token punctuation">;</span>    <span class="token property">transition-duration</span><span class="token punctuation">:</span> <span class="token number">1</span>s<span class="token punctuation">;</span>    <span class="token property">transition-property</span><span class="token punctuation">:</span> opacity<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><blockquote><p>尽量将媒体查询的规则靠近与他们相关的规则，不要将他们一起放到一个独立的样式文件中，或 者丢在文档的最底部，这样做只会让大家以后更容易忘记他们。</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.element</span> </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.element-avatar</span></span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 480px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.element</span> </span><span class="token punctuation">{</span>        <span class="token number">...</span>    <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.element-avatar</span> </span><span class="token punctuation">{</span>        <span class="token number">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="SCSS相关"><a href="#SCSS相关" class="headerlink" title="SCSS相关"></a>SCSS相关</h3><p>提交的代码中不要有 <span style="color:red;font-weight:bloder;"> @debug </span>； </p><p>声明顺序： </p><ul><li><p><span style="color:red;font-weight:bloder;"> @extend </span></p></li><li><p>不包含<span style="color:red;font-weight:bloder;"> @content </span>的<span style="color:red;font-weight:bloder;"> @include </span></p></li><li><p>包含<span style="color:red;font-weight:bloder;"> @content </span>的<span style="color:red;font-weight:bloder;"> @include </span></p></li><li><p>自身属性 </p></li><li><p>嵌套规则</p></li></ul><p><span style="color:red;font-weight:bloder;">@import</span> 引入的文件不需要开头的’_’和结尾的’.scss’； 嵌套最多不能超过5层； </p><p><span style="color:red;font-weight:bloder;">@extend</span> 中使用placeholder选择器； </p><p>去掉不必要的父级引用符号’&amp;’。</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">/* not good */</span><span class="token keyword">@import</span> <span class="token string">"_dialog.scss"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* good */</span><span class="token keyword">@import</span> <span class="token string">"dialog"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector">.fatal </span><span class="token punctuation">{</span>    <span class="token keyword">@extend</span> <span class="token number">.</span>error<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector">.fatal </span><span class="token punctuation">{</span>    <span class="token keyword">@extend</span> <span class="token number">%</span>error<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token selector"><span class="token parent important">&amp;</span> > .dialog </span><span class="token punctuation">{</span>        <span class="token number">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token selector">> .dialog </span><span class="token punctuation">{</span>        <span class="token number">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><blockquote><p>不允许有空的规则； </p><p>元素选择器用小写字母； </p><p>去掉小数点前面的0； </p><p>去掉数字中不必要的小数点和末尾的0； </p><p>属性值’0’后面不要加单位； </p><p>同个属性不同前缀的写法需要在垂直方向保持对齐，具体参照右边的写法； </p><p>无前缀的标准属性应该写在有前缀的属性后面； 不要在同个规则里出现重复的属性，如果重复的属性是连续的则没关系； </p><p>不要在一个文件里出现两个相同的规则； </p><p>用 <span style="color:red;font-weight:bloder;">border: 0; </span>代替<span style="color:red;font-weight:bloder;"> border: none;</span> ； </p><p>选择器不要超过4层（在scss中如果超过4层应该考虑用嵌套的方式来写）； </p><p>发布的代码中不要有 <span style="color:red;font-weight:bloder;">@import ；</span> </p><p>尽量少用’*’选择器。</p></blockquote><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector">.element </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector">LI </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector">li </span><span class="token punctuation">{</span>    <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50.0</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>    <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>    <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#fff</span> <span class="token number">0</span>, <span class="token hexcode">#eee</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>top, <span class="token hexcode">#fff</span> <span class="token number">0</span>, <span class="token hexcode">#eee</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>top, <span class="token hexcode">#fff</span> <span class="token number">0</span>, <span class="token hexcode">#eee</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>        <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>top, <span class="token hexcode">#fff</span> <span class="token number">0</span>, <span class="token hexcode">#eee</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>top, <span class="token hexcode">#fff</span> <span class="token number">0</span>, <span class="token hexcode">#eee</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#fff</span> <span class="token number">0</span>, <span class="token hexcode">#eee</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* not good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* good */</span><span class="token selector">.element </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="缩进-1"><a href="#缩进-1" class="headerlink" title="缩进"></a>缩进</h3><p>使用soft tab（4个空格）。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    x <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="单行长度"><a href="#单行长度" class="headerlink" title="单行长度"></a>单行长度</h3><p>不要超过80，但如果编辑器开启word wrap可以不考虑单行长度。</p><h3 id="分号-1"><a href="#分号-1" class="headerlink" title="分号"></a>分号</h3><p>以下几种情况后需加分号：</p><p>变量声明 </p><ul><li>表达式</li><li>return </li><li>throw </li><li>break </li><li>continue </li><li>do-while</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* var declaration */</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* expression statement */</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* do-while */</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="空格-1"><a href="#空格-1" class="headerlink" title="空格"></a>空格</h3><p>以下几种情况不需要空格：</p><ul><li>对象的属性名后 </li><li>前缀一元运算符后 </li><li>后缀一元运算符前 </li><li>函数调用括号前 </li><li>无论是函数声明还是函数表达式，’(‘前不要空格 </li><li>数组的’[‘后和’]’前 </li><li>对象的’{‘后和’}’前 </li><li>运算符’(‘后和’)’前</li></ul><p>以下几种情况需要空格：</p><ul><li>二元运算符前后 </li><li>三元运算符’?:’前后 </li><li>代码块’{‘前 下列关键字前： <span style="color:red;font-weight:bloder;">else , while , catch , finally </span></li><li>下列关键字后：<span style="color:red;font-weight:bloder;"> if , else , for , while , do , switch , case , try , catch , finally , with , return , typeof </span></li><li>单行注释’//‘后（若单行注释和代码同行，则’//‘前也需要），多行注释’*’后 </li><li>对象的属性值前 for循环，分号后留有一个空格，前置条件如果有多个，逗号后留一个空格 </li><li>无论是函数声明还是函数表达式，’{‘前一定要有空格 </li><li>函数的参数之间</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    b <span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// not good</span><span class="token operator">++</span> x<span class="token punctuation">;</span>y <span class="token operator">++</span><span class="token punctuation">;</span>z <span class="token operator">=</span> x<span class="token operator">?</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token operator">++</span>x<span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">;</span>z <span class="token operator">=</span> x <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span> <span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// no space before '(', one space before '{', one space between function parameters</span><span class="token keyword">var</span> doSomething <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// no space before '('</span><span class="token function">doSomething</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="空行-1"><a href="#空行-1" class="headerlink" title="空行"></a>空行</h3><p>以下几种情况需要空行：</p><ul><li>变量声明后（当变量声明在代码块的最后一行时，则无需空行） </li><li>注释前（当注释在代码块的第一行时，则无需空行） </li><li>代码块后（在函数调用、数组、对象中则无需空行） </li><li>文件最后保留一个空行</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// need blank line after variable declaration</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// not need blank line when variable declaration is last expression in the current block</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// need blank line before line comment</span>a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// not need blank line when comment is first line of block</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// need blank line after blocks</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    foo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    bar<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// not need blank line when in argument list, array, object</span><span class="token function">func</span><span class="token punctuation">(</span>    <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="换行-1"><a href="#换行-1" class="headerlink" title="换行"></a>换行</h3><p>换行的地方，行末必须有’,’或者运算符； </p><p>以下几种情况不需要换行：</p><ul><li><p>下列关键字后：<span style="color:red;font-weight:bloder;"> else , catch , finally </span></p></li><li><p>代码块’{‘前</p></li></ul><p>以下几种情况需要换行：</p><ul><li><p>代码块’{‘后和’}’前</p></li><li><p>变量赋值后</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>x <span class="token operator">=</span> y    <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>x <span class="token operator">=</span> y <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>x <span class="token operator">=</span> y <span class="token operator">?</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// no need line break with 'else', 'catch', 'finally'</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">var</span> a<span class="token punctuation">,</span> foo <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span>    c<span class="token punctuation">,</span> bar <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// good</span><span class="token keyword">var</span> a<span class="token punctuation">,</span>    foo <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>    b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> bar <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span></code></pre><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>双斜线后，必须跟一个空格； </p><p>缩进与下一行代码保持一致； </p><p>可位于一个代码行的末尾，与代码间隔一个空格。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// if you made it here, then all security checks passed</span>    <span class="token function">allowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> zhangsan <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// one space after code</span></code></pre><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>最少三行, ‘*’后跟一个空格，具体参照右边的写法； </p><p>建议在以下情况下使用：</p><ul><li>难于理解的代码段 </li><li>可能存在错误的代码段 </li><li>浏览器特殊的HACK代码 </li><li>业务逻辑强相关的代码</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* * one space after '*' */</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>各类标签@param, @method等请参考<a href="http://usejsdoc.org/"><strong>usejsdoc</strong></a>和**<a href="http://yuri4ever.github.io/jsdoc/">JSDoc Guide</a>**； </p><p>建议在以下情况下使用：</p><ul><li>所有常量 </li><li>所有函数 </li><li>所有类</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @func * @desc 一个带参数的函数 * @param {string} a - 参数a * @param {number} b=1 - 参数b默认值为1 * @param {string} c=1 - 参数c有两种支持的取值&lt;/br>1—表示x&lt;/br>2—表示xx * @param {object} d - 参数d为一个对象 * @param {string} d.e - 参数d的e属性 * @param {string} d.f - 参数d的f属性 * @param {object[]} g - 参数g为一个对象数组 * @param {string} g.h - 参数g数组中一项的h属性 * @param {string} g.i - 参数g数组中一项的i属性 * @param {string} [j] - 参数j是一个可选参数 */</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> g<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h3 id="引号-1"><a href="#引号-1" class="headerlink" title="引号"></a>引号</h3><p>最外层统一使用单引号。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">,</span>    z <span class="token operator">=</span> <span class="token string">'&lt;div id="test">&lt;/div>'</span><span class="token punctuation">;</span></code></pre><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><ul><li>标准变量采用驼峰式命名（除了对象的属性外，主要是考虑到cgi返回的数据） </li><li>‘ID’在变量名中全大写 </li><li>‘URL’在变量名中全大写 </li><li>‘Android’在变量名中大写第一个字母 </li><li>‘iOS’在变量名中小写第一个，大写后两个字母 </li><li>常量全大写，用下划线连接 构造函数，大写第一个字母 </li><li>jquery对象必须以’$’开头命名</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> thisIsMyName<span class="token punctuation">;</span><span class="token keyword">var</span> goodID<span class="token punctuation">;</span><span class="token keyword">var</span> reportURL<span class="token punctuation">;</span><span class="token keyword">var</span> AndroidVersion<span class="token punctuation">;</span><span class="token keyword">var</span> iOSVersion<span class="token punctuation">;</span><span class="token keyword">var</span> MAX_COUNT <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// not good 变量命名不规范</span><span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">var</span> $body <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>一个函数作用域中所有的变量声明尽量提到函数首部，用一个var声明，不允许出现两个连续的 var声明。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doSomethingWithItems</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// use one var</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>        result <span class="token operator">=</span> value <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span>        i<span class="token punctuation">,</span>        len<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>无论是函数声明还是函数表达式，’(‘前不要空格，但’{‘前一定要有空格； </p><p>函数调用括号前不需要空格； </p><p>立即执行函数外必须包一层括号； </p><p>不要给inline function命名； </p><p>参数之间用’, ‘分隔，注意逗号后有一个空格。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// no space before '(', but one space before'{'</span><span class="token keyword">var</span> doSomething <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// not good</span>doSomething <span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token function">doSomething</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// requires parentheses around immediately invoked function expressions 立即调用方法</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// not good</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// not good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// use ', ' between function parameters </span><span class="token keyword">var</span> doSomething <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="数组、对象"><a href="#数组、对象" class="headerlink" title="数组、对象"></a>数组、对象</h3><p>对象属性名不需要加引号； </p><p>对象以缩进的形式书写，不要写在一行； </p><p>数组、对象最后不要有逗号。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>b<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><p>下列关键字后必须有大括号（即使代码块的内容只有一行）： <span style="color:red;font-weight:bloder;">if , else , for , while , do , switch , try , catch , finally , with</span> 。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>适用场景：</p><ul><li>初始化一个将来可能被赋值为对象的变量 </li><li>与已经初始化的变量做比较 </li><li>作为一个参数为对象的函数的调用传参 </li><li>作为一个返回对象的函数的返回值</li></ul><p>不适用场景：</p><ul><li>不要用null来判断函数调用时有无传参 </li><li>不要与未初始化的变量做比较</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// not mean b is not supply</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> a<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>永远不要直接使用undefined进行变量判断； </p><p>使用typeof和字符串’undefined’对变量进行判断。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// good</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> person <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h3 id="jshint"><a href="#jshint" class="headerlink" title="jshint"></a>jshint</h3><p>用’===’, ‘!==’代替’==’, ‘!=’； </p><p>for-in里一定要有hasOwnProperty的判断； </p><p>不要在内置对象的原型上添加方法，如Array, Date； </p><p>不要在内层作用域的代码里声明了变量，之后却访问到了外层作用域的同名变量； </p><p>变量不要先使用后声明； </p><p>不要在一句代码中单单使用构造函数，记得将其赋值给某个变量； </p><p>不要在同个作用域下声明同名变量； </p><p>不要在一些不需要的地方加括号，例：delete(a.b)； </p><p>不要使用未声明的变量（全局变量需要加到.jshintrc文件的globals属性里面）； </p><p>不要声明了变量却不使用； </p><p>不要在应该做比较的地方做赋值； </p><p>debugger不要出现在提交的代码里； </p><p>数组中不要存在空元素； </p><p>不要在循环内部声明函数； </p><p>不要像这样使用构造函数，例： new function () { … } , new Object ；</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// be sure that obj[key] belongs to the object and was not inherited</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// not good</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        x <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">delete</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>attr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// not good</span><span class="token keyword">var</span> singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> privateVar<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>publicMethod <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        privateVar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>publicMethod2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        privateVar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="杂项-1"><a href="#杂项-1" class="headerlink" title="杂项"></a>杂项</h3><p>不要混用tab和space； </p><p>不要在一处使用多个tab或space； </p><p>换行符统一用’LF’； </p><p>对上下文this的引用只能使用’_this’, ‘that’, ‘self’其中一个来命名； </p><p>行尾不要有空白字符； </p><p>switch的falling through和no default的情况一定要有注释特别说明； </p><p>不允许有空的代码块。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// not good 不要使用tab缩进</span><span class="token keyword">var</span> a<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// not good 命名不规范</span>    <span class="token keyword">var</span> me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// good</span>    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// good</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// good</span>    <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token operator">...</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token operator">...</span>    <span class="token comment" spellcheck="true">// why fall through 缺少break</span>    <span class="token keyword">case</span> <span class="token number">4</span>        <span class="token operator">...</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// why no default 缺少default</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// not good with empty block 方法体内容为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><h2 id="编辑器配置和构建检查"><a href="#编辑器配置和构建检查" class="headerlink" title="编辑器配置和构建检查"></a>编辑器配置和构建检查</h2><h3 id="sublime3插件"><a href="#sublime3插件" class="headerlink" title="sublime3插件"></a>sublime3插件</h3><ol><li><p>安装node包</p><ul><li><p>jscs <span style="color:red;font-weight:bloder;">npm install jscs -g</span> </p></li><li><p>jshint <span style="color:red;font-weight:bloder;">npm install jshint -g </span></p></li><li><p>csscomb <span style="color:red;font-weight:bloder;">npm install csscomb -g </span></p></li><li><p>csslint <span style="color:red;font-weight:bloder;">npm install csslint -g</span></p></li></ul></li><li><p>安装gem包</p><ul><li>scss-lint <span style="color:red;font-weight:bloder;">gem install scss_lint</span></li></ul></li><li><p>安装sublime3 <strong><a href="https://packagecontrol.io/installation#st3">Package Control</a></strong></p><ul><li>按下 <span style="color:red;font-weight:bloder;">ctrl+`</span> </li><li>复制粘贴以下代码 <span style="color:red;font-weight:bloder;">import urllib.request,os,hashlib; h = ‘eb2297e1a458f27d836c04bb0cbaf282’ + ‘d0e7a3098092775ccb37ca9d6b2e4b7d’; pf = ‘Package Control.sublime-package’; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( ‘<a href="http://packagecontrol.io/'">http://packagecontrol.io/'</a> + pf.replace(‘ ‘, ‘%20’)).read(); dh = hashlib.sha256(by).hexdigest(); print(‘Error validating download (got %s instead of %s), please try manual install’ % (dh, h)) if dh != h else open(os.path.join( ipp, pf), ‘wb’ ).write(by)</span></li></ul></li><li><p>安装sublime3插件</p><ul><li>按下 <span style="color:red;font-weight:bloder;">ctrl+shift+p</span> ，输入’ip’（Install Package） </li><li>输入以下插件的名字，按顺序逐个进行安装： <ul><li><span style="color:red;font-weight:bloder;">EditorConfig </span></li><li><span style="color:red;font-weight:bloder;">Sass </span></li><li><span style="color:red;font-weight:bloder;">SublimeLinter </span></li><li><span style="color:red;font-weight:bloder;">SublimeLinter-jscs </span></li><li><span style="color:red;font-weight:bloder;">SublimeLinter-jshint </span></li><li><span style="color:red;font-weight:bloder;">SublimeLinter-csslint </span></li><li><span style="color:red;font-weight:bloder;">SublimeLinter-contrib-scss-lint </span></li><li><span style="color:red;font-weight:bloder;">JSFormat </span></li><li><span style="color:red;font-weight:bloder;">CSScomb</span></li></ul></li></ul></li><li><p>插件的配置文件</p><p>将以下配置文件分别下载后放入项目根目录下：</p><ul><li><p><span style="color:red;font-weight:bloder;">EditorConfig</span> <strong><a href="http://alloyteam.github.io/CodeGuide/.editorconfig">配置文件</a></strong></p></li><li><p><span style="color:red;font-weight:bloder;">JSCS</span> <a href="http://alloyteam.github.io/CodeGuide/.jscsrc"><strong>配置文件</strong></a></p></li><li><p>JSHint <a href="http://alloyteam.github.io/CodeGuide/.jshintrc"><strong>配置文件</strong></a> </p><p>注意：全局变量需要手动加到配置文件的globals属性里，例： </p><p>{</p><p>​<span style="color:red;font-weight:bloder;">“globals”</span>: {</p><p>​ <span style="color:red;font-weight:bloder;">“ImageHandle”</span>: <span style="color:blue;font-weight:bloder;">true</span> </p><p>​} </p><p>}</p></li><li><p><span style="color:red;font-weight:bloder;">CSSLint</span> <strong><a href="http://alloyteam.github.io/CodeGuide/.csslintrc">配置文件</a></strong></p></li><li><p><span style="color:red;font-weight:bloder;">SCSS-Lint</span> <a href="http://alloyteam.github.io/CodeGuide/.scss-lint.yml"><strong>配置文件</strong></a></p></li></ul></li><li><p>编辑器及插件设置</p><ul><li><p><span style="color:red;font-weight:bloder;">sublime3</span> 自身 </p><p>Preferences-&gt;Setting-User，增加下面两个配置： </p><p>{ </p><p>​<span style="color:red;font-weight:bloder;">“translate_tabs_to_spaces”</span>: <span style="color:blue;font-weight:bloder;">true</span>, </p><p>​<span style="color:red;font-weight:bloder;">“word_wrap”</span>: <span style="color:blue;font-weight:bloder;">true </span></p><p>}</p><p> 点击右下角的Spaces-&gt;Convert Indentation to Spaces可以将文件中的所有tab转换 成空格 </p></li><li><p><span style="color:red;font-weight:bloder;">JSFormat</span> Preferences-&gt;Package Settings-&gt;JSFormat-&gt;Setting-User，下载**<a href="http://alloyteam.github.io/CodeGuide/jsformat_setting_user.json">配置文件</a>**覆盖 配置好后格式化的默认快捷键是 ctrl+alt+f </p></li><li><p><span style="color:red;font-weight:bloder;">SublimeLinter</span> </p><p>右键-&gt;SublimeLinter-&gt;Lint Mode，有4种检查模式，建议选择 <span style="color:red;font-weight:bloder;">Load/save </span></p><p>右键-&gt;SublimeLinter-&gt;Mark Style，建议选择<span style="color:red;font-weight:bloder;"> Outline </span></p><p>右键-&gt;SublimeLinter-&gt;Choose Gutter Theme，建议选择 <span style="color:red;font-weight:bloder;">Blueberry-round </span></p><p>右键-&gt;SublimeLinter-&gt;Open User Settings，将linter里面jscs的args改成 <span style="color:red;font-weight:bloder;">[“– verbose”] </span>，将linter里面csslint的ignore改成 <span style="color:red;font-weight:bloder;">“box-model,adjoining-classes,boxsizing,compatible-vendor-prefixes,gradients,text-indent,fallbackcolors,star-property-hack,underscore-property-hack,bulletproof-fontface,font-faces,import,regex-selectors,universal-selector,unqualifiedattributes,overqualified-elements,duplicate-background-images,floats,fontsizes,ids,important,outline-none,qualified-headings,unique-headings” </span></p><p>当光标处于有错误的代码行时，详细的错误信息会显示在下面的状态栏中 右键-&gt;SublimeLinter可以看到所有的快捷键，其中<span style="color:red;font-weight:bloder;"> ctrl+k</span>, a 可以列出所有错误 </p></li><li><p><span style="color:red;font-weight:bloder;">CSScomb</span> Preferences-&gt;Package Settings-&gt;CSScomb-&gt;Setting-User，下载**<a href="http://alloyteam.github.io/CodeGuide/csscomb_setting_user.json">配置文件</a>**覆盖 配置好后格式化的默认快捷键是<span style="color:red;font-weight:bloder;"> ctrl+shift+c</span></p></li></ul></li></ol><h3 id="grunt插件"><a href="#grunt插件" class="headerlink" title="grunt插件"></a>grunt插件</h3><ol><li><p>在项目中安装grunt插件</p><ul><li>jscs <span style="color:red;font-weight:bloder;">npm install grunt-jscs –save-dev</span> </li><li>jshint <span style="color:red;font-weight:bloder;">npm install grunt-contrib-jshint –save-dev </span></li><li>csslint <span style="color:red;font-weight:bloder;">npm install grunt-contrib-csslint –save-dev </span></li><li>scss-lint <span style="color:red;font-weight:bloder;">npm install grunt-scss-lint –save-dev</span></li></ul></li><li><p>插件的配置文件</p><ul><li><pre class=" language-javascript"><code class="language-javascript">JSCS<span class="token punctuation">{</span>    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        config<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        verbose<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    files<span class="token punctuation">:</span> <span class="token punctuation">{</span>        src<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><pre class=" language-javascript"><code class="language-javascript">JSHint<span class="token punctuation">{</span>    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        jshintrc<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    files<span class="token punctuation">:</span> <span class="token punctuation">{</span>        src<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><pre class=" language-javascript"><code class="language-javascript">CSSLint<span class="token punctuation">{</span>    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        csslintrc<span class="token punctuation">:</span> <span class="token string">'.csslintrc'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    files<span class="token punctuation">:</span> <span class="token punctuation">{</span>        src<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><pre class=" language-javascript"><code class="language-javascript">SCSS<span class="token operator">-</span>Lint<span class="token punctuation">{</span>    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        config<span class="token punctuation">:</span> <span class="token string">'.scss-lint.yml'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    files<span class="token punctuation">:</span> <span class="token punctuation">{</span>        src<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol><p><code>&lt;span style="color:blue;font-weight:bloder;"&gt; </code></p><p><code>&lt;span style="color:red;font-weight:bloder;"&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 前端 </category>
          
          <category> HTML5 </category>
          
          <category> CSS </category>
          
          <category> JavaScript </category>
          
          <category> SCSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
            <tag> HTML5 </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
            <tag> SCSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2使用vxe-table的教程</title>
      <link href="/jojoblog.github.io/2023/04/02/vue2-shi-yong-vxe-table-de-jiao-cheng/"/>
      <url>/jojoblog.github.io/2023/04/02/vue2-shi-yong-vxe-table-de-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><blockquote><p>推荐使用 <strong>npm</strong> 的方式安装，它能更好地和 <a href="https://webpack.js.org/">webpack</a>、<a href="https://vitejs.dev/">vite</a> 等打包工具配合使用。<br>依赖库： <a href="https://www.npmjs.com/package/xe-utils">xe-utils</a> <a href="https://cn.vuejs.org/v2/guide/components-slots.html#%E5%8A%A8%E6%80%81%E6%8F%92%E6%A7%BD%E5%90%8D">vue 3.2+</a></p></blockquote><pre><code>  npm install xe-utils vxe-table // 全局安装命令</code></pre><h5 id="引入方式1"><a href="#引入方式1" class="headerlink" title="引入方式1"></a>引入方式1</h5><pre class=" language-json"><code class="language-json"> import <span class="token punctuation">{</span> App<span class="token punctuation">,</span> createApp <span class="token punctuation">}</span> = 'vue'        import VXETable from 'vxe-table'        import 'vxe-table/lib/style.css'        function useTable (app<span class="token operator">:</span> App<span class="token punctuation">)</span> <span class="token punctuation">{</span>          app.use(VXETable<span class="token punctuation">)</span>          // 给 vue 实例挂载内部对象，例如：          // app.config.globalProperties.$XModal = VXETable.modal          // app.config.globalProperties.$XPrint = VXETable.print          // app.config.globalProperties.$XSaveFile = VXETable.saveFile          // app.config.globalProperties.$XReadFile = VXETable.readFile        <span class="token punctuation">}</span>        createApp(App<span class="token punctuation">)</span>.use(useTable<span class="token punctuation">)</span>.mount('#app'<span class="token punctuation">)</span></code></pre><h5 id="引入方式2"><a href="#引入方式2" class="headerlink" title="引入方式2"></a>引入方式2</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> VXETable <span class="token keyword">from</span> <span class="token string">'vxe-table'</span><span class="token keyword">import</span> <span class="token string">'vxe-table/lib/index.css'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VXETable<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//应用插件</span><span class="token comment" spellcheck="true">// Vue.use(VueRouter)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    router<span class="token punctuation">,</span>    render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>    store<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><blockquote><p>可以通过 <a href="https://unpkg.com/vxe-table/">unpkg</a> 或 <a href="https://cdn.jsdelivr.net/npm/vxe-table/">cdnjs</a> 获取到最新版本的资源，并在页面上引入即可<br>（注：<span style="color:red;">不建议将不受信任的CDN地址用于生产，因为该连接随时都可能会失效，导致项目挂掉，使用CDN方式记得锁定版本号，锁定版本的方法请查看 </span><a href="https://unpkg.com/">unpkg.com</a>）</p></blockquote><pre class=" language-js"><code class="language-js"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入样式 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vxe-table/lib/style.css"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入vue <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入组件 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/xe-utils"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vxe-table"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h4><h5 id="方式1——使用vite"><a href="#方式1——使用vite" class="headerlink" title="方式1——使用vite"></a>方式1——使用vite</h5><blockquote><p>方式1：如果您使用了 vite，借助插件 <a href="https://www.npmjs.com/package/vite-plugin-style-import">vite-plugin-style-import</a> 可以实现按需加载模块，减少文件体积。</p></blockquote><pre><code>npm install vite-plugin-style-import -D</code></pre><p>修改文件 vite.config.ts</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vite'</span>        <span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span>        <span class="token keyword">import</span> <span class="token punctuation">{</span> createStyleImportPlugin<span class="token punctuation">,</span> VxeTableResolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vite-plugin-style-import'</span>        <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">// ...,</span>            <span class="token function">createStyleImportPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              resolves<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token function">VxeTableResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>最后这样按需引入模块，就可以减小体积了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> App<span class="token punctuation">,</span> createApp <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">'vue'</span>        <span class="token keyword">import</span> <span class="token string">'xe-utils'</span>        <span class="token keyword">import</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 全局对象</span>          VXETable<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 表格功能</span>          <span class="token comment" spellcheck="true">// Filter,</span>          <span class="token comment" spellcheck="true">// Edit,</span>          <span class="token comment" spellcheck="true">// Menu,</span>          <span class="token comment" spellcheck="true">// Export,</span>          <span class="token comment" spellcheck="true">// Keyboard,</span>          <span class="token comment" spellcheck="true">// Validator,</span>          <span class="token comment" spellcheck="true">// 可选组件</span>          Icon<span class="token punctuation">,</span>          Column<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// Colgroup,</span>          <span class="token comment" spellcheck="true">// Grid,</span>          <span class="token comment" spellcheck="true">// Tooltip,</span>          <span class="token comment" spellcheck="true">// Toolbar,</span>          <span class="token comment" spellcheck="true">// Pager,</span>          <span class="token comment" spellcheck="true">// Form,</span>          <span class="token comment" spellcheck="true">// FormItem,</span>          <span class="token comment" spellcheck="true">// FormGather,</span>          <span class="token comment" spellcheck="true">// Checkbox,</span>          <span class="token comment" spellcheck="true">// CheckboxGroup,</span>          <span class="token comment" spellcheck="true">// Radio,</span>          <span class="token comment" spellcheck="true">// RadioGroup,</span>          <span class="token comment" spellcheck="true">// RadioButton,</span>          <span class="token comment" spellcheck="true">// Switch,</span>          <span class="token comment" spellcheck="true">// Input,</span>          <span class="token comment" spellcheck="true">// Select,</span>          <span class="token comment" spellcheck="true">// Optgroup,</span>          <span class="token comment" spellcheck="true">// Option,</span>          <span class="token comment" spellcheck="true">// Textarea,</span>          <span class="token comment" spellcheck="true">// Button,</span>          <span class="token comment" spellcheck="true">// Modal,</span>          <span class="token comment" spellcheck="true">// List,</span>          <span class="token comment" spellcheck="true">// Pulldown,</span>          <span class="token comment" spellcheck="true">// 表格</span>          Table        <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vxe-table'</span>        <span class="token keyword">import</span> zhCN <span class="token keyword">from</span> <span class="token string">'vxe-table/es/locale/lang/zh-CN'</span>        <span class="token comment" spellcheck="true">// 按需加载的方式默认是不带国际化的，自定义国际化需要自行解析占位符 '{0}'，例如：</span>        VXETable<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          i18n<span class="token punctuation">:</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> XEUtils<span class="token punctuation">.</span><span class="token function">toFormatString</span><span class="token punctuation">(</span>XEUtils<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>zhCN<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">function</span> useTable <span class="token punctuation">(</span>app<span class="token punctuation">:</span> App<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 表格功能</span>          <span class="token comment" spellcheck="true">// app.use(Filter)</span>          <span class="token comment" spellcheck="true">// .use(Edit)</span>          <span class="token comment" spellcheck="true">// .use(Menu)</span>          <span class="token comment" spellcheck="true">// .use(Export)</span>          <span class="token comment" spellcheck="true">// .use(Keyboard)</span>          <span class="token comment" spellcheck="true">// .use(Validator)</span>          <span class="token comment" spellcheck="true">// 可选组件</span>          app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Icon<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Column<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// .use(Colgroup)</span>          <span class="token comment" spellcheck="true">// .use(Grid)</span>          <span class="token comment" spellcheck="true">// .use(Tooltip)</span>          <span class="token comment" spellcheck="true">// .use(Toolbar)</span>          <span class="token comment" spellcheck="true">// .use(Pager)</span>          <span class="token comment" spellcheck="true">// .use(Form)</span>          <span class="token comment" spellcheck="true">// .use(FormItem)</span>          <span class="token comment" spellcheck="true">// .use(FormGather)</span>          <span class="token comment" spellcheck="true">// .use(Checkbox)</span>          <span class="token comment" spellcheck="true">// .use(CheckboxGroup)</span>          <span class="token comment" spellcheck="true">// .use(Radio)</span>          <span class="token comment" spellcheck="true">// .use(RadioGroup)</span>          <span class="token comment" spellcheck="true">// .use(RadioButton)</span>          <span class="token comment" spellcheck="true">// .use(Switch)</span>          <span class="token comment" spellcheck="true">// .use(Input)</span>          <span class="token comment" spellcheck="true">// .use(Select)</span>          <span class="token comment" spellcheck="true">// .use(Optgroup)</span>          <span class="token comment" spellcheck="true">// .use(Option)</span>          <span class="token comment" spellcheck="true">// .use(Textarea)</span>          <span class="token comment" spellcheck="true">// .use(Button)</span>          <span class="token comment" spellcheck="true">// .use(Modal)</span>          <span class="token comment" spellcheck="true">// .use(List)</span>          <span class="token comment" spellcheck="true">// .use(Pulldown)</span>          <span class="token comment" spellcheck="true">// 安装表格</span>          <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Table<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 给 vue 实例挂载内部对象，例如：</span>          <span class="token comment" spellcheck="true">// app.config.globalProperties.$XModal = VXETable.modal</span>          <span class="token comment" spellcheck="true">// app.config.globalProperties.$XPrint = VXETable.print</span>          <span class="token comment" spellcheck="true">// app.config.globalProperties.$XSaveFile = VXETable.saveFile</span>          <span class="token comment" spellcheck="true">// app.config.globalProperties.$XReadFile = VXETable.readFile</span>        <span class="token punctuation">}</span>        <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>useTable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><h5 id="方式1——使用-webpack"><a href="#方式1——使用-webpack" class="headerlink" title="方式1——使用 webpack"></a>方式1——使用 webpack</h5><blockquote><p>方式2：如果您使用了 webpack，借助插件 <a href="https://www.npmjs.com/package/babel-plugin-import">babel-plugin-import</a> 可以实现按需加载模块，减少文件体积。</p></blockquote><pre><code> npm install babel-plugin-import -D</code></pre><p>修改文件 .babelrc 或 babel.config.js</p><pre class=" language-js"><code class="language-js">        <span class="token punctuation">{</span>          <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span>              <span class="token string">"import"</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                <span class="token string">"libraryName"</span><span class="token punctuation">:</span> <span class="token string">"vxe-table"</span><span class="token punctuation">,</span>                <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 样式是否也按需加载</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      </code></pre><p>最后这样按需引入模块，就可以减小体积了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> App<span class="token punctuation">,</span> createApp <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">'vue'</span>        <span class="token keyword">import</span> <span class="token string">'xe-utils'</span>        <span class="token keyword">import</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 核心</span>          VXETable<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 表格功能</span>          Header<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// Footer,</span>          <span class="token comment" spellcheck="true">// Icon,</span>          <span class="token comment" spellcheck="true">// Filter,</span>          <span class="token comment" spellcheck="true">// Edit,</span>          <span class="token comment" spellcheck="true">// Menu,</span>          <span class="token comment" spellcheck="true">// Export,</span>          <span class="token comment" spellcheck="true">// Keyboard,</span>          <span class="token comment" spellcheck="true">// Validator,</span>          <span class="token comment" spellcheck="true">// 可选组件</span>          Column<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// Colgroup,</span>          <span class="token comment" spellcheck="true">// Grid,</span>          <span class="token comment" spellcheck="true">// Tooltip,</span>          <span class="token comment" spellcheck="true">// Toolbar,</span>          <span class="token comment" spellcheck="true">// Pager,</span>          <span class="token comment" spellcheck="true">// Form,</span>          <span class="token comment" spellcheck="true">// FormItem,</span>          <span class="token comment" spellcheck="true">// FormGather,</span>          <span class="token comment" spellcheck="true">// Checkbox,</span>          <span class="token comment" spellcheck="true">// CheckboxGroup,</span>          <span class="token comment" spellcheck="true">// Radio,</span>          <span class="token comment" spellcheck="true">// RadioGroup,</span>          <span class="token comment" spellcheck="true">// RadioButton,</span>          <span class="token comment" spellcheck="true">// Switch,</span>          <span class="token comment" spellcheck="true">// Input,</span>          <span class="token comment" spellcheck="true">// Select,</span>          <span class="token comment" spellcheck="true">// Optgroup,</span>          <span class="token comment" spellcheck="true">// Option,</span>          <span class="token comment" spellcheck="true">// Textarea,</span>          <span class="token comment" spellcheck="true">// Button,</span>          <span class="token comment" spellcheck="true">// Modal,</span>          <span class="token comment" spellcheck="true">// List,</span>          <span class="token comment" spellcheck="true">// Pulldown,</span>          <span class="token comment" spellcheck="true">// 表格</span>          Table        <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vxe-table'</span>        <span class="token keyword">import</span> zhCN <span class="token keyword">from</span> <span class="token string">'vxe-table/lib/locale/lang/zh-CN'</span>        <span class="token comment" spellcheck="true">// 按需加载的方式默认是不带国际化的，自定义国际化需要自行解析占位符 '{0}'，例如：</span>        VXETable<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          i18n<span class="token punctuation">:</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> XEUtils<span class="token punctuation">.</span><span class="token function">toFormatString</span><span class="token punctuation">(</span>XEUtils<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>zhCN<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">function</span> useTable <span class="token punctuation">(</span>app<span class="token punctuation">:</span> App<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 表格功能</span>          app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Header<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// .use(Footer)</span>          <span class="token comment" spellcheck="true">// .use(Icon)</span>          <span class="token comment" spellcheck="true">// .use(Filter)</span>          <span class="token comment" spellcheck="true">// .use(Edit)</span>          <span class="token comment" spellcheck="true">// .use(Menu)</span>          <span class="token comment" spellcheck="true">// .use(Export)</span>          <span class="token comment" spellcheck="true">// .use(Keyboard)</span>          <span class="token comment" spellcheck="true">// .use(Validator)</span>          <span class="token comment" spellcheck="true">// 可选组件</span>          <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Column<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// .use(Colgroup)</span>          <span class="token comment" spellcheck="true">// .use(Grid)</span>          <span class="token comment" spellcheck="true">// .use(Tooltip)</span>          <span class="token comment" spellcheck="true">// .use(Toolbar)</span>          <span class="token comment" spellcheck="true">// .use(Pager)</span>          <span class="token comment" spellcheck="true">// .use(Form)</span>          <span class="token comment" spellcheck="true">// .use(FormItem)</span>          <span class="token comment" spellcheck="true">// .use(FormGather)</span>          <span class="token comment" spellcheck="true">// .use(Checkbox)</span>          <span class="token comment" spellcheck="true">// .use(CheckboxGroup)</span>          <span class="token comment" spellcheck="true">// .use(Radio)</span>          <span class="token comment" spellcheck="true">// .use(RadioGroup)</span>          <span class="token comment" spellcheck="true">// .use(RadioButton)</span>          <span class="token comment" spellcheck="true">// .use(Switch)</span>          <span class="token comment" spellcheck="true">// .use(Input)</span>          <span class="token comment" spellcheck="true">// .use(Select)</span>          <span class="token comment" spellcheck="true">// .use(Optgroup)</span>          <span class="token comment" spellcheck="true">// .use(Option)</span>          <span class="token comment" spellcheck="true">// .use(Textarea)</span>          <span class="token comment" spellcheck="true">// .use(Button)</span>          <span class="token comment" spellcheck="true">// .use(Modal)</span>          <span class="token comment" spellcheck="true">// .use(List)</span>          <span class="token comment" spellcheck="true">// .use(Pulldown)</span>          <span class="token comment" spellcheck="true">// 安装表格</span>          <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Table<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>useTable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="基本写法（js）："><a href="#基本写法（js）：" class="headerlink" title="基本写法（js）："></a>基本写法（js）：</h4><blockquote><p>基本写法（js）：</p></blockquote><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-table</span> <span class="token attr-name">border</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seq<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ row }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>自定义插槽模板 {{ row.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-grid</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gridOptions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ row }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>自定义插槽模板 {{ row.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-grid</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>          data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>              tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10001</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test1'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Develop'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'test abc'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10002</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test2'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Test'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Guangzhou'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10003</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test3'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'PM'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10004</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test4'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Designer'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>              gridOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>                border<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                columns<span class="token punctuation">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'seq'</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span> field<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Name'</span><span class="token punctuation">,</span> slots<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'name'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span> field<span class="token punctuation">:</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Sex'</span><span class="token punctuation">,</span> showHeaderOverflow<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span> field<span class="token punctuation">:</span> <span class="token string">'address'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Address'</span><span class="token punctuation">,</span> showOverflow<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10001</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test1'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Develop'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'test abc'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10002</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test2'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Test'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Guangzhou'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10003</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test3'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'PM'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10004</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test4'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Designer'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span>                <span class="token punctuation">]</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="基本写法（ts）："><a href="#基本写法（ts）：" class="headerlink" title="基本写法（ts）："></a>基本写法（ts）：</h4><blockquote><p>基本写法（ts）：</p></blockquote><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-table</span> <span class="token attr-name">border</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seq<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ row }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>自定义插槽模板 {{ row.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-grid</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gridOptions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ row }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>自定义插槽模板 {{ row.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-grid</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>        <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>              tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10001</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test1'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Develop'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'test abc'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10002</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test2'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Test'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Guangzhou'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10003</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test3'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'PM'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10004</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test4'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Designer'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>              gridOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>                border<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                columns<span class="token punctuation">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'seq'</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span> field<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Name'</span><span class="token punctuation">,</span> slots<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'name'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span> field<span class="token punctuation">:</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Sex'</span><span class="token punctuation">,</span> showHeaderOverflow<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span> field<span class="token punctuation">:</span> <span class="token string">'address'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Address'</span><span class="token punctuation">,</span> showOverflow<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10001</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test1'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Develop'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'test abc'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10002</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test2'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Test'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Guangzhou'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10003</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test3'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'PM'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10004</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test4'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Designer'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span>                <span class="token punctuation">]</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id><a href="#" class="headerlink" title></a></h3><h4 id="setup-写法（js）："><a href="#setup-写法（js）：" class="headerlink" title="setup 写法（js）："></a>setup 写法（js）：</h4><blockquote><p>setup 写法（js）：</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-table</span> <span class="token attr-name">border</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seq<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ row }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>自定义插槽模板 {{ row.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-grid</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gridOptions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ row }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>自定义插槽模板 {{ row.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-grid</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"> <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>        <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>          setup <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> tableData <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10001</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test1'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Develop'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'test abc'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10002</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test2'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Test'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Guangzhou'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10003</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test3'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'PM'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10004</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test4'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Designer'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> gridOptions <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              border<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              columns<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'seq'</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> field<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Name'</span><span class="token punctuation">,</span> slots<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'name'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> field<span class="token punctuation">:</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Sex'</span><span class="token punctuation">,</span> showHeaderOverflow<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> field<span class="token punctuation">:</span> <span class="token string">'address'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Address'</span><span class="token punctuation">,</span> showOverflow<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>              data<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10001</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test1'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Develop'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'test abc'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10002</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test2'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Test'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Guangzhou'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10003</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test3'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'PM'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10004</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test4'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Designer'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>              tableData<span class="token punctuation">,</span>              gridOptions            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="setup-写法（ts）："><a href="#setup-写法（ts）：" class="headerlink" title="setup 写法（ts）："></a>setup 写法（ts）：</h4><blockquote><p>setup 写法（ts）：</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-table</span> <span class="token attr-name">border</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seq<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ row }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>自定义插槽模板 {{ row.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-column</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-column</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vxe-grid</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gridOptions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ row }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>自定义插槽模板 {{ row.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vxe-grid</span><span class="token punctuation">></span></span></code></pre><h4 id="JSX-写法："><a href="#JSX-写法：" class="headerlink" title="JSX 写法："></a>JSX 写法：</h4><blockquote><p>JSX 写法：</p></blockquote><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> VxeTable<span class="token punctuation">,</span> VxeColumn<span class="token punctuation">,</span> VxeGrid<span class="token punctuation">,</span> VxeGridProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vxe-table'</span><span class="token keyword">interface</span> <span class="token class-name">UserVO</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    role<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    sex<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    address<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    setup <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> tableData <span class="token operator">=</span> ref<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserVO</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10001</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test1'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Develop'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'test abc'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10002</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test2'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Test'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Guangzhou'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10003</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test3'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'PM'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10004</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test4'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Designer'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> gridOptions <span class="token operator">=</span> reactive<span class="token operator">&lt;</span>VxeGridProps<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserVO</span><span class="token punctuation">></span></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>            border<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            columns<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'seq'</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    field<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>                    title<span class="token punctuation">:</span> <span class="token string">'Name'</span><span class="token punctuation">,</span>                    slots<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> row <span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> row<span class="token punctuation">:</span> UserVO <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token punctuation">[</span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>自定义插槽模板 <span class="token punctuation">{</span> row<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token punctuation">]</span>                <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> field<span class="token punctuation">:</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Sex'</span><span class="token punctuation">,</span> showHeaderOverflow<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> field<span class="token punctuation">:</span> <span class="token string">'address'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Address'</span><span class="token punctuation">,</span> showOverflow<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>                                                           <span class="token punctuation">]</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10001</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test1'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Develop'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'test abc'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10002</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test2'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Test'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Guangzhou'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10003</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test3'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'PM'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Man'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10004</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Test4'</span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token string">'Designer'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'Women'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'Shanghai'</span> <span class="token punctuation">}</span>            <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VxeTable</span> <span class="token attr-name">border</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>tableData<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VxeColumn</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seq<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VxeColumn</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VxeColumn</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>     <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> row <span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> row<span class="token punctuation">:</span> UserVO <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token punctuation">[</span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>自定义插槽模板 <span class="token punctuation">{</span> row<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VxeColumn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VxeColumn</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VxeColumn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VxeColumn</span> <span class="token attr-name">field</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VxeColumn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VxeTable</span><span class="token punctuation">></span></span><span class="token operator">&lt;</span>VxeGrid <span class="token punctuation">{</span><span class="token operator">...</span>gridOptions<span class="token punctuation">}</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VxeGrid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="全局参数"><a href="#全局参数" class="headerlink" title="全局参数"></a>全局参数</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> VXETable <span class="token keyword">from</span> <span class="token string">'vxe-table'</span>        VXETable<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// size: null, // 全局尺寸</span>          <span class="token comment" spellcheck="true">// zIndex: 999, // 全局 zIndex 起始值，如果项目的的 z-index 样式值过大时就需要跟随设置更大，避免被遮挡</span>          <span class="token comment" spellcheck="true">// version: 0, // 版本号，对于某些带数据缓存的功能有用到，上升版本号可以用于重置数据</span>          <span class="token comment" spellcheck="true">// loadingText: '加载中...', // 全局loading提示内容，如果为null则不显示文本</span>          <span class="token comment" spellcheck="true">// table: {</span>          <span class="token comment" spellcheck="true">//   showHeader: true,</span>          <span class="token comment" spellcheck="true">//   keepSource: false,</span>          <span class="token comment" spellcheck="true">//   showOverflow: null,</span>          <span class="token comment" spellcheck="true">//   showHeaderOverflow: null,</span>          <span class="token comment" spellcheck="true">//   showFooterOverflow: null,</span>          <span class="token comment" spellcheck="true">//   size: null,</span>          <span class="token comment" spellcheck="true">//   autoResize: false,</span>          <span class="token comment" spellcheck="true">//   stripe: false,</span>          <span class="token comment" spellcheck="true">//   border: false,</span>          <span class="token comment" spellcheck="true">//   round: false,</span>          <span class="token comment" spellcheck="true">//   emptyText: '暂无数据',</span>          <span class="token comment" spellcheck="true">//   resizeConfig: {</span>          <span class="token comment" spellcheck="true">//     refreshDelay: 250</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   rowConfig: {</span>          <span class="token comment" spellcheck="true">//     keyField: '_X_ROW_KEY' // 行数据的唯一主键字段名</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   radioConfig: {</span>          <span class="token comment" spellcheck="true">//     trigger: 'default'</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   checkboxConfig: {</span>          <span class="token comment" spellcheck="true">//     strict: false,</span>          <span class="token comment" spellcheck="true">//     highlight: false,</span>          <span class="token comment" spellcheck="true">//     range: false,</span>          <span class="token comment" spellcheck="true">//     trigger: 'default'</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   sortConfig: {</span>          <span class="token comment" spellcheck="true">//     remote: false,</span>          <span class="token comment" spellcheck="true">//     trigger: 'default',</span>          <span class="token comment" spellcheck="true">//     orders: ['asc', 'desc', null],</span>          <span class="token comment" spellcheck="true">//     sortMethod: null</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   filterConfig: {</span>          <span class="token comment" spellcheck="true">//     remote: false,</span>          <span class="token comment" spellcheck="true">//     filterMethod: null</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   expandConfig: {</span>          <span class="token comment" spellcheck="true">//     trigger: 'default',</span>          <span class="token comment" spellcheck="true">//     showIcon: true</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   treeConfig: {</span>          <span class="token comment" spellcheck="true">//     rowField: 'id',</span>          <span class="token comment" spellcheck="true">//     parentField: 'parentId',</span>          <span class="token comment" spellcheck="true">//     children: 'children',</span>          <span class="token comment" spellcheck="true">//     hasChild: 'hasChild',</span>          <span class="token comment" spellcheck="true">//     mapChildren: '_X_ROW_CHILD',</span>          <span class="token comment" spellcheck="true">//     indent: 20,</span>          <span class="token comment" spellcheck="true">//     showIcon: true</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   tooltipConfig: {</span>          <span class="token comment" spellcheck="true">//     enterable: true</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   menuConfig: {</span>          <span class="token comment" spellcheck="true">//     visibleMethod () {}</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   editConfig: {</span>          <span class="token comment" spellcheck="true">//     mode: 'cell',</span>          <span class="token comment" spellcheck="true">//     showAsterisk: true</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   importConfig: {</span>          <span class="token comment" spellcheck="true">//     modes: ['insert', 'covering']</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   exportConfig: {</span>          <span class="token comment" spellcheck="true">//     modes: ['current', 'selected']</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   customConfig: {</span>          <span class="token comment" spellcheck="true">//    storage: false</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   scrollX: {</span>          <span class="token comment" spellcheck="true">//     gt: 60</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   scrollY: {</span>          <span class="token comment" spellcheck="true">//     gt: 100</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   loading: {</span>          <span class="token comment" spellcheck="true">//     icon: 'vxe-icon-spinner roll',</span>          <span class="token comment" spellcheck="true">//     text: '加载中...'</span>          <span class="token comment" spellcheck="true">//   }</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// grid: {</span>          <span class="token comment" spellcheck="true">//   size: null,</span>          <span class="token comment" spellcheck="true">//   zoomConfig: {</span>          <span class="token comment" spellcheck="true">//     escRestore: true</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   pagerConfig: {</span>          <span class="token comment" spellcheck="true">//     perfect: false</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   toolbarConfig: {</span>          <span class="token comment" spellcheck="true">//     perfect: false</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   proxyConfig: {</span>          <span class="token comment" spellcheck="true">//     autoLoad: true,</span>          <span class="token comment" spellcheck="true">//     message: true,</span>          <span class="token comment" spellcheck="true">//     props: {</span>          <span class="token comment" spellcheck="true">//       list: null, // 用于列表，读取响应数据</span>          <span class="token comment" spellcheck="true">//       result: 'result', // 用于分页，读取响应数据</span>          <span class="token comment" spellcheck="true">//       total: 'page.total' // 用于分页，读取总条数</span>          <span class="token comment" spellcheck="true">//     }</span>          <span class="token comment" spellcheck="true">//     beforeItem: null,</span>          <span class="token comment" spellcheck="true">//     beforeColumn: null,</span>          <span class="token comment" spellcheck="true">//     beforeQuery: null,</span>          <span class="token comment" spellcheck="true">//     afterQuery: null,</span>          <span class="token comment" spellcheck="true">//     beforeDelete: null,</span>          <span class="token comment" spellcheck="true">//     afterDelete: null,</span>          <span class="token comment" spellcheck="true">//     beforeSave: null,</span>          <span class="token comment" spellcheck="true">//     afterSave: null</span>          <span class="token comment" spellcheck="true">//   }</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// pager: {</span>          <span class="token comment" spellcheck="true">//   size: null,</span>          <span class="token comment" spellcheck="true">//   autoHidden: false,</span>          <span class="token comment" spellcheck="true">//   perfect: true,</span>          <span class="token comment" spellcheck="true">//   pageSize: 10,</span>          <span class="token comment" spellcheck="true">//   pagerCount: 7,</span>          <span class="token comment" spellcheck="true">//   pageSizes: [10, 15, 20, 50, 100],</span>          <span class="token comment" spellcheck="true">//   layouts: ['PrevJump', 'PrevPage', 'Jump', 'PageCount', 'NextPage', 'NextJump', 'Sizes', 'Total']</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// form: {</span>          <span class="token comment" spellcheck="true">//   preventSubmit: false</span>          <span class="token comment" spellcheck="true">//   size: null,</span>          <span class="token comment" spellcheck="true">//   colon: false,</span>          <span class="token comment" spellcheck="true">//   validConfig: {</span>          <span class="token comment" spellcheck="true">//     autoPos: true</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   tooltipConfig: {</span>          <span class="token comment" spellcheck="true">//     enterable: true</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   titleAsterisk: true</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// input: {</span>          <span class="token comment" spellcheck="true">//   size: null,</span>          <span class="token comment" spellcheck="true">//   transfer: false</span>          <span class="token comment" spellcheck="true">//   parseFormat: 'yyyy-MM-dd HH:mm:ss.SSS',</span>          <span class="token comment" spellcheck="true">//   labelFormat: '',</span>          <span class="token comment" spellcheck="true">//   valueFormat: '',</span>          <span class="token comment" spellcheck="true">//   startDay: 1,</span>          <span class="token comment" spellcheck="true">//   digits: 2,</span>          <span class="token comment" spellcheck="true">//   controls: true</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// textarea: {</span>          <span class="token comment" spellcheck="true">//   size: null</span>          <span class="token comment" spellcheck="true">//   autosize: {</span>          <span class="token comment" spellcheck="true">//     minRows: 1,</span>          <span class="token comment" spellcheck="true">//     maxRows: 10</span>          <span class="token comment" spellcheck="true">//   }</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// select: {</span>          <span class="token comment" spellcheck="true">//   size: null,</span>          <span class="token comment" spellcheck="true">//   transfer: false,</span>          <span class="token comment" spellcheck="true">//   optionConfig: {</span>          <span class="token comment" spellcheck="true">//     keyField: '_X_OPTION_KEY' // 选项数据的唯一主键字段名</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   multiCharOverflow: 8</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// toolbar: {</span>          <span class="token comment" spellcheck="true">//   size: null,</span>          <span class="token comment" spellcheck="true">//   import: {</span>          <span class="token comment" spellcheck="true">//     mode: 'covering'</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   export: {</span>          <span class="token comment" spellcheck="true">//     types: ['csv', 'html', 'xml', 'txt']</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   custom: {</span>          <span class="token comment" spellcheck="true">//     isFooter: true</span>          <span class="token comment" spellcheck="true">//   },</span>          <span class="token comment" spellcheck="true">//   buttons: [],</span>          <span class="token comment" spellcheck="true">//   tools: []</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// button: {</span>          <span class="token comment" spellcheck="true">//   size: null,</span>          <span class="token comment" spellcheck="true">//   transfer: false</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// radio: {</span>          <span class="token comment" spellcheck="true">//   size: null</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// checkbox: {</span>          <span class="token comment" spellcheck="true">//   size: null</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// switch: {</span>          <span class="token comment" spellcheck="true">//   size: null</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// modal: {</span>          <span class="token comment" spellcheck="true">//   // size: null,</span>          <span class="token comment" spellcheck="true">//   minWidth: 340,</span>          <span class="token comment" spellcheck="true">//   minHeight: 200,</span>          <span class="token comment" spellcheck="true">//   lockView: true,</span>          <span class="token comment" spellcheck="true">//   mask: true,</span>          <span class="token comment" spellcheck="true">//   duration: 3000,</span>          <span class="token comment" spellcheck="true">//   marginSize: 0,</span>          <span class="token comment" spellcheck="true">//   dblclickZoom: true,</span>          <span class="token comment" spellcheck="true">//   showTitleOverflow: true</span>          <span class="token comment" spellcheck="true">//   storage: false</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// list: {</span>          <span class="token comment" spellcheck="true">//   scrollY: {</span>          <span class="token comment" spellcheck="true">//     gt: 100</span>          <span class="token comment" spellcheck="true">//   }</span>          <span class="token comment" spellcheck="true">// }</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="全局图标"><a href="#全局图标" class="headerlink" title="全局图标"></a>全局图标</h3><blockquote><p>如果项目已有适合的图标，可通过配置替换并自行调整相关的样式即可</p></blockquote><pre class=" language-js"><code class="language-js"> <span class="token keyword">import</span> VXETable <span class="token keyword">from</span> <span class="token string">'vxe-table'</span>        VXETable<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          icon<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// loading</span>            LOADING<span class="token punctuation">:</span> <span class="token string">'vxe-icon-spinner roll vxe-loading--default-icon'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// table</span>            TABLE_SORT_ASC<span class="token punctuation">:</span> <span class="token string">'vxe-icon-caret-up'</span><span class="token punctuation">,</span>            TABLE_SORT_DESC<span class="token punctuation">:</span> <span class="token string">'vxe-icon-caret-down'</span><span class="token punctuation">,</span>            TABLE_FILTER_NONE<span class="token punctuation">:</span> <span class="token string">'vxe-icon-funnel'</span><span class="token punctuation">,</span>            TABLE_FILTER_MATCH<span class="token punctuation">:</span> <span class="token string">'vxe-icon-funnel'</span><span class="token punctuation">,</span>            TABLE_EDIT<span class="token punctuation">:</span> <span class="token string">'vxe-icon-edit'</span><span class="token punctuation">,</span>            TABLE_HELP<span class="token punctuation">:</span> <span class="token string">'vxe-icon-question-circle-fill'</span><span class="token punctuation">,</span>            TABLE_TREE_LOADED<span class="token punctuation">:</span> <span class="token string">'vxe-icon-spinner roll'</span><span class="token punctuation">,</span>            TABLE_TREE_OPEN<span class="token punctuation">:</span> <span class="token string">'vxe-icon-caret-right rotate90'</span><span class="token punctuation">,</span>            TABLE_TREE_CLOSE<span class="token punctuation">:</span> <span class="token string">'vxe-icon-caret-right'</span><span class="token punctuation">,</span>            TABLE_EXPAND_LOADED<span class="token punctuation">:</span> <span class="token string">'vxe-icon-spinner roll'</span><span class="token punctuation">,</span>            TABLE_EXPAND_OPEN<span class="token punctuation">:</span> <span class="token string">'vxe-icon-arrow-right rotate90'</span><span class="token punctuation">,</span>            TABLE_EXPAND_CLOSE<span class="token punctuation">:</span> <span class="token string">'vxe-icon-arrow-right'</span><span class="token punctuation">,</span>            TABLE_CHECKBOX_CHECKED<span class="token punctuation">:</span> <span class="token string">'vxe-icon-checkbox-checked'</span><span class="token punctuation">,</span>            TABLE_CHECKBOX_UNCHECKED<span class="token punctuation">:</span> <span class="token string">'vxe-icon-checkbox-unchecked'</span><span class="token punctuation">,</span>            TABLE_CHECKBOX_INDETERMINATE<span class="token punctuation">:</span> <span class="token string">'vxe-icon-checkbox-indeterminate'</span><span class="token punctuation">,</span>            TABLE_RADIO_CHECKED<span class="token punctuation">:</span> <span class="token string">'vxe-icon-radio-checked'</span><span class="token punctuation">,</span>            TABLE_RADIO_UNCHECKED<span class="token punctuation">:</span> <span class="token string">'vxe-icon-radio-unchecked'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// button</span>            BUTTON_DROPDOWN<span class="token punctuation">:</span> <span class="token string">'vxe-icon-arrow-down'</span><span class="token punctuation">,</span>            BUTTON_LOADING<span class="token punctuation">:</span> <span class="token string">'vxe-icon-spinner roll'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// select</span>            SELECT_LOADED<span class="token punctuation">:</span> <span class="token string">'vxe-icon-spinner roll'</span><span class="token punctuation">,</span>            SELECT_OPEN<span class="token punctuation">:</span> <span class="token string">'vxe-icon-caret-down rotate180'</span><span class="token punctuation">,</span>            SELECT_CLOSE<span class="token punctuation">:</span> <span class="token string">'vxe-icon-caret-down'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// pager</span>            PAGER_JUMP_PREV<span class="token punctuation">:</span> <span class="token string">'vxe-icon-arrow-double-left'</span><span class="token punctuation">,</span>            PAGER_JUMP_NEXT<span class="token punctuation">:</span> <span class="token string">'vxe-icon-arrow-double-right'</span><span class="token punctuation">,</span>            PAGER_PREV_PAGE<span class="token punctuation">:</span> <span class="token string">'vxe-icon-arrow-left'</span><span class="token punctuation">,</span>            PAGER_NEXT_PAGE<span class="token punctuation">:</span> <span class="token string">'vxe-icon-arrow-right'</span><span class="token punctuation">,</span>            PAGER_JUMP_MORE<span class="token punctuation">:</span> <span class="token string">'vxe-icon-ellipsis-h'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// input</span>            INPUT_CLEAR<span class="token punctuation">:</span> <span class="token string">'vxe-icon-error-circle-fill'</span><span class="token punctuation">,</span>            INPUT_PWD<span class="token punctuation">:</span> <span class="token string">'vxe-icon-eye-fill'</span><span class="token punctuation">,</span>            INPUT_SHOW_PWD<span class="token punctuation">:</span> <span class="token string">'vxe-icon-eye-fill-close'</span><span class="token punctuation">,</span>            INPUT_PREV_NUM<span class="token punctuation">:</span> <span class="token string">'vxe-icon-caret-up'</span><span class="token punctuation">,</span>            INPUT_NEXT_NUM<span class="token punctuation">:</span> <span class="token string">'vxe-icon-caret-down'</span><span class="token punctuation">,</span>            INPUT_DATE<span class="token punctuation">:</span> <span class="token string">'vxe-icon-calendar'</span><span class="token punctuation">,</span>            INPUT_SEARCH<span class="token punctuation">:</span> <span class="token string">'vxe-icon-search'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// modal</span>            MODAL_ZOOM_IN<span class="token punctuation">:</span> <span class="token string">'vxe-icon-square'</span><span class="token punctuation">,</span>            MODAL_ZOOM_OUT<span class="token punctuation">:</span> <span class="token string">'vxe-icon-maximize'</span><span class="token punctuation">,</span>            MODAL_CLOSE<span class="token punctuation">:</span> <span class="token string">'vxe-icon-close'</span><span class="token punctuation">,</span>            MODAL_INFO<span class="token punctuation">:</span> <span class="token string">'vxe-icon-info-circle-fill'</span><span class="token punctuation">,</span>            MODAL_SUCCESS<span class="token punctuation">:</span> <span class="token string">'vxe-icon-success-circle-fill'</span><span class="token punctuation">,</span>            MODAL_WARNING<span class="token punctuation">:</span> <span class="token string">'vxe-icon-warnion-circle-fill'</span><span class="token punctuation">,</span>            MODAL_ERROR<span class="token punctuation">:</span> <span class="token string">'vxe-icon-error-circle-fill'</span><span class="token punctuation">,</span>            MODAL_QUESTION<span class="token punctuation">:</span> <span class="token string">'vxe-icon-question-circle-fill'</span><span class="token punctuation">,</span>            MODAL_LOADING<span class="token punctuation">:</span> <span class="token string">'vxe-icon-spinner roll'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// toolbar</span>            TOOLBAR_TOOLS_REFRESH<span class="token punctuation">:</span> <span class="token string">'vxe-icon-repeat'</span><span class="token punctuation">,</span>            TOOLBAR_TOOLS_REFRESH_LOADING<span class="token punctuation">:</span> <span class="token string">'vxe-icon-repeat roll'</span><span class="token punctuation">,</span>            TOOLBAR_TOOLS_IMPORT<span class="token punctuation">:</span> <span class="token string">'vxe-icon-upload'</span><span class="token punctuation">,</span>            TOOLBAR_TOOLS_EXPORT<span class="token punctuation">:</span> <span class="token string">'vxe-icon-download'</span><span class="token punctuation">,</span>            TOOLBAR_TOOLS_PRINT<span class="token punctuation">:</span> <span class="token string">'vxe-icon-print'</span><span class="token punctuation">,</span>            TOOLBAR_TOOLS_FULLSCREEN<span class="token punctuation">:</span> <span class="token string">'vxe-icon-fullscreen'</span><span class="token punctuation">,</span>            TOOLBAR_TOOLS_MINIMIZE<span class="token punctuation">:</span> <span class="token string">'vxe-icon-minimize'</span><span class="token punctuation">,</span>            TOOLBAR_TOOLS_CUSTOM<span class="token punctuation">:</span> <span class="token string">'vxe-icon-custom-column'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// form</span>            FORM_PREFIX<span class="token punctuation">:</span> <span class="token string">'vxe-icon-question-circle-fill'</span><span class="token punctuation">,</span>            FORM_SUFFIX<span class="token punctuation">:</span> <span class="token string">'vxe-icon-question-circle-fill'</span><span class="token punctuation">,</span>            FORM_FOLDING<span class="token punctuation">:</span> <span class="token string">'vxe-icon-arrow-up rotate180'</span><span class="token punctuation">,</span>            FORM_UNFOLDING<span class="token punctuation">:</span> <span class="token string">'vxe-icon-arrow-up'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="全局主题"><a href="#全局主题" class="headerlink" title="全局主题"></a>全局主题</h3><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><blockquote><p>第一种方式：创建 scss 文件（<a href="https://github.com/x-extends/vxe-table/blob/master/styles/variable.scss">查看所有变量</a>），并引入所有样式</p></blockquote><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">// 修改样式变量</span>        $vxe<span class="token operator">-</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>font<span class="token operator">-</span>color<span class="token punctuation">:</span> #<span class="token number">666</span><span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>primary<span class="token operator">-</span>color<span class="token punctuation">:</span> #409eff<span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>table<span class="token operator">-</span>font<span class="token operator">-</span>color<span class="token punctuation">:</span> $vxe<span class="token operator">-</span>font<span class="token operator">-</span>color<span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>table<span class="token operator">-</span>border<span class="token operator">-</span>color<span class="token punctuation">:</span> #e8eaec<span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>table<span class="token operator">-</span>border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>        @<span class="token keyword">import</span> <span class="token string">'vxe-table/styles/index.scss'</span><span class="token punctuation">;</span>      </code></pre><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><blockquote><p>第二种方式：创建 scss 文件（<a href="https://github.com/x-extends/vxe-table/blob/master/styles/variable.scss">查看所有变量</a>），并引入所有样式</p></blockquote><pre class=" language-js"><code class="language-js">  @<span class="token keyword">import</span> <span class="token string">'vxe-table/styles/variable.scss'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 修改样式变量</span>        $vxe<span class="token operator">-</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>font<span class="token operator">-</span>color<span class="token punctuation">:</span> #<span class="token number">666</span><span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>primary<span class="token operator">-</span>color<span class="token punctuation">:</span> #409eff<span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>table<span class="token operator">-</span>font<span class="token operator">-</span>color<span class="token punctuation">:</span> $vxe<span class="token operator">-</span>font<span class="token operator">-</span>color<span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>table<span class="token operator">-</span>border<span class="token operator">-</span>color<span class="token punctuation">:</span> #e8eaec<span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>table<span class="token operator">-</span>border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>        @<span class="token keyword">import</span> <span class="token string">'vxe-table/styles/modules.scss'</span><span class="token punctuation">;</span></code></pre><h4 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h4><blockquote><p>第三种方式：创建 scss 文件（<a href="https://github.com/x-extends/vxe-table/blob/master/styles/variable.scss">查看所有变量</a>），并按需引入模块样式（<a href="https://github.com/x-extends/vxe-table/blob/master/styles/modules.scss">查看所有模块</a>）</p></blockquote><pre class=" language-js"><code class="language-js">@<span class="token keyword">import</span> <span class="token string">'vxe-table/styles/variable.scss'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 修改样式变量</span>        $vxe<span class="token operator">-</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>font<span class="token operator">-</span>color<span class="token punctuation">:</span> #<span class="token number">666</span><span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>primary<span class="token operator">-</span>color<span class="token punctuation">:</span> #409eff<span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>table<span class="token operator">-</span>font<span class="token operator">-</span>color<span class="token punctuation">:</span> $vxe<span class="token operator">-</span>font<span class="token operator">-</span>color<span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>table<span class="token operator">-</span>border<span class="token operator">-</span>color<span class="token punctuation">:</span> #e8eaec<span class="token punctuation">;</span>        $vxe<span class="token operator">-</span>table<span class="token operator">-</span>border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>        @<span class="token keyword">import</span> <span class="token string">'vxe-table/styles/icon.scss'</span><span class="token punctuation">;</span>        @<span class="token keyword">import</span> <span class="token string">'vxe-table/styles/table.scss'</span><span class="token punctuation">;</span>        @<span class="token keyword">import</span> <span class="token string">'vxe-table/styles/column.scss'</span><span class="token punctuation">;</span>        @<span class="token keyword">import</span> <span class="token string">'vxe-table/styles/header.scss'</span><span class="token punctuation">;</span>        @<span class="token keyword">import</span> <span class="token string">'vxe-table/styles/body.scss'</span><span class="token punctuation">;</span>        @<span class="token keyword">import</span> <span class="token string">'vxe-table/styles/footer.scss'</span><span class="token punctuation">;</span>        @<span class="token keyword">import</span> <span class="token string">'vxe-table/styles/filter.scss'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span></code></pre><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><h4 id="国际化设置"><a href="#国际化设置" class="headerlink" title="国际化设置"></a>国际化设置</h4><blockquote><p>如果希望使用指定语言，则需要进行多语言设置。以中/英文为例</p></blockquote><pre class=" language-js"><code class="language-js">npm install vxe<span class="token operator">-</span>table xe<span class="token operator">-</span>utils vue<span class="token operator">-</span>i18n</code></pre><p>src/i18n/index.ts</p><pre class=" language-js"><code class="language-js">        <span class="token keyword">import</span> <span class="token punctuation">{</span> createI18n <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-i18n'</span>        <span class="token keyword">import</span> zhCN <span class="token keyword">from</span> <span class="token string">'vxe-table/lib/locale/lang/zh-CN'</span>        <span class="token keyword">import</span> enUS <span class="token keyword">from</span> <span class="token string">'vxe-table/lib/locale/lang/en-US'</span>        <span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">{</span>          zh_CN<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token operator">...</span>zhCN          <span class="token punctuation">}</span><span class="token punctuation">,</span>          en_US<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token operator">...</span>enUS          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> i18n <span class="token operator">=</span> <span class="token function">createI18n</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          locale<span class="token punctuation">:</span> <span class="token string">'zh_CN'</span><span class="token punctuation">,</span>          messages<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">export</span> <span class="token keyword">default</span> i18n</code></pre><p>main.ts</p><pre class=" language-tsx"><code class="language-tsx">        import { createApp } = 'vue'        import i18n from './i18n'        import VXETable from 'vxe-table'                VXETable.setup({          // 对组件内置的提示语进行国际化翻译          i18n: (key, args) => i18n.global.t(key, args)        })        Vue.use(VXETable)        createApp(App).use(i18n).use(VXETable).$mount('#app')</code></pre><h2 id="集成国际化"><a href="#集成国际化" class="headerlink" title="集成国际化"></a>集成国际化</h2><blockquote><p>若希望在项目中支持全局自动翻译，可以通过全局参数开启（将对列头、校验提示..进行自动翻译）</p></blockquote><pre class=" language-js"><code class="language-js">        VXETable<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 可选，对参数中的列头、校验提示..等进行自动翻译（只对支持国际化的有效）</span>          translate <span class="token punctuation">(</span>key<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 例如，只翻译 "app." 开头的键值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'app.'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> i18n<span class="token punctuation">.</span>global<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> args<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> key          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-vue"><code class="language-vue"><vxe-table          border          height="600"          :data="tableData">    <vxe-column field="name" title="app.body.label.name"></vxe-column>    <vxe-column field="age" title="app.body.label.age"></vxe-column>    <vxe-column field="sex" title="app.body.label.sex"></vxe-column></vxe-table></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
          <category> Vue2 </category>
          
          <category> Vue扩展使用教程 </category>
          
          <category> vxe-table </category>
          
          <category> vxe-table使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
            <tag> Vue2 </tag>
            
            <tag> Vue扩展使用教程 </tag>
            
            <tag> vxe-table </tag>
            
            <tag> vxe-table使用教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 gitee 和 Hexo 搭建自己的独立博客</title>
      <link href="/jojoblog.github.io/2023/02/23/shi-yong-gitee-he-hexo-da-jian-zi-ji-de-du-li-bo-ke/"/>
      <url>/jojoblog.github.io/2023/02/23/shi-yong-gitee-he-hexo-da-jian-zi-ji-de-du-li-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-gitee-和-Hexo-搭建自己的独立博客！"><a href="#使用-gitee-和-Hexo-搭建自己的独立博客！" class="headerlink" title="使用 gitee 和 Hexo 搭建自己的独立博客！"></a>使用 gitee 和 Hexo 搭建自己的独立博客！</h1><h4 id="需要工具"><a href="#需要工具" class="headerlink" title="需要工具"></a>需要工具</h4><h5 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h5><h5 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h5><h5 id="hexo-1"><a href="#hexo-1" class="headerlink" title="hexo"></a>hexo</h5><h5 id="gitee账号"><a href="#gitee账号" class="headerlink" title="gitee账号"></a><code>gitee</code>账号</h5><h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><h5 id="1、安装nodejs"><a href="#1、安装nodejs" class="headerlink" title="1、安装nodejs"></a>1、安装<code>nodejs</code></h5><blockquote><p>官网下载之后安装即可，需要设置一下<code>npm</code>源就可以</p><pre class=" language-shell"><code class="language-shell">npm config set registry https://registry.npm.taobao.orgnpm config get registry#看看终端显示信息，如果看到这行信息，说明配置成功: https://registry.npm.taobao.org/</code></pre></blockquote><h5 id="2、安装git"><a href="#2、安装git" class="headerlink" title="2、安装git"></a>2、安装<code>git</code></h5><blockquote><p>官网下载之后安装即可，若安装成功，在桌面右键鼠标，可以看到菜单里多了<code>Git GUI Here </code> 和 <code>Git Bash Here</code>两个选项</p><pre class=" language-shell"><code class="language-shell">#检查是否安装成功git --versionnode -v  npm -v</code></pre></blockquote><h5 id="2、hexo-操作"><a href="#2、hexo-操作" class="headerlink" title="2、hexo 操作"></a>2、<code>hexo</code> 操作</h5><blockquote><p>通过npm来安装hexo，下面前俩个命令安装需要一点时间，blog目录就是博客目录，根据自己情况选择目录</p><pre class=" language-shell"><code class="language-shell">cd d:npm install hexo-cli -ghexo init blog   #执行完该命令之后在d盘生成一个blog的文件夹cd blognpm installhexo server  #执行完该命令之后浏览器打开http://localhost:4000/就能出现博客页面了</code></pre></blockquote><h5 id="3、gitee操作"><a href="#3、gitee操作" class="headerlink" title="3、gitee操作"></a>3、<code>gitee</code>操作</h5><ul><li><p>注册<code>gitee</code>账号</p></li><li><p>新建仓库</p><ul><li>仓库名字必须是<strong>用户名</strong>，路径会自动生成</li></ul></li><li><p>配置 SSH 密钥</p><ul><li><p>全局配置一下本地账户</p><pre class=" language-shell"><code class="language-shell">git config --global user.name "用户名"git config --global user.email "邮箱地址"#输入以下命令查询是否设置正确git config user.namegit config user.email</code></pre></li><li><p>生成一对密钥 SSH key</p><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -C "邮箱地址" #执行该命令后一路回车，密钥保存在~/.ssh/id_rsa.pub</code></pre></li><li><p>将密钥拷贝到<code>gitee</code></p></li></ul><blockquote><p>在<code>gitee</code>个人中心–设置–<code>SSH</code>公钥</p></blockquote><pre class=" language-shell"><code class="language-shell">cat ~/.ssh/id_rsa.pub#将内容拷贝到ssh key中cat id_rsa.pub # 进入c:/User/用户名/.ssh文件夹中</code></pre>  <img src="/jojoblog.github.io/2023/02/23/shi-yong-gitee-he-hexo-da-jian-zi-ji-de-du-li-bo-ke/image-20210308214214553.png" class=""></li></ul><h5 id="4、部署到github-仓库"><a href="#4、部署到github-仓库" class="headerlink" title="4、部署到github 仓库"></a>4、部署到github 仓库</h5><ul><li><p>安装一个部署插件 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p><pre class=" language-shell"><code class="language-shell">npm install hexo-deployer-git --save</code></pre></li><li><p>回到<code>gitee</code>刚才创建的页面，点击管理</p><img src="/jojoblog.github.io/2023/02/23/shi-yong-gitee-he-hexo-da-jian-zi-ji-de-du-li-bo-ke/image-20210308214636809.png" class=""></li><li><p>向下拉点击初始化README启用SVN访问</p><img src="/jojoblog.github.io/2023/02/23/shi-yong-gitee-he-hexo-da-jian-zi-ji-de-du-li-bo-ke/image-20210308214811764.png" class=""></li><li><p>刷新页面，点击服务就有<code>gitee Pages</code>图标了</p></li></ul><img src="/jojoblog.github.io/2023/02/23/shi-yong-gitee-he-hexo-da-jian-zi-ji-de-du-li-bo-ke/image-20210308220904241.png" class=""><ul><li><p>点击<code>gitee page</code>，选择强制使用<code>https</code></p><img src="/jojoblog.github.io/2023/02/23/shi-yong-gitee-he-hexo-da-jian-zi-ji-de-du-li-bo-ke/image-20210308221442872.png" class=""></li><li><p>等待一点时间，码云会自动生成专属网址</p><img src="/jojoblog.github.io/2023/02/23/shi-yong-gitee-he-hexo-da-jian-zi-ji-de-du-li-bo-ke/image-20210308221902427.png" class=""></li><li><p>更改hexo 配置</p><blockquote><p>进入blog 目录，打开仓库_confi g.yml 配置文件，修改内容有以下两点：</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#1</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//szu_ryan.gitee.io <span class="token comment" spellcheck="true">#刚才生成的专属网址</span><span class="token comment" spellcheck="true">#2</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/szu_ryan/szu_ryan.git  <span class="token comment" spellcheck="true">#仓库名字改成自己的</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre></li><li><p>执行命令部署上传</p><pre class=" language-shell"><code class="language-shell">hexo cleanhexo g -d #执行完之后首次需要输入GitHub的账号密码,#若想取消弹出框验证用户名密码git config --system --unset credential.helper </code></pre></li><li><p>坑点</p><blockquote><p>一般而言运行了<code>hexo g -d</code>应该就已经将新的网站文件（主要是网站目录下的public目录）上传到了Gitee，然而事实上上步之后直接访问网站URL会发现页面没有改变，原因在于：你、没有、更新！</p><p>是的，对于免费Gitee用户而言，你会需要手动更新一下Gitee Pages，然后才可以将修改真的“部署”到可访问的网站上。需要点击下图的**==更新==**才可以。每次都要更新一次确实有点麻烦。。。</p></blockquote><img src="/jojoblog.github.io/2023/02/23/shi-yong-gitee-he-hexo-da-jian-zi-ji-de-du-li-bo-ke/image-20210308221902427.png" class=""></li></ul><p>附：hexo命令</p><table><thead><tr><th align="left">命令</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">hexo clean</td><td align="left">清除所有生成的页面文件</td></tr><tr><td align="left">hexo g</td><td align="left">生成页面</td></tr><tr><td align="left">hexo deploy</td><td align="left">推送部署到远程服务器</td></tr><tr><td align="left">hexo n xxx</td><td align="left">新建一篇名为xxx的文章</td></tr></tbody></table><ul><li>检查<br>浏览器输入 <a href="https://你的用户名.github.io/">https://你的用户名.github.io</a> 即可</li></ul><h5 id="5、hexo的操作"><a href="#5、hexo的操作" class="headerlink" title="5、hexo的操作"></a>5、hexo的操作</h5><ul><li><p>文章的常用模板</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 文章标题<span class="token key atrule">date</span><span class="token punctuation">:</span> 2021/3/8 22<span class="token punctuation">:</span><span class="token datetime number">55:16</span><span class="token key atrule">comments</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#是否开启评论</span><span class="token key atrule">no_valine</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#关闭评论</span><span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#文章置顶</span><span class="token key atrule">no_word_count</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#关闭字数统计</span><span class="token key atrule">password</span><span class="token punctuation">:</span> 密码 <span class="token comment" spellcheck="true">#如果加密，填写查看密码</span><span class="token key atrule">reward</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#是否开启打赏</span><span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 标签1  <span class="token punctuation">-</span> 标签2</code></pre></li><li><p>模板草稿</p><pre class=" language-shell"><code class="language-shell">hexo new draft newdraft#这样会在source/_draft中新建一个newdraft.md文件，如果你的草稿文件写的过程中#想要预览一下，那么可以使用hexo server --draft#如果你的草稿文件写完了，想要发表hexo publish draft newdraft</code></pre></li></ul><h4 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h4><blockquote><p>目前选择<code>hexo-theme-matery</code>主题，<code>next</code>主题<a href="https://blog.csdn.net/l1090865/article/details/104487225">可以参考</a></p></blockquote><h5 id="1、下载安装"><a href="#1、下载安装" class="headerlink" title="1、下载安装"></a>1、下载安装</h5><p><a href="https://github.com/blinkfox/hexo-theme-matery/tree/master">master分支</a>，下载之后解压，拷贝到博客文件夹的<code>themes</code>文件夹下</p><h5 id="2、配置文件-config-yml修改"><a href="#2、配置文件-config-yml修改" class="headerlink" title="2、配置文件_config.yml修改"></a>2、配置文件<code>_config.yml</code>修改</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery <span class="token comment" spellcheck="true">#和文件名保持一致</span></code></pre><h5 id="3、新建标签-tags-页面"><a href="#3、新建标签-tags-页面" class="headerlink" title="3、新建标签 tags 页面"></a>3、新建标签 tags 页面</h5><pre class=" language-shell"><code class="language-shell">cd xx/sourcehexo new page "tags" #生成tags文件夹，文件夹下有index.md文件cd tags/vi index.md---title: tagsdate: 2021-03-09 10:28:47type: "tags"layout: "tags"---</code></pre><h5 id="4、新建分类-categories-页面"><a href="#4、新建分类-categories-页面" class="headerlink" title="4、新建分类 categories 页面"></a>4、新建分类 categories 页面</h5><pre class=" language-shell"><code class="language-shell">cd xxx/sourcehexo new page "categories" #生成categories文件夹，文件夹下有index.md文件cd categoriesvi index.md---title: categoriesdate: 2021-03-09 10:28:47type: "categories"layout: "categories"---</code></pre><h5 id="5、新建关于我-about-页面"><a href="#5、新建关于我-about-页面" class="headerlink" title="5、新建关于我 about 页面"></a>5、新建关于我 about 页面</h5><pre class=" language-shell"><code class="language-shell">cd xxx/sourcehexo new page "about" #生成about文件夹，文件夹下有index.md文件cd aboutvi index.md---title: aboutdate: 2021-03-09 10:31:36type: "about"layout: "about"---</code></pre><h5 id="6、新建留言板-contact-页面-可选"><a href="#6、新建留言板-contact-页面-可选" class="headerlink" title="6、新建留言板 contact 页面 (可选)"></a>6、新建留言板 contact 页面 (可选)</h5><pre class=" language-shell"><code class="language-shell">cd xxx/sourcehexo new page "contact" #生成contact文件夹，文件夹下有index.md文件cd contactvi index.md---title: contactdate: 2021-03-09 10:31:36type: "contact"layout: "contact"---</code></pre><h5 id="7、新建友情链接-friends-页面-可选"><a href="#7、新建友情链接-friends-页面-可选" class="headerlink" title="7、新建友情链接 friends 页面 (可选)"></a>7、新建友情链接 friends 页面 (可选)</h5><pre class=" language-shell"><code class="language-shell">cd xxx/sourcehexo new page "friends" #生成friends文件夹，文件夹下有index.md文件cd friendsvi index.md---title: friendsdate: 2021-03-09 10:31:36type: "friends"layout: "friends"---</code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h5 id="8、菜单导航配置"><a href="#8、菜单导航配置" class="headerlink" title="8、菜单导航配置"></a>8、菜单导航配置</h5><p>在==<strong>本主题</strong>==下的 <code>_config.yml</code> 文件中，(<strong>注意不是hexo根目录的配置文件</strong>)参考注释修改即可，默认已配好无需修改</p><h5 id="9、添加-emoji-表情支持（可选的）"><a href="#9、添加-emoji-表情支持（可选的）" class="headerlink" title="9、添加 emoji 表情支持（可选的）"></a>9、添加 emoji 表情支持（可选的）</h5><pre class=" language-shell"><code class="language-shell">npm install hexo-filter-github-emojis --save</code></pre><p>同时 在Hexo 根目录下的<code>-config.yaml</code>文件新增以下内容</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  <span class="token key atrule">customEmojis</span><span class="token punctuation">:</span></code></pre><h5 id="10、代码高亮"><a href="#10、代码高亮" class="headerlink" title="10、代码高亮"></a>10、代码高亮</h5><pre class=" language-shell"><code class="language-shell">npm i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span></code></pre><h5 id="11、搜索"><a href="#11、搜索" class="headerlink" title="11、搜索"></a>11、搜索</h5><pre class=" language-shell"><code class="language-shell">npm install hexo-generator-search --save</code></pre><p>同时在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h5 id="12、中文链接转拼音（可选的）"><a href="#12、中文链接转拼音（可选的）" class="headerlink" title="12、中文链接转拼音（可选的）"></a>12、中文链接转拼音（可选的）</h5><blockquote><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p></blockquote><pre class=" language-shell"><code class="language-shell">npm i hexo-permalink-pinyin --save</code></pre><p>同时在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><h5 id="13、文章字数统计插件（可选的）"><a href="#13、文章字数统计插件（可选的）" class="headerlink" title="13、文章字数统计插件（可选的）"></a>13、文章字数统计插件（可选的）</h5><pre class=" language-shell"><code class="language-shell">npm i --save hexo-wordcount</code></pre><p>然后只需在==<strong>本主题</strong>==下的 <code>_config.yml</code> 文件中，(<strong>注意不是根目录的配置文件</strong>)，激活以下配置项即可（不同版本的hexo配置文件内容有差别，搜索wordCount就可以找到相关信息去修改）</p><pre class=" language-shell"><code class="language-shell">postInfo:  date: true # 发布日期  update: true # 更新日期  wordCount: true # 文章字数统计  totalCount: false # 站点总文章字数  min2read: true # 文章阅读时长  readCount: true # 文章阅读次数</code></pre><h5 id="14、-添加-RSS-订阅支持（可选的）"><a href="#14、-添加-RSS-订阅支持（可选的）" class="headerlink" title="14、 添加 RSS 订阅支持（可选的）"></a>14、 添加 RSS 订阅支持（可选的）</h5><pre class=" language-shell"><code class="language-shell">npm install hexo-generator-feed --save</code></pre><p>同时在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><h5 id="15、修改社交链接"><a href="#15、修改社交链接" class="headerlink" title="15、修改社交链接"></a>15、修改社交链接</h5><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><h5 id="16、修改打赏的二维码图片"><a href="#16、修改打赏的二维码图片" class="headerlink" title="16、修改打赏的二维码图片"></a>16、修改打赏的二维码图片</h5><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h5 id="17、配置音乐播放器（可选的）"><a href="#17、配置音乐播放器（可选的）" class="headerlink" title="17、配置音乐播放器（可选的）"></a>17、配置音乐播放器（可选的）</h5><blockquote><p>新版主题支持接入第三方音乐，如 QQ 音乐，网易云音乐，酷狗音乐等等</p></blockquote><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活 music 配置即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">autoHide</span><span class="token punctuation">:</span> <span class="token boolean important">true    </span><span class="token comment" spellcheck="true"># hide automaticaly</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment" spellcheck="true">#requiremusic platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment" spellcheck="true">#require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841     </span><span class="token comment" spellcheck="true">#requiresong id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">true       </span><span class="token comment" spellcheck="true"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7       </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 列表默认折叠</span>  <span class="token key atrule">hideLrc</span><span class="token punctuation">:</span> <span class="token boolean important">true     </span><span class="token comment" spellcheck="true"># 隐藏歌词</span></code></pre><blockquote><p><code>server</code> 可选 <code>netease</code>（网易云音乐），<code>tencent</code>（QQ 音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code> 可选 <code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code> 获取示例：浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，<code>playlist</code> 的 <code>id</code> 即为这串数字。</p></blockquote><h4 id="博客编写"><a href="#博客编写" class="headerlink" title="博客编写"></a>博客编写</h4><h5 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h5><blockquote><p>就是一篇xx.md文章前面两个—里面的内容</p></blockquote><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床 (腾讯云、七牛云、又拍云等) 来做图片的路径。如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code> 版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code> 版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><p>最全示例：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown</code></pre><h4 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h4><h5 id="1、修改主题颜色"><a href="#1、修改主题颜色" class="headerlink" title="1、修改主题颜色"></a>1、修改主题颜色</h5><p>在<strong>主题文件</strong>的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre><h5 id="2、修改-banner-图和文章特色图"><a href="#2、修改-banner-图和文章特色图" class="headerlink" title="2、修改 banner 图和文章特色图"></a>2、修改 banner 图和文章特色图</h5><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 代码中：</p><pre class=" language-ejs"><code class="language-ejs">$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');</code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><p>如果想改为每小时或者每分钟切换 banner 图的话，需要将 <code>getDay()</code> 改为 <code>getHours()</code> 或者 <code>getMinutes()</code> 即可。</p><h5 id="3、修改网站相关信息"><a href="#3、修改网站相关信息" class="headerlink" title="3、修改网站相关信息"></a>3、修改网站相关信息</h5><h6 id="网站信息的修改"><a href="#网站信息的修改" class="headerlink" title="网站信息的修改"></a>网站信息的修改</h6><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，修改以下的配置项</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115115221.png" alt="img"></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#这是根目录下的配置文件信息</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 过客~励む   <span class="token comment" spellcheck="true">#这是网站标题</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span> 励む    <span class="token comment" spellcheck="true">#这是网站副标题subtitler</span><span class="token comment" spellcheck="true"># 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性</span><span class="token key atrule">description</span><span class="token punctuation">:</span> 专注于Web<span class="token punctuation">,</span>分享生活<span class="token punctuation">,</span>分享知识  <span class="token comment" spellcheck="true">#网站描述</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>HTML<span class="token punctuation">,</span> CSS<span class="token punctuation">,</span> JavaScript<span class="token punctuation">,</span> JQuery<span class="token punctuation">,</span> React<span class="token punctuation">,</span> Vue.js等<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#网站的关键词</span><span class="token key atrule">author</span><span class="token punctuation">:</span> YangAir  <span class="token comment" spellcheck="true">#作者，文章版权所显示的</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN  <span class="token comment" spellcheck="true">#网站语言，不填写，默认为英文</span><span class="token key atrule">timezone</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#时区，可以不填写</span><span class="token comment" spellcheck="true"># 这是主题配置文件的相关信息</span><span class="token comment" spellcheck="true"># 配置网站favicon和网站LOGO</span><span class="token comment" spellcheck="true"># 此处我用的CDN，也可以使用本地文件</span><span class="token key atrule">favicon</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/favicon.png<span class="token key atrule">logo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/logo.png<span class="token comment" spellcheck="true"># 网站副标题，打字效果</span><span class="token comment" spellcheck="true"># 如果有符号 ‘ ，请在 ’ 前面加上 \</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span>   <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 是否循环</span>  <span class="token key atrule">showCursor</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 是否显示光标</span>  <span class="token key atrule">startDelay</span><span class="token punctuation">:</span> <span class="token number">300 </span><span class="token comment" spellcheck="true"># 开始延迟</span>  <span class="token key atrule">typeSpeed</span><span class="token punctuation">:</span> <span class="token number">100 </span><span class="token comment" spellcheck="true"># 打字速度</span>  <span class="token key atrule">backSpeed</span><span class="token punctuation">:</span> <span class="token number">50 </span><span class="token comment" spellcheck="true"># 删除速度</span>  <span class="token key atrule">sub1</span><span class="token punctuation">:</span> 志之所向，金石为开，谁能御之？  <span class="token key atrule">sub2</span><span class="token punctuation">:</span> 花开不是为了花落，而是为了开的更加灿烂。  <span class="token key atrule">sub3</span><span class="token punctuation">:</span> 没有伞的孩子必须努力奔跑！  <span class="token key atrule">sub4</span><span class="token punctuation">:</span> 欲望以提升热忱，毅力以磨平高山。  <span class="token key atrule">sub5</span><span class="token punctuation">:</span> 如果放弃太早，你永远都不知道自己会错过什么。  <span class="token key atrule">sub6</span><span class="token punctuation">:</span> 没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。</code></pre><p><strong>注意</strong></p><p>网站打字效果副标题默认有两个，即 <code>sub1</code> 和 <code>sub2</code>，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在 <code>sub1</code> 和 <code>sub2</code> 后面继续添加即可，然后在去主题目录下的 <code>layout</code> 文件夹下的<code>_partial</code> 文件夹，修改 <code>bg-cover-content.ejs</code> 文件，大约在 12 行左右，如下面所示：</p><pre class=" language-ejs"><code class="language-ejs"> <div class="description center-align">     <% if (theme.subtitle.enable) { %>         <span id="subtitle"></span>         <script src="https://cdn.jsdelivr.net/npm/typed.js@2.0.11"></script>        <script>            var typed = new Typed("#subtitle", {                strings: ['<%= theme.subtitle.sub1 %>',                          '<%= theme.subtitle.sub2 %>',                          '<%= theme.subtitle.sub3 %>',                          '<%= theme.subtitle.sub4 %>',                          '<%= theme.subtitle.sub5 %>',                          '<%= theme.subtitle.sub6 %>'],                 startDelay: <%= theme.subtitle.startDelay %>,                 typeSpeed: <%= theme.subtitle.typeSpeed %>,                 loop: <%= theme.subtitle.loop %>,                    backSpeed: <%= theme.subtitle.backSpeed %>,                 showCursor: <%= theme.subtitle.showCursor %>              });          </script>      <% } else { %>            <%= config.description %>      <% } %></div></code></pre><h6 id="社交链接的修改"><a href="#社交链接的修改" class="headerlink" title="社交链接的修改"></a>社交链接的修改</h6><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，修改以下的配置项</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">socialLink</span><span class="token punctuation">:</span>  <span class="token key atrule">github</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#https://github.com/blinkfox</span>  <span class="token key atrule">email</span><span class="token punctuation">:</span> 891539723@qq.com  <span class="token key atrule">facebook</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://www.facebook.com/xxx</span>  <span class="token key atrule">twitter</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://twitter.com/xxx</span>  <span class="token key atrule">qq</span><span class="token punctuation">:</span> <span class="token number">891539723</span>  <span class="token key atrule">weibo</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://weibo.com/xxx</span>  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://www.zhihu.com/xxx</span>  <span class="token key atrule">rss</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># true、false</span></code></pre><p>如果想添加简书，CSDN，掘金，博客园等等，需要在<strong>主题配置文件</strong>添加相关配置，如下是我个人的配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">socialLink</span><span class="token punctuation">:</span>  <span class="token key atrule">qq</span><span class="token punctuation">:</span> <span class="token number">1035800145</span>  <span class="token key atrule">weixin</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Yafine/Yafine<span class="token punctuation">-</span>imgs/images/wechat.png  <span class="token key atrule">github</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/Yafine  <span class="token key atrule">email</span><span class="token punctuation">:</span> mailto<span class="token punctuation">:</span>1035800145@qq.com  <span class="token key atrule">facebook</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://www.facebook.com/xxx</span>  <span class="token key atrule">twitter</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://twitter.com/xxx</span>  <span class="token key atrule">weibo</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://weibo.com/xxx</span>  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.zhihu.com/people/xuan<span class="token punctuation">-</span>tian<span class="token punctuation">-</span>40<span class="token punctuation">-</span>64/activities  <span class="token key atrule">juejin</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//juejin.im/user/5a902053f265da4e7527ae71/activities  <span class="token key atrule">csdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.csdn.net/victoryxa  <span class="token key atrule">jianshu</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.jianshu.com/u/3b3856869772  <span class="token key atrule">cnblogs</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.cnblogs.com/yafine/  <span class="token key atrule">rss</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># true、false</span></code></pre><p>然后在主题目录下的 <code>layout</code> 文件夹下的<code>_partial</code> 文件夹，修改 <code>social-link.ejs</code>，添加相关的配置，我个人添加的配置如下：</p><pre class=" language-ejs"><code class="language-ejs"><% if (theme.socialLink.csdn) { %>    <a href="<%= theme.socialLink.csdn %>" class="tooltipped" target="_blank" data-tooltip="关注我的CSDN: <%= theme.socialLink.csdn %>" data-position="top" data-delay="50">        <i class="fab fa-csdn">C</i>    </a><% } %><% if (theme.socialLink.weixin) { %>    <a href="<%= theme.socialLink.weixin %>" class="tooltipped" target="_blank" data-tooltip="微信联系我: <%= theme.socialLink.weixin %>" data-position="top" data-delay="50">        <i class="fab fa-weixin"></i>    </a><% } %></code></pre><h6 id="修改导航栏颜色以及透明效果"><a href="#修改导航栏颜色以及透明效果" class="headerlink" title="修改导航栏颜色以及透明效果"></a>修改导航栏颜色以及透明效果</h6><p>打开 <code>themes/matery/source/css/matery.css</code> 文件，大约在 250 行，有一个<code>.bg-color</code> 属性，修改其属性值即可，代码如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //修改成自己喜欢的颜色值    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span>  //透明效果 值范围 <span class="token number">0</span>~<span class="token number">1</span>，看情况自己修改<span class="token punctuation">}</span></code></pre><h6 id="添加天气小插件"><a href="#添加天气小插件" class="headerlink" title="添加天气小插件"></a>添加天气小插件</h6><p>首先去中国天气官网：<a href="https://cj.weather.com.cn/plugin/pc%EF%BC%8C%E9%85%8D%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8F%92%E4%BB%B6%EF%BC%8C%E9%80%89%E6%8B%A9%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E2%80%94%3E%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E2%80%94%E2%80%94%3E%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BC%9A%E7%94%9F%E6%88%90%E4%B8%80%E6%AE%B5%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E5%88%B0">https://cj.weather.com.cn/plugin/pc，配置自己的插件，选择自定义插件 —&gt; 自定义样式 ——&gt; 生成代码，然后会生成一段代码，复制粘贴到</a> <code>themes/matery/layout/layout.ejs</code> 即可。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>weather-v2-plugin-simple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">WIDGET <span class="token operator">=</span> <span class="token punctuation">{</span>  CONFIG<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token string">"01234"</span><span class="token punctuation">,</span>    <span class="token string">"background"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"tmpColor"</span><span class="token punctuation">:</span> <span class="token string">"FFFFFF"</span><span class="token punctuation">,</span>    <span class="token string">"tmpSize"</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>    <span class="token string">"cityColor"</span><span class="token punctuation">:</span> <span class="token string">"FFFFFF"</span><span class="token punctuation">,</span>    <span class="token string">"citySize"</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>    <span class="token string">"aqiSize"</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>    <span class="token string">"weatherIconSize"</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>    <span class="token string">"alertIconSize"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token string">"padding"</span><span class="token punctuation">:</span> <span class="token string">"10px 10px 10px 10px"</span><span class="token punctuation">,</span>    <span class="token string">"shadow"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token string">"language"</span><span class="token punctuation">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    <span class="token string">"borderRadius"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token string">"fixed"</span><span class="token punctuation">:</span> <span class="token string">"false"</span><span class="token punctuation">,</span>    <span class="token string">"vertical"</span><span class="token punctuation">:</span> <span class="token string">"middle"</span><span class="token punctuation">,</span>    <span class="token string">"horizontal"</span><span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>    <span class="token string">"key"</span><span class="token punctuation">:</span> <span class="token string">"FdzHdqCP8G"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://apip.weatherdt.com/simple/static/js/weather-simple-common.js?v<span class="token punctuation">=</span>2.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h4><p>推荐使用Valine 评论系统，去官网注册登陆，创建应用时会自动生成id和key</p><p><strong>AppID</strong>：moRTMaVch11euFiba4pGxOLE-gzGzoHsz</p><p><strong>AppKey</strong>：EVJxM76249ugmY490BvoI6Kr</p><p>打开主题的配置文件，搜索<code>valine</code>然后修改以下内容</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.</span><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># true即为开启评论系统</span>  <span class="token key atrule">appId</span><span class="token punctuation">:</span> moRTMaVch11euFiba4pGxOLE<span class="token punctuation">-</span>gzGzoHsz <span class="token comment" spellcheck="true">#此处填写你的appid</span>  <span class="token key atrule">appKey</span><span class="token punctuation">:</span> EVJxM76249ugmY490BvoI6Kr <span class="token comment" spellcheck="true">#此处填写你的appkey</span>  <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">visitor</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> <span class="token string">'mm'</span> <span class="token comment" spellcheck="true"># Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> <span class="token string">'just go go'</span> <span class="token comment" spellcheck="true"># Comment Box placeholder</span>  <span class="token key atrule">background</span><span class="token punctuation">:</span>  https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Yafine/cdn@3.1.1/social/comment_bg.png <span class="token comment" spellcheck="true">#评论背景图片</span></code></pre><p>然后执行相关部署命令，查看效果即可。</p><h4 id="域名解析与绑定"><a href="#域名解析与绑定" class="headerlink" title="域名解析与绑定"></a>域名解析与绑定</h4><blockquote><p>以腾讯云为例,需要购买域名</p></blockquote><h4 id="新建文章自动打开本地-Markdown-编辑器"><a href="#新建文章自动打开本地-Markdown-编辑器" class="headerlink" title="新建文章自动打开本地 Markdown 编辑器"></a>新建文章自动打开本地 Markdown 编辑器</h4><p>写新文章时，需要控制台执行 <code>hexo new "文章名字"</code>，这样就会在<code>_posts</code> 下生成一篇新文章，但需要手动打开，挺麻烦，只需要在站点根目录下新建 <code>scripts</code> 目录，然后在新建 <code>auto_open.js</code>，在文件填入一下内容：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Hexo 2.x 用户复制这段</span><span class="token comment" spellcheck="true">//hexo.on('new', function(path){</span>  <span class="token comment" spellcheck="true">//spawn('start  "markdown编辑器绝对路径.exe" ' + path);</span><span class="token comment" spellcheck="true">//});</span><span class="token comment" spellcheck="true">// Hexo 3 用户复制这段</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'start  "D:\Program Files\Typora\Typora.exe" '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中 <code>"D:\Program Files\Typorae\Typora.exe"</code> 是我本地编辑器的路径，只需要改为你本地编辑器的路径即可，然后在执行 <code>hexo cl &amp;&amp; hexo g -d</code>，部署到 GitHub 即可，以后在发布文章就会自动打开编辑器。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试题(208道)</title>
      <link href="/jojoblog.github.io/2023/02/12/java-mian-shi-ti-208-dao/"/>
      <url>/jojoblog.github.io/2023/02/12/java-mian-shi-ti-208-dao/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面试题（208道）"><a href="#Java面试题（208道）" class="headerlink" title="Java面试题（208道）"></a>Java面试题（208道）</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>本文分为十九个模块，分别是：「<span style="color:red;"><strong>Java 基础、容器、多线程、反射、对象拷贝、Java Web 、异常、网络、设计模式、Spring/Spring MVC、Spring Boot/Spring Cloud、Hibernate、MyBatis、RabbitMQ、Kafka、Zookeeper、MySQL、Redis、JVM</strong></span>」 ，如下图所示：</p><p><strong>模块图：</strong></p><img src="/jojoblog.github.io/2023/02/12/java-mian-shi-ti-208-dao/%E6%A8%A1%E5%9D%97%E5%9B%BE.png" class><h2 id="二、Java"><a href="#二、Java" class="headerlink" title="二、Java"></a>二、Java</h2><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><h4 id="1-JDK-和-JRE-有什么区别？"><a href="#1-JDK-和-JRE-有什么区别？" class="headerlink" title="1. JDK 和 JRE 有什么区别？"></a><strong>1. JDK 和 JRE 有什么区别？</strong></h4><ul><li>JDK：Java Development Kit 的简称，Java 开发工具包，提供了 Java 的开发环境和运行环境。</li><li>JRE：Java Runtime Environment 的简称，Java 运行环境，为 Java 的运行提供了所需环境。</li></ul><p>具体来说 JDK 其实包含了 JRE，同时还包含了编译 Java 源码的编译器 <a href="https://so.csdn.net/so/search?q=Javac&amp;spm=1001.2101.3001.7020">Javac</a>，还包含了很多 Java 程序调试和分析的工具。简单来说：如果你需要运行 Java 程序，只需安装 JRE 就可以了，如果你需要编写 Java 程序，需要安装 JDK。</p><h4 id="2-x3D-x3D-和-equals-的区别是什么？"><a href="#2-x3D-x3D-和-equals-的区别是什么？" class="headerlink" title="2. == 和 equals 的区别是什么？"></a><strong>2. == 和 equals 的区别是什么？</strong></h4><p><strong>「== 解读」</strong></p><p>对于基本类型和引用类型 == 的作用效果是不同的，如下所示：</p><ul><li>基本类型：比较的是值是否相同；</li><li>引用类型：比较的是引用是否相同；</li></ul><p>代码示例：</p><pre class=" language-java"><code class="language-java">String x <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span>String y <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span>String z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">==</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p><strong>代码解读：</strong>因为 x 和 y 指向的是同一个引用，所以 == 也是 true，而 new String()方法则重写开辟了内存空间，所以 == 结果为 false，而 equals 比较的一直是值，所以结果都为 true。</p><p><strong>「equals 解读」</strong></p><p>equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。看下面的代码就明白了。</p><p>首先来看默认情况下 equals 比较一个有相同值的对象，代码如下：</p><pre class=" language-java"><code class="language-java">classCat<span class="token punctuation">{</span>    <span class="token function">publicCat</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>     <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">publicvoidsetName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> Cat c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"王磊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Cat c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"王磊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p>输出结果出乎我们的意料，竟然是 false？这是怎么回事，看了 equals 源码就知道了，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token function">publicbooleanequals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>原来 equals 本质上就是 ==。</p><p>那问题来了，两个相同值的 String 对象，为什么返回的是 true？代码如下：</p><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"老王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"老王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>同样的，当我们进入 String 的 equals 方法，找到了答案，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token function">publicbooleanequals</span><span class="token punctuation">(</span>Object anObject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String anotherString <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>原来是 String 重写了 Object 的 equals 方法，把引用比较改成了值比较。</p><p><strong>「总结」 ：</strong>== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重新了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。</p><h4 id="3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？"><a href="#3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？" class="headerlink" title="3. 两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？"></a><strong>3. 两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？</strong></h4><p>不对，两个对象的 hashCode() 相同，equals() 不一定 true。</p><p>代码示例：</p><pre class=" language-java"><code class="language-java">String str1 <span class="token operator">=</span> <span class="token string">"通话"</span><span class="token punctuation">;</span>String str2 <span class="token operator">=</span> <span class="token string">"重地"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str1：%d | str2：%d"</span><span class="token punctuation">,</span>  str1<span class="token punctuation">.</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str2<span class="token punctuation">.</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span> <span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行的结果：</p><pre class=" language-md"><code class="language-md">str1：1179395 | str2：1179395 false</code></pre><p><strong>代码解读：</strong>很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode() 相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。</p><h4 id="4-final-在-Java-中有什么作用？"><a href="#4-final-在-Java-中有什么作用？" class="headerlink" title="4. final 在 Java 中有什么作用？"></a><strong>4. final 在 Java 中有什么作用？</strong></h4><ul><li>final 修饰的类叫最终类，该类不能被继承。</li><li>final 修饰的方法不能被重写。</li><li>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</li></ul><h4 id="5-Java-中的-Math-round-1-5-等于多少？"><a href="#5-Java-中的-Math-round-1-5-等于多少？" class="headerlink" title="5. Java 中的 Math. round(-1. 5) 等于多少？"></a><strong>5. Java 中的 Math. round(-1. 5) 等于多少？</strong></h4><p>等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。</p><h4 id="6-String-属于基础的数据类型吗？"><a href="#6-String-属于基础的数据类型吗？" class="headerlink" title="6. String 属于基础的数据类型吗？"></a><strong>6. String 属于基础的数据类型吗？</strong></h4><p>String 不属于基础类型，基础类型有 8 种：<span style="color:red;"><strong>byte、boolean、char、short、int、float、long、double</strong></span>，而 String 属于对象。</p><h4 id="7-String、StringBuffer、StringBuilder。"><a href="#7-String、StringBuffer、StringBuilder。" class="headerlink" title="7. String、StringBuffer、StringBuilder。"></a><strong>7. String、StringBuffer、StringBuilder。</strong></h4><h5 id="7-1-Java-中操作字符串都有哪些类？"><a href="#7-1-Java-中操作字符串都有哪些类？" class="headerlink" title="7.1 Java 中操作字符串都有哪些类？"></a>7.1 Java 中操作字符串都有哪些类？</h5><p>操作字符串的类有：<span style="color:red;"><strong>String、StringBuffer、StringBuilder</strong></span>。</p><h5 id="7-2-它们之间有什么区别？"><a href="#7-2-它们之间有什么区别？" class="headerlink" title="7.2 它们之间有什么区别？"></a>7.2 它们之间有什么区别？</h5><p><strong>String</strong> 和 <strong>StringBuffer</strong>、<strong>StringBuilder</strong> 的区别在于 <strong>String</strong> 声明的是不可变的对象，每次操作都会生成新的 <strong>String 对象</strong>，然后将<strong>指针</strong>指向新的 <strong>String 对象</strong>，而 <strong>StringBuffer</strong>、<strong>StringBuilder</strong> 可以在原有对象的基础上进行操作，所以<span style="color:red;">在经常改变字符串内容的情况下最好不要使用 String</span>。</p><p><strong>StringBuffer</strong> 和 <strong>StringBuilder</strong> 最大的区别在于，<strong>StringBuffer</strong> 是<span style="color:red;">线程安全的</span>，而 <strong>StringBuilder</strong> 是<span style="color:red;">非线程安全的</span>，但 <strong>StringBuilder</strong> 的性能却高于 <strong>StringBuffer</strong>，所以<span style="color:red;">在单线程环境下推荐使用 <strong>StringBuilde</strong>r，多线程环境下推荐使用 <strong>StringBuffer</strong></span>。</p><h4 id="8-String-str-x3D-”i”与-String-str-x3D-new-String-“i”-一样吗？"><a href="#8-String-str-x3D-”i”与-String-str-x3D-new-String-“i”-一样吗？" class="headerlink" title="8. String str=”i”与 String str=new String(“i”)一样吗？"></a><strong>8. String str=”i”与 String str=new String(“i”)一样吗？</strong></h4><p>不一样，因为内存的分配方式不一样。String str=”i”的方式，Java 虚拟机会将其分配到<span style="color:red;"> 常量池 </span>中；而 String str=new String(“i”) 则会被分到<span style="color:red;"> 堆内存 </span>中。</p><h4 id="9-如何将字符串反转？"><a href="#9-如何将字符串反转？" class="headerlink" title="9. 如何将字符串反转？"></a><strong>9. 如何将字符串反转？</strong></h4><p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// StringBuffer reverse</span>StringBuffer stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringBuffer<span class="token punctuation">.</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// gfedcba</span><span class="token comment" spellcheck="true">// StringBuilder reverse</span>StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringBuilder<span class="token punctuation">.</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// gfedcba</span></code></pre><h4 id="10-String-类的常用方法都有那些？"><a href="#10-String-类的常用方法都有那些？" class="headerlink" title="10. String 类的常用方法都有那些？"></a><strong>10. String 类的常用方法都有那些？</strong></h4><ul><li>indexOf()：返回指定字符的索引。</li><li>charAt()：返回指定索引处的字符。</li><li>replace()：字符串替换。</li><li>trim()：去除字符串两端空白。</li><li>split()：分割字符串，返回一个分割后的字符串数组。</li><li>getBytes()：返回字符串的 byte 类型数组。</li><li>length()：返回字符串长度。</li><li>toLowerCase()：将字符串转成小写字母。</li><li>toUpperCase()：将字符串转成大写字符。</li><li>substring()：截取字符串。</li><li>equals()：字符串比较。</li></ul><h4 id="11-抽象类必须要有抽象方法吗？"><a href="#11-抽象类必须要有抽象方法吗？" class="headerlink" title="11. 抽象类必须要有抽象方法吗？"></a><strong>11. 抽象类必须要有抽象方法吗？</strong></h4><p>不需要，<span style="color:red;">抽象类不一定非要有抽象方法</span>。</p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> classCat<span class="token punctuation">{</span>    <span class="token function">publicstaticvoidsayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面代码，抽象类并没有抽象方法但完全可以正常运行。</p><h4 id="12-普通类和抽象类有哪些区别？"><a href="#12-普通类和抽象类有哪些区别？" class="headerlink" title="12. 普通类和抽象类有哪些区别？"></a><strong>12. 普通类和抽象类有哪些区别？</strong></h4><ul><li>普通类不能包含抽象方法，抽象类可以包含抽象方法。</li><li>抽象类不能直接实例化，普通类可以直接实例化。</li></ul><h4 id="13-抽象类能使用-final-修饰吗？"><a href="#13-抽象类能使用-final-修饰吗？" class="headerlink" title="13. 抽象类能使用 final 修饰吗？"></a><strong>13. 抽象类能使用 final 修饰吗？</strong></h4><p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，如下图所示，编辑器也会提示错误信息：</p><img src="/jojoblog.github.io/2023/02/12/java-mian-shi-ti-208-dao/finalAbstractclassErrorMsg.png" class><h4 id="14-接口和抽象类有什么区别？"><a href="#14-接口和抽象类有什么区别？" class="headerlink" title="14. 接口和抽象类有什么区别？"></a><strong>14. 接口和抽象类有什么区别？</strong></h4><ul><li>实现：抽象类的子类使用 <span style="color:red;"><strong>extends</strong> </span>来继承；接口必须使用 <span style="color:red;"><strong>implements</strong></span> 来实现接口。</li><li>构造函数：<strong>抽象类可以有构造函数</strong>；<strong>接口不能有</strong>（因为接口没有方法体）。</li><li>实现数量：类可以实现很多个接口；但是只能继承一个抽象类。</li><li>访问修饰符：<strong>接口中的方法默认使用 public 修饰</strong>；抽象类中的方法可以是<strong>任意访问修饰符</strong>。</li><li>成员方法：抽象类可以存在普通成员方法，而接口中只能存在 <u><strong>public abstract</strong></u> 方法。</li><li>抽象类只能继承一个，接口普可以实现多个。</li></ul><h4 id="15-Java-中-IO-流分为几种？"><a href="#15-Java-中-IO-流分为几种？" class="headerlink" title="15. Java 中 IO 流分为几种？"></a><strong>15. Java 中 IO 流分为几种？</strong></h4><p>按功能来分：输入流（input）、输出流（output）。</p><p>按类型来分：<strong>字节流</strong>和<strong>字符流</strong>。</p><p>字节流和字符流的区别是：字节流<strong>按 8 位传输以字节为单位</strong>输入输出数据，字符流<strong>按 16 位传输以字符为单位</strong>输入输出数据。</p><h4 id="16-BIO、NIO、AIO-有什么区别？"><a href="#16-BIO、NIO、AIO-有什么区别？" class="headerlink" title="16. BIO、NIO、AIO 有什么区别？"></a><strong>16. BIO、NIO、AIO 有什么区别？</strong></h4><ul><li>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</li><li>NIO：Non IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</li><li>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</li></ul><h4 id="17-Files的常用方法都有哪些？"><a href="#17-Files的常用方法都有哪些？" class="headerlink" title="17. Files的常用方法都有哪些？"></a><strong>17. Files的常用方法都有哪些？</strong></h4><ul><li>Files. exists()：检测文件路径是否存在。</li><li>Files. createFile()：创建文件。</li><li>Files. createDirectory()：创建文件夹。</li><li>Files. delete()：删除一个文件或目录。</li><li>Files. copy()：复制文件。</li><li>Files. move()：移动文件。</li><li>Files. size()：查看文件个数。</li><li>Files. read()：读取文件。</li><li>Files. write()：写入文件。</li></ul><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h4 id="18-Java-容器都有哪些？"><a href="#18-Java-容器都有哪些？" class="headerlink" title="18. Java 容器都有哪些？"></a><strong>18. Java 容器都有哪些？</strong></h4><p>Java 容器分为 Collection 和 Map 两大类，其下又有很多子类，如下所示：</p><ul><li>Collection<ul><li>List<ul><li>ArrayList</li><li>LinkedList</li><li>Vector</li><li>Stack</li></ul></li><li>Set<ul><li>HashSet</li><li>LinkedHashSet</li><li>TreeSet</li></ul></li></ul></li><li>Map<ul><li>HashMap<ul><li>LinkedHashMap</li></ul></li><li>TreeMap</li><li>ConcurrentHashMap</li><li>Hashtable</li></ul></li></ul><h4 id="19-Collection-和-Collections-有什么区别？"><a href="#19-Collection-和-Collections-有什么区别？" class="headerlink" title="19. Collection 和 Collections 有什么区别？"></a><strong>19. Collection 和 Collections 有什么区别？</strong></h4><ul><li>Collection 是一个 <span style="color:red;"><strong>集合接口</strong></span> ，它提供了对集合对象进行基本操作的通用接口方法，<span style="color:red;"><strong>所有集合都是它的子类</strong></span>，比如 List、Set 等。</li><li>Collections 是一个<span style="color:red;"><strong>包装类</strong></span>，包含了很多静态方法，<span style="color:red;"><strong>不能被实例化</strong>，<strong>就像一个工具类</strong></span>，比如提供的排序方法：Collections. sort(list)。</li></ul><h4 id="20-List、Set、Map-之间的区别是什么？"><a href="#20-List、Set、Map-之间的区别是什么？" class="headerlink" title="20. List、Set、Map 之间的区别是什么？"></a><strong>20. List、Set、Map 之间的区别是什么？</strong></h4><p>List、Set、Map 的区别主要体现在两个方面：元素是否有序、是否允许元素重复。</p><p>三者之间的区别，如下表：</p><img src="/jojoblog.github.io/2023/02/12/java-mian-shi-ti-208-dao/theDiffercenceOfListAndSetAndMap.png" class><p><strong>List集合</strong>，<strong>Set集合</strong>都是继承<strong>Collection父接口</strong>。</p><p>Map没有继承Collection父接口，<strong>Map是键值对集合（</strong>key到value的映射<strong>）</strong>，是把键对象和值对象进行映射的集合。</p><h6 id="1-List"><a href="#1-List" class="headerlink" title="1.List"></a>1.List</h6><p>list是一种有序集合，按照对象进入的顺序保存对象，并且允许重复对象，插入多个null值。</p><p>list查找效率快，但增删效率慢，增删会引起其他元素位置发生改变。</p><p>特点：<span style="color:blue;"><strong>有序</strong>，<strong>允许重复</strong>，<strong>查询快</strong>，<strong>增删慢</strong></span>。</p><p>实现类有：</p><p>List 的实现类有 <span style="color:blue;"><strong>ArrayList</strong>、<strong>LinkedList</strong>、<strong>Vector</strong></span>。</p><p><span style="color:red;"><strong>ArrayList和 Vector底层都是通过数组实现</strong></span>，两种类型在查询效率上会高很多，<span style="color:red;"><strong>Vector 是线程安全的</strong>， <strong>ArrayList 线程不安全的</strong>，<strong>性能会稍慢一些</strong></span>。</p><p><span style="color:red;"><strong>LinkedList是线程不安全的</strong>，<strong>底层用链表结构存储数据的</strong></span>，适合数据的动态插入和删除，随机访问和遍历速度比较慢。</p><h6 id="2-Set"><a href="#2-Set" class="headerlink" title="2.Set"></a>2.Set</h6><p>set是无序的集合，不是按照对象进入的顺序保存，不可重复，<strong>只允许一个null值出现</strong>。</p><p>set检索元素效率低，而增删效率快，增删不会引起其他元素位置发生改变。</p><p>特点：<span style="color:blue;"><strong>无序</strong>，<strong>不允许重复</strong>，<strong>查询慢</strong>，<strong>增删快</strong></span>。</p><p>实现类有：</p><p>Set的实现类有<span style="color:blue;"><strong>HashSet</strong> 和 <strong>TreeSet</strong></span>。</p><p><span style="color:red;"><strong>HashSet底层使用的是HashMap哈希表结构储存</strong>，<strong>无序的</strong></span>。</p><p><span style="color:red;"><strong>TreeSet底层用的是TreeMap树结构储存</strong>，<strong>有序的</strong></span>。</p><h6 id="3-Map"><a href="#3-Map" class="headerlink" title="3.Map"></a>3.Map</h6><p>map以键值对的方式存储元素，根据键得到值，所有Map集合的Key是无序不可重复的，<span style="color:red;"><strong>key和value都是引用数据类型</strong>，<strong>存的都是内存的地址</strong></span>。</p><p>特点：<span style="color:blue;"><strong>键值储存</strong>，<strong>key无序且不可重复</strong></span>。</p><p>实现类：</p><p>Map集合的实现类主要为<span style="color:blue;"><strong>HashMap</strong>、<strong>HashTable</strong></span>。</p><p><span style="color:red;"><strong>HashMap底层采用哈希表的数据结构</strong>，<strong>非线程安全的</strong></span>。</p><p><span style="color:red;"><strong>HashTable底层采用哈希表的数据结构</strong>，<strong>线程安全的</strong>，<strong>效率太低</strong></span>。</p><h4 id="21-HashMap-和-Hashtable-有什么区别？"><a href="#21-HashMap-和-Hashtable-有什么区别？" class="headerlink" title="21. HashMap 和 Hashtable 有什么区别？"></a><strong>21. HashMap 和 Hashtable 有什么区别？</strong></h4><ul><li>存储：HashMap运行Key 和 Value为null，而Hashtable不允许。</li><li>线程安全：<span style="color:blue;"><strong>Hashtable是线程安全的</strong></span>，而<span style="color:blue;"><strong>HashMap是非线程安全的</strong></span>。</li><li>推荐使用：在Hashtable的类注释可以看到，Hashtable是保留类，不建议使用，<span style="color:blue;"><strong>推荐单线程环境下使用HashMap</strong></span>代替，如果<span style="color:blue;"><strong>需要多线程使用则用ConcurrentHashMap</strong></span>代替。</li></ul><h4 id="22-如何决定使用-HashMap-还是-TreeMap？"><a href="#22-如何决定使用-HashMap-还是-TreeMap？" class="headerlink" title="22. 如何决定使用 HashMap 还是 TreeMap？"></a><strong>22. 如何决定使用 HashMap 还是 TreeMap？</strong></h4><p><strong>对于在 Map 中插入、删除、定位一个元素这类操作，HashMap 是最好的选择</strong>，因为相对而言 HashMap 的插入会更快。但如果你要<strong>对一个 key 集合进行有序的遍历，那 TreeMap 是更好的选择</strong>。</p><h4 id="23-说一下-HashMap-的实现原理？"><a href="#23-说一下-HashMap-的实现原理？" class="headerlink" title="23. 说一下 HashMap 的实现原理？"></a><strong>23. 说一下 HashMap 的实现原理？</strong></h4><p><span style="color:red;"><strong>HashMap 基于 Hash 算法实现的</strong></span>，我们通过 put(key,value)存储，get(key)来获取。<span style="color:blue;">当传入 key 时，HashMap 会根据 key. hashCode() 计算出 hash 值</span>，根据 hash 值将 value 保存在 bucket 里。<span style="color:blue;">当计算出的 hash 值相同时，我们称之为 <strong>hash 冲突</strong></span>，HashMap 的做法是用链表和红黑树存储相同 hash 值的 value。<span style="color:blue;">当 hash 冲突的个数比较少时，使用<strong>链表</strong>否则使用<strong>红黑树</strong></span>。</p><h4 id="24-说一下-HashSet-的实现原理？"><a href="#24-说一下-HashSet-的实现原理？" class="headerlink" title="24. 说一下 HashSet 的实现原理？"></a><strong>24. 说一下 HashSet 的实现原理？</strong></h4><p><span style="color:red;"><strong>HashSet 是基于 HashMap 实现的</strong></span>，HashSet 底层使用 HashMap 来保存所有元素，因此 HashSet 的实现比较简单，相关 HashSet 的操作，基本上都是直接调用底层 HashMap 的相关方法来完成，<span style="color:blue;"><strong>HashSet 不允许重复的值</strong></span>。</p><h4 id="25-ArrayList-和-LinkedList-的区别是什么？"><a href="#25-ArrayList-和-LinkedList-的区别是什么？" class="headerlink" title="25. ArrayList 和 LinkedList 的区别是什么？"></a><strong>25. ArrayList 和 LinkedList 的区别是什么？</strong></h4><ul><li>数据结构实现：<span style="color:red;"><strong>ArrayList是动态数组的数据结构实现</strong></span>，而<span style="color:red;"><strong>LinkList是双向链表的数据结构实现</strong></span>。</li><li>随机访问效率：<span style="color:blue;"><strong>ArrayList比LinkList在随机访问的时候效率要高</strong></span>，因为LinkList是线性的数据存储方式，所以移动指针从前往后一次查找。</li><li>增加和删除的效率：<span style="color:blue;"><strong>在非首尾的增加和删除操作，LinkList要比ArrayList的效率高</strong></span>，因为ArrayList增删操作要影响数组内的其他数据的下标。</li></ul><p>综合来说：<span style="color:red;"><strong>在需要频繁读取集合中的元素时，更推荐使用ArrayList</strong></span>，而<span style="color:red;"><strong>在插入和删除操作较多时，更推荐使用LinkList</strong></span>。</p><h4 id="26-如何实现数组和-List-之间的转换？"><a href="#26-如何实现数组和-List-之间的转换？" class="headerlink" title="26. 如何实现数组和 List 之间的转换？"></a><strong>26. 如何实现数组和 List 之间的转换？</strong></h4><ul><li>数组转 List：使用 <span style="color:red;"><strong>Arrays. asList(array)</strong> 进行转换。</span></li><li>List 转数组：使用 List 自带的 <span style="color:red;"><strong>toArray()</strong> 方法。</span></li></ul><p>代码示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// list to array</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王磊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"的博客"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// array to list</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"王磊"</span><span class="token punctuation">,</span><span class="token string">"的博客"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span> <span class="token function">asList</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="30-哪些集合类是线程安全的？"><a href="#30-哪些集合类是线程安全的？" class="headerlink" title="30. 哪些集合类是线程安全的？"></a><strong>30. 哪些集合类是线程安全的？</strong></h4><p><span style="color:red;"><strong>Vector、Hashtable、Stack 都是线程安全的</strong></span>，而像 <span style="color:red;"><strong>HashMap 则是非线程安全的</strong></span>，不过在 <span style="color:blue;"><strong>JDK 1.5 之后</strong></span>随着 Java. util. concurrent 并发包的出现，它们也有了自己对应的线程安全类，比如 <span style="color:red;"><strong>HashMap 对应的线程安全类就是 ConcurrentHashMap</strong></span>。</p><h4 id="31-迭代器-Iterator-是什么？"><a href="#31-迭代器-Iterator-是什么？" class="headerlink" title="31. 迭代器 Iterator 是什么？"></a><strong>31. 迭代器 Iterator 是什么？</strong></h4><p>Iterator 接口提供遍历任何 Collection 的接口。我们可以从一个 Collection 中使用迭代器方法来获取迭代器实例。迭代器取代了 Java 集合框架中的 Enumeration，迭代器允许调用者在迭代过程中移除元素。</p><h4 id="32-Iterator-怎么使用？有什么特点？"><a href="#32-Iterator-怎么使用？有什么特点？" class="headerlink" title="32. Iterator 怎么使用？有什么特点？"></a><strong>32. Iterator 怎么使用？有什么特点？</strong></h4><p>Iterator 使用代码如下：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  String obj <span class="token operator">=</span> it<span class="token punctuation">.</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Iterator 的特点是更加安全，因为它可以确保，在当前遍历的集合元素被更改的时候，就会抛出 ConcurrentModificationException 异常。</p><h4 id="33-Iterator-和-ListIterator-有什么区别？"><a href="#33-Iterator-和-ListIterator-有什么区别？" class="headerlink" title="33. Iterator 和 ListIterator 有什么区别？"></a><strong>33. Iterator 和 ListIterator 有什么区别？</strong></h4><ul><li><span style="color:red;"><strong>Iterator 可以遍历 Set 和 List 集合</strong></span>，而 <span style="color:red;"><strong>ListIterator 只能遍历 List</strong></span>。</li><li><span style="color:red;"><strong>Iterator 只能单向遍历</strong></span>，而 <span style="color:red;"><strong>ListIterator 可以双向遍历（向前/后遍历）</strong></span>。</li><li><span style="color:blue;"><strong>ListIterator 从 Iterator 接口继承</strong>，<strong>然后添加了一些额外的功能</strong>，比如添加一个元素、替换一个元素、获取前面或后面元素的索引位置</span>。</li></ul><h4 id="34-怎么确保一个集合不能被修改？"><a href="#34-怎么确保一个集合不能被修改？" class="headerlink" title="34. 怎么确保一个集合不能被修改？"></a><strong>34. 怎么确保一个集合不能被修改？</strong></h4><p>可以使用 <span style="color:blue;"><strong>Collections. unmodifiableCollection(Collection c) 方法来创建一个只读集合</strong></span>，这样<strong>改变集合的任何操作都会抛出</strong> <span style="color:red;"><strong>Java. lang. UnsupportedOperationException 异常</strong></span>。</p><p>示例代码如下：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> clist <span class="token operator">=</span> Collections<span class="token punctuation">.</span> <span class="token function">unmodifiableCollection</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>clist<span class="token punctuation">.</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 运行时此行报错</span>System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token bold"><span class="token punctuation">**</span>extends<span class="token punctuation">**</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>{% asset_img finalAbstractclassErrorMsg.png  %}</code></pre><h4 id="35-重载和重写的区别？"><a href="#35-重载和重写的区别？" class="headerlink" title="35. 重载和重写的区别？"></a><strong>35. 重载和重写的区别？</strong></h4><h6 id="1、重载"><a href="#1、重载" class="headerlink" title="1、重载"></a>1、重载</h6><blockquote><p>重载发生在<strong>同一个类中</strong>，<strong>方法名</strong>必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，报错发生在编译时。</p></blockquote><h6 id="2、重写"><a href="#2、重写" class="headerlink" title="2、重写"></a>2、重写</h6><blockquote><p>重写发生在父子类中，<strong>方法名</strong>、<strong>参数列表</strong>必须相同，返回值范围<strong>小于等于</strong>父类，抛出异常范围<strong>小于等于</strong>父类，访问修饰符访问<strong>大于等于</strong>父类；如果父类方法访问修饰符为<strong>private</strong>，则子类就不能重写该方法。</p></blockquote><h6 id="3、代码示例"><a href="#3、代码示例" class="headerlink" title="3、代码示例"></a>3、代码示例</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>Striing b<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>String b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 编译报错</span></code></pre><h4 id="36-泛型中extends和super的区别？"><a href="#36-泛型中extends和super的区别？" class="headerlink" title="36. 泛型中extends和super的区别？"></a><strong>36. 泛型中extends和super的区别？</strong></h4><blockquote><p>1.&lt;? extends T &gt; 表示包括 T 在内的所有<strong>子类</strong>。</p><p>2.&lt;? super T&gt; 表示包括 T 在内的所有<strong>父类</strong>。</p></blockquote><h4 id="37-深拷贝和浅拷贝"><a href="#37-深拷贝和浅拷贝" class="headerlink" title="37. 深拷贝和浅拷贝"></a><strong>37. 深拷贝和浅拷贝</strong></h4><blockquote><p>深拷贝和浅拷贝就是值对象的拷贝，一个对象中存在两种属性，一种是基本数据类型，一种是实例对象的引用。</p></blockquote><ol><li>浅拷贝是指，只会拷贝基本数据类型的值，以及实例对象的引用地址，并不会复制一份引用地址所指向的对象，也就是浅拷贝出来的对象，内部的类属性所指向的是用一个对象。</li><li>深拷贝是指，既会拷贝基本数据类型的值，也会针对实例对象的引用地址所指向的对象进行复制，深拷贝出来的对象，内部属性指向的不是同一个对象。</li></ol><h4 id="38-Java中的异常体系是什么样的？"><a href="#38-Java中的异常体系是什么样的？" class="headerlink" title="38. Java中的异常体系是什么样的？"></a><strong>38. Java中的异常体系是什么样的？</strong></h4><blockquote><ul><li>Java中所有的异常都是内置顶级父类<strong>Throwable</strong>。</li><li>Throwable下有两个子类：<strong>Exception</strong>和<strong>Error</strong></li><li>Error是程序无法处理的错误，一旦出现错误，则程序将被迫停止运行。</li><li>Exception不会导致程序停止，又分为两个RunTimeException运行时异常和CheckedException检查异常。</li><li>RunTimeException常常发生在程序运行的过程中，会导致程序当前线程执行失败。CheckedException常常发生在程序编译过程中，会导致程序编译不通过。</li></ul></blockquote><h6 id="Java异常体系图"><a href="#Java异常体系图" class="headerlink" title="Java异常体系图"></a>Java异常体系图</h6><img src="/jojoblog.github.io/2023/02/12/java-mian-shi-ti-208-dao/Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E5%9B%BE.png" class><h4 id="39-Java中有哪些类加载器？"><a href="#39-Java中有哪些类加载器？" class="headerlink" title="39. Java中有哪些类加载器？"></a><strong>39. Java中有哪些类加载器？</strong></h4><p>JDK自带三个类加载器： <span style="color:blue;">**BootstrapClassLoader、ExtClassLoader、AppClassLoader **</span>。</p><blockquote><ul><li>BootstrapClassLoader是ExtClassLoader的父类加载器，默认负责加在 <strong>%JAVA_HOME%/lib</strong>下的jar包和class文件。</li><li>ExtClassLoader是AppClassLoader 的父类加载器，负责加载**%JAVA_HOME%/lib/ext**文件夹下的jar包和class文件。</li><li>AppClassLoader 是自定义类加载器的父类，负责加载<strong>classpath</strong>下的类文件。</li></ul></blockquote><h4 id="40-说说类加载器双亲委派模型？"><a href="#40-说说类加载器双亲委派模型？" class="headerlink" title="40. 说说类加载器双亲委派模型？"></a><strong>40. 说说类加载器双亲委派模型？</strong></h4><p>JVM中存在三个默认类加载器：</p><ol><li>BootstrapClassLoader</li><li>ExtClassLoader</li><li>AppClassLoader</li></ol><p>AppClassLoader 的父类加载器是ExtClassLoader，ExtClassLoader的父类加载器是BootstrapClassLoader。</p><blockquote><p>JVM在加载一个类时，会调用AppClassLoader 的loadClass方法来加载这个类。不过在这个方法中，会先调用ExtClassLoader的loadClass方法来加载类。同样，在ExtClassLoader的loadClass方法中会先使用BootstrapClassLoader来加载类。如果BootstrapClassLoader加载到了就直接成功，如果BootstrapClassLoader没有加载到，那么ExtClassLoader就会尝试自己加载该类，如果没有加载到，那么则会由AppClassLoader 来加载这个类。</p><p>所以，双亲委派指的是，JVM在加载类时，会委派给ExtClassLoader，ExtClassLoader进行加载，如果没有加载到才由自己进行加载。</p></blockquote><h4 id="41-Java中的数据结构有哪些？"><a href="#41-Java中的数据结构有哪些？" class="headerlink" title="41.Java中的数据结构有哪些？"></a><strong>41.Java中的数据结构有哪些？</strong></h4><ol><li>线性表（ArrayList）</li><li>链表（LinkedList)</li><li>栈（Stack）</li><li>队列（Queue）</li><li>图（Map）</li><li>树（Tree）</li></ol><h4 id="42-什么是OOP？"><a href="#42-什么是OOP？" class="headerlink" title="42. 什么是OOP？"></a><strong>42. 什么是OOP？</strong></h4><p>面向对象编程</p><h4 id="43-面向对象和面向过程的区别？"><a href="#43-面向对象和面向过程的区别？" class="headerlink" title="43. 面向对象和面向过程的区别？"></a><strong>43. 面向对象和面向过程的区别？</strong></h4><ol><li><p>面向过程：</p><p>一种较早的编程思想，顾名思义就是该思想是站在过程的角度考虑问题，强调的就是功能行为，功能的执行过程，即先后顺序，而每一个功能我们都使用函数（C语言中的称呼）把这些步骤一步步实现，依次调用函数就可以了。</p></li><li><p>面向对象：</p><p>一种基于面向过程的新编程思想，顾名思义就是该思想站在对象角度思考问题，我们把多个功能合理地放到不同对象里，强调的是具备某些功能的对象。</p><p>具备某些功能的实体，称为对象。面向对象最小的程序单元是：类。面向对象更加符合常规思维方式，稳定性好，可重用性强，易于开发大型软件产品，有良好的可维护性。</p><p>在软件工程上，面向对象可以使工程更加模块化，实现更低的耦合和更高的内聚。</p></li></ol><h4 id="44-什么是隐式转换，什么是显示转换？"><a href="#44-什么是隐式转换，什么是显示转换？" class="headerlink" title="44. 什么是隐式转换，什么是显示转换？"></a><strong>44. 什么是隐式转换，什么是显示转换？</strong></h4><blockquote><p>显示转换就是类型强转，把一个大类型的数据强制赋值给小类型的数据；</p><p>隐式转换就是大范围的变量能够接受小范围的数据；</p><p>隐式转换和显示转换其实就是自动类型转换和强制类型转换。</p></blockquote><h4 id="45-char类型能不能转成int类型？能不能转成String类型？能不能转成double类型？"><a href="#45-char类型能不能转成int类型？能不能转成String类型？能不能转成double类型？" class="headerlink" title="45. char类型能不能转成int类型？能不能转成String类型？能不能转成double类型？"></a><strong>45. char类型能不能转成int类型？能不能转成String类型？能不能转成double类型？</strong></h4><p>char在Java中是比较特殊的类型，它的int值是从1开始，一共有2的16次方个数据。</p><p>char&lt;int&lt;long&lt;float&lt;double，char类型可以隐式转成int，double类型，但是不能隐式转换成String；如果char类型要转成byte，short类型时，需要强转。</p><p><span style="color:red;"><strong>异常</strong></span></p><p><span style="color:red;"> 异常&nbsp;</span></p><p><span style="color:blue;">**异常&nbsp;**</span></p><p><span style="color:blue;">  异常&nbsp;</span></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试题 </tag>
            
            <tag> Java面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式</title>
      <link href="/jojoblog.github.io/2023/02/11/java-she-ji-mo-shi/"/>
      <url>/jojoblog.github.io/2023/02/11/java-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java常用的设计模式"><a href="#Java常用的设计模式" class="headerlink" title="Java常用的设计模式"></a>Java常用的设计模式</h1><h2 id="二、七种常用的设计模式"><a href="#二、七种常用的设计模式" class="headerlink" title="二、七种常用的设计模式"></a>二、七种常用的设计模式</h2><h3 id="1、单例模式"><a href="#1、单例模式" class="headerlink" title="1、单例模式"></a>1、单例模式</h3><h4 id="1-1-饿汉模式（最基本的单例模式）"><a href="#1-1-饿汉模式（最基本的单例模式）" class="headerlink" title="1.1 饿汉模式（最基本的单例模式）"></a>1.1 饿汉模式（最基本的单例模式）</h4><p>类加载时，会直接实例化单例对象，以后都返回该对象的引用。</p><ul><li>缺点：类加载时，会直接实例化单例对象，不管是否使用到该单例对象，浪费内存。</li><li>优点：<strong>没有枷锁</strong>，执行<strong>效率高</strong>，<strong>线程安全</strong>的实例。</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> Singleton<span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//创建本类的私有构造方法</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="1-2-懒汉模式"><a href="#1-2-懒汉模式" class="headerlink" title="1.2 懒汉模式"></a>1.2 懒汉模式</h4><p>不要直接在类加载时实例化，而是在调用方法时，再实例化。</p><ul><li>优点：不会占用内存</li><li>缺点：安全方面 单线程情况下，是安全的，但是在多线程下，多个线程可能同时执行singleton == null 都为true，会创建多个实例在内存中。</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>                <span class="token keyword">private</span> <span class="token keyword">static</span> LazySingleton singleton<span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">static</span> LazySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="1-2-1-双重检验模式"><a href="#1-2-1-双重检验模式" class="headerlink" title="1.2.1 双重检验模式"></a>1.2.1 双重检验模式</h5><p>懒汉模式(双重检验模式(线程安全，且效率高的) 把锁的粒度变小，只锁第一次初始化时)</p><ul><li>实例会在调用getInstance方法时创建，仅在第一调用初始化时需要锁住。</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>                <span class="token keyword">private</span> <span class="token keyword">static</span> LazySingleton singleton<span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">static</span> LazySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            双重检验            首先先判断实例是否为null，为null则使用synchronized锁住类，            然后在同步块中，再一次判断实例是否为null，为null则初始化实例。            synchronized(需要锁的对象){}        */</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">synchronized</span><span class="token punctuation">(</span>LazySingleton <span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                        singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-3-内部类实现模式"><a href="#1-3-内部类实现模式" class="headerlink" title="1.3 内部类实现模式"></a>1.3 内部类实现模式</h4><p>通过静态内部类，完成单例模式的创建。</p><ul><li>在外部类加载时，并不会加载内部类，也就是不会执行new 实例()，这属于懒加载。</li><li>只有第一次调用getInstance方法时，才会加载。</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerSingleton</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token function">InnerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>                <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> InnerSingleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">static</span> InnerSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> Inner<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="1-4-枚举实现"><a href="#1-4-枚举实现" class="headerlink" title="1.4 枚举实现"></a>1.4 枚举实现</h4><p>通过枚举创建 单例模式。</p><ul><li>实现单例的最佳方法。简洁，支持自动序列化机制，防止多次实例化，但目前还没有被广泛采用。</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumSingleton</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token function">EnumSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> SinEnum<span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//自定义的枚举值，如果没有该自定义枚举值，无法获取枚举对象</span>            SIN<span class="token punctuation">;</span>            <span class="token keyword">private</span> EnumSingleton es <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">static</span> EnumSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            SinEnum s <span class="token operator">=</span> SinEnum<span class="token punctuation">.</span>SIN<span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span>es<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="2、工厂模式"><a href="#2、工厂模式" class="headerlink" title="2、工厂模式"></a>2、工厂模式</h3><p>讲使用者和对象的生产者进行分离。</p><p>在工厂模式中，几乎都有三种角色，工厂(抽象工厂、具体工厂) 产品(抽象产品、具体产品) 使用者。使用者想要使用产品，不用自己去生产产品，把生产的动作交给工厂去做，使用者只需要从工厂提供产品的位置(方法)去拿就好。</p><h4 id="2-1-特点："><a href="#2-1-特点：" class="headerlink" title="2.1 特点："></a>2.1 <strong>特点：</strong></h4><ul><li><p>提供一种创建对象的最佳方式，在创建对象时不提供对外暴露创建逻辑，并且通过一个共同的接口来指向新创建的对象</p></li><li><p>定义一个创建对象的接口，让子类来决定实例化哪一个具体的工厂类，延迟到子类去执行</p></li><li><p>主要解决选择接口的问题</p></li><li><p>扩展性高，只增加相应工厂类即可，知道名称即可创建对象，屏蔽具体的实现，调用者只关心接口</p></li><li><p>增加需求时，需要增加具体类与工厂实现，导致类个数成倍增加，增加系统复杂度</p></li><li><p>只有需要生成复杂类对象时才需要使用工厂模式，且简单工厂模式不属于23种设计模式</p></li></ul><h4 id="工厂方法模式："><a href="#工厂方法模式：" class="headerlink" title="工厂方法模式："></a>工厂方法模式：</h4><h5 id="2-2-1-简单工厂"><a href="#2-2-1-简单工厂" class="headerlink" title="2.2.1 简单工厂"></a>2.2.1 简单工厂</h5><p> <strong>举例如下：（我们举一个发送邮件和短信的例子）</strong></p><p><strong>首先，创建二者的共同接口</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonAction</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>WomanFactory .java</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WomanFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PersonAction</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"woman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>ManFactory.java</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ManFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PersonAction</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>PersonFactory 工厂类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> PersonAction <span class="token function">eat</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"woman"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WomanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"man"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ManFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"输入类型不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>使用如下</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>    PersonFactory personFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PersonAction man <span class="token operator">=</span> personFactory<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    man<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PersonAction woman <span class="token operator">=</span> personFactory<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"woman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    woman<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li><strong>简单工厂模式</strong>–顾客需要给出清单。<br>变化点在产品对象上，所以我们会抽象产品，然后通过一个工厂，根据不同的情况产生不同的产品对象。</li><li><strong>工厂方法模式</strong>–根据工厂能产生什么顾客拿什么。<br>工厂可以产生统一品牌的商品，会根据商品去抽象工厂，对每一个产品，提供一个工厂实现类。</li><li><strong>抽象工厂模式</strong>–根据工厂能产生什么顾客拿什么，但是工厂能产生的产品会有多种品牌。<br>超级工厂，可以生产不同品牌的各种产品，抽象出超级工厂，也要抽象出产品，然后根据不同的品牌给出该品牌商品的工工厂实现类。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Java工厂模式 </tag>
            
            <tag> 懒汉式 </tag>
            
            <tag> 饿汉式 </tag>
            
            <tag> 抽象工厂 </tag>
            
            <tag> 工厂模式 </tag>
            
            <tag> 简单工厂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis轻松入门</title>
      <link href="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/"/>
      <url>/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>Redis:REmote DIctionary Server（远程字典服务器）</p><h3 id="Redis-启动、登陆、连接"><a href="#Redis-启动、登陆、连接" class="headerlink" title="Redis 启动、登陆、连接"></a>Redis 启动、登陆、连接</h3><h6 id="redis启动"><a href="#redis启动" class="headerlink" title="redis启动"></a>redis启动</h6><pre class=" language-linux"><code class="language-linux">redis-server 配置文件位置</code></pre><p>redis 连接</p><h6 id="Linux界面连接"><a href="#Linux界面连接" class="headerlink" title="Linux界面连接"></a>Linux界面连接</h6><pre class=" language-linux"><code class="language-linux">redis-cli -p 端口号 -a 密码</code></pre><h6 id="jedis连接"><a href="#jedis连接" class="headerlink" title="jedis连接"></a>jedis连接</h6><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//连接redis服务器，192.168.0.100:6379</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//权限认证</span>jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h3><p><strong>官网：</strong><a href="https://redis.io/topics/data-types-intro">Redis数据介绍</a></p><h4 id="Redis的五大数据类型"><a href="#Redis的五大数据类型" class="headerlink" title="Redis的五大数据类型"></a>Redis的五大数据类型</h4><ul><li>String（字符串）<ul><li>String是Redis最基本的数据类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</li><li>String类型是二进制安全的。意思是Redis的String可以包含任何数据，比如jpg图片或者序列化对象。</li><li>String类型是Redis最基本的数据类型，一个Redis中的字符串value最多可以是512M。</li></ul></li><li>Hash（哈希，类似于java里的Map）<ul><li>hash是一个键值对集合。</li><li>hash是一个String类型的filed和value的映射表，hash特别适合用于存储对象。</li><li>类似于Java里面的Map&lt;String,Object&gt;</li></ul></li><li>List（列表）<ul><li>列表是简单的字符串列表，按照插入的顺序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</li><li>他的底层实际是一个链表。</li></ul></li><li>Set（集合）<ul><li>Set是String类型的无需集合（无重复）。</li><li>它是通过HashTable实现的。</li></ul></li><li>Zset （sorted set：有序列表）<ul><li>Zset和set一样也是String类型元素的集合，切不允许重复的成员。</li><li>不同的是每个元素都会关联一个double类型的分数。</li><li>Redis正是通过分数类为集合中的成员进行从小到大的排序。</li><li>Zset的成员是唯一的，但是分数（score）却是可以重复。</li></ul></li></ul><h4 id="那里去获得Redis常见的数据类型"><a href="#那里去获得Redis常见的数据类型" class="headerlink" title="那里去获得Redis常见的数据类型"></a>那里去获得Redis常见的数据类型</h4><p><strong>官网：</strong><a href="http://redisdoc.com/">Redis命令参考大全</a></p><h4 id="Redis键（key）"><a href="#Redis键（key）" class="headerlink" title="Redis键（key）"></a>Redis键（key）</h4><h6 id="常用："><a href="#常用：" class="headerlink" title="常用："></a>常用：</h6><img src="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/%E5%9B%BE%E5%83%8F1-1661353194444.jpeg" class=""><h6 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h6><ul><li>keys*   </li><li>exists key的名字   判断某个key是否存在。</li><li>move    key db  ——&gt;当前库就没有了，被移除了。</li><li>expirte    key   秒钟  ：为当前的key设置过期时间。</li><li>ttl   key     查看还有多少秒过期，**-1** 表示永不过期， <strong>-2</strong> 表示已过期。</li><li>type key    查看你的key是什么类型。</li></ul><h4 id="Redis字符串（String）"><a href="#Redis字符串（String）" class="headerlink" title="Redis字符串（String）"></a>Redis字符串（String）</h4><h6 id="常用命令，更多请查阅官方文档"><a href="#常用命令，更多请查阅官方文档" class="headerlink" title="常用命令，更多请查阅官方文档"></a>常用命令，更多请查阅官方文档</h6><h6 id="Redis命令参考大全"><a href="#Redis命令参考大全" class="headerlink" title="Redis命令参考大全"></a><a href="http://redisdoc.com/">Redis命令参考大全</a></h6><img src="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/String%E5%B8%B8%E7%94%A8-1661353194444.jpeg" class=""><h6 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h6><p><strong>单值但value</strong></p><h6 id="案例：-1"><a href="#案例：-1" class="headerlink" title="案例："></a>案例：</h6><ul><li>set / get / del / append / strlen</li><li>incr / decr / incrby / decrby    一定是数字才能进行加减。</li><li>getrange / setrange <ul><li>getrange:获取指定区间范围内的值，类似between……and的关系</li><li>从零到负一表示全部</li><li><img src="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/getrange%E6%95%88%E6%9E%9C%E5%9B%BE-1661353194445.jpeg" class=""></li><li>setrange设置指定区间范围内的值，格式是setrange key值 具体值</li><li><img src="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/setrange%E6%95%88%E6%9E%9C%E5%9B%BE-1661353194445.jpeg" class=""></li></ul></li><li>setex(set with expire) 键秒值  /  sentx(set if not exist)<ul><li>setex:设置带过期时间的key，动态设置。</li><li>setex 键 秒值 真实值</li><li><img src="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/setex%E6%95%88%E6%9E%9C%E5%9B%BE-1661353194445.jpeg" class=""></li><li>setnx:只有在 key 不存在时设置 key 的值。</li><li><img src="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/setnx%E6%95%88%E6%9E%9C%E5%9B%BE-1661353194445.jpeg" class=""></li></ul></li><li>mset / mget / msetnx <ul><li>mset:同时设置一个或多个 key-value 对。</li><li><img src="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/mset%E6%95%88%E6%9E%9C%E5%9B%BE-1661353194445.jpeg" class=""></li><li>mget:获取所有(一个或多个)给定 key 的值。</li><li><img src="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/mget%E6%95%88%E6%9E%9C%E5%9B%BE-1661353194445.jpeg" class=""></li><li>msetnx:同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</li><li><img src="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/msetnx%E6%95%88%E6%9E%9C%E5%9B%BE-1661353194445.jpeg" class=""></li></ul></li><li>getset(先get 再set)<ul><li>getset:将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</li><li>简单一句话，先get然后立即set</li><li><img src="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/getset%E6%95%88%E6%9E%9C%E5%9B%BE-1661353194446.jpeg" class=""></li></ul></li></ul><h4 id="Redis列表（List）"><a href="#Redis列表（List）" class="headerlink" title="Redis列表（List）"></a>Redis列表（List）</h4><h4 id="Redis集合（Set）"><a href="#Redis集合（Set）" class="headerlink" title="Redis集合（Set）"></a>Redis集合（Set）</h4><h4 id="Redis哈希（Hash）"><a href="#Redis哈希（Hash）" class="headerlink" title="Redis哈希（Hash）"></a>Redis哈希（Hash）</h4><h4 id="Redis有序集合Zset（sorted-set）"><a href="#Redis有序集合Zset（sorted-set）" class="headerlink" title="Redis有序集合Zset（sorted set）"></a>Redis有序集合Zset（sorted set）</h4><h3 id="Redis的复制（Master-x2F-Slave）"><a href="#Redis的复制（Master-x2F-Slave）" class="headerlink" title="Redis的复制（Master/Slave）"></a>Redis的复制（Master/Slave）</h3><h4 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h4><p><strong>官 网：</strong> <a href="https://redis.io/topics/replication">Redis Replication 官网介绍  </a></p><p><strong>行话：</strong> 也就是我们所说的主从复制，主机数据更新后，根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。</p><h4 id="能干嘛？"><a href="#能干嘛？" class="headerlink" title="能干嘛？"></a>能干嘛？</h4><ul><li>读写分离</li><li>容灾恢复</li></ul><h4 id="怎么玩？"><a href="#怎么玩？" class="headerlink" title="怎么玩？"></a>怎么玩？</h4><ol><li>配从(库)不配主(库)</li><li>从库配置：slaveof主库IP主端口<ul><li>每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件</li><li>Info replication</li></ul></li><li>修改配置文件细节操作<ul><li>拷贝多个redis.conf文件</li><li>开启daemonize yes</li><li>Pid 文件名字</li><li>指定端口</li><li>Log 文件名字</li><li>Dump.rdb名字</li></ul></li><li>常用三招<ul><li>一主二仆<ul><li>init</li><li>一个Master两个Salve</li><li>日志查看</li><li>主从问题演示</li></ul></li><li>薪火相传<ul><li>上一个Salves可以是下一个Salve的Master，Salve同样可以接收其他的Salves的连接和同步请求，那么该Salves作为了链条中下一个的Master，可以有效减轻Master的写压力。</li><li>中途变更转向：会清除之前的数据，重新建立拷贝最新的。</li><li>Salveof 新主库IP 新主库端口</li></ul></li><li>反客为主<ul><li>SLAVEOF no one   使当前数据停止与其他数据库的同步，转为主数据库。</li></ul></li></ul></li></ol><h4 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h4><ol><li>Salve启动成功连接到master后会发送一个sync命令</li><li>Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到Salve，以完成下一次完全同步。</li><li>全量复制：而Salve服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li>增量复制：Master继续将新的所有收集到的修改命令一次传给Salve，完成同步。</li><li>但是，只要是重新连接Master，一次完全同步（全量复制）将被自动执行。</li></ol><h4 id="哨兵模式（Sentinel）"><a href="#哨兵模式（Sentinel）" class="headerlink" title="哨兵模式（Sentinel）"></a>哨兵模式（Sentinel）</h4><h6 id="是什么？-1"><a href="#是什么？-1" class="headerlink" title="是什么？"></a>是什么？</h6><p>反客为主的自动版，能够后台监控主机是否故障，如果故障了，根据投票数自动将从库装换为主库。</p><h6 id="怎么玩？-1"><a href="#怎么玩？-1" class="headerlink" title="怎么玩？"></a>怎么玩？</h6><ul><li>调整结构，6379带着80,81</li><li>自定义的/myredis目录下新建sentinel.conf文件[ touch sentinel.conf ]，<strong>名字绝对不能写错</strong></li><li>配置哨兵，填写内容<ul><li>sentinel monitor 被监控主机名字（自己起名字） IP地址  Redis服务端口 1</li><li>上面最后一个数字 <strong>1</strong>,表示主机挂掉后Salve投票看让谁接替成为主机，得票数多的</li></ul></li><li>启动哨兵<ul><li>Redis-sentinel  /myredis/sentinel.conf [ sentinel.conf文件所在的目录 ]</li><li>上述目录依据各自实际情况配置，可能目录不同</li></ul></li><li>正常主从演示</li><li>原有的Master挂了</li><li>投票新选</li><li>重新主从继续开工，info replication 查查看</li><li>问题：如果之前的Master重新回来，会不会冲突？</li></ul><p><strong>一组sentinel能同时监控多个Master</strong></p><h4 id="复制的缺点"><a href="#复制的缺点" class="headerlink" title="复制的缺点"></a>复制的缺点</h4><p><strong>复制延时：</strong>  由于所有的操作都是先在Master上操作，然后同步更新到Salve上，所以从Master同步到Salve机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Salve机器数量的增加也会是这个问题更加严重。 </p><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><p><strong>info replication  查看信息</strong></p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><img src="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/%E6%9F%A5%E7%9C%8Breplication%E4%BF%A1%E6%81%AF-1661353194446.jpg" class=""><p>开启主从复制后</p><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><img src="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/%E6%9F%A5%E7%9C%8Breplication%E4%BF%A1%E6%81%AF2-1661353194446.jpg" class=""><p><strong>SLAVEOF  127.0.0.1 6379 [ 主机ip地址  Redis服务端口]</strong>   用于开启主从复制</p><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><img src="/jojoblog.github.io/2022/08/24/redis-qing-song-ru-men/%E5%BC%80%E5%90%AF%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-1661353194446.jpg" class=""><h3 id="Spring-Boot整合Redis"><a href="#Spring-Boot整合Redis" class="headerlink" title="Spring Boot整合Redis"></a>Spring Boot整合Redis</h3><h6 id="加入以下依赖"><a href="#加入以下依赖" class="headerlink" title="加入以下依赖"></a>加入以下依赖</h6><pre class=" language-xml"><code class="language-xml">      <span class="token comment" spellcheck="true">&lt;!-- spring2.X集成redis所需common-pool2--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h6 id="编写redis的置文件"><a href="#编写redis的置文件" class="headerlink" title="编写redis的置文件"></a>编写redis的置文件</h6><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#Redis服务器地址</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.44.168</span><span class="token comment" spellcheck="true">#Redis服务器连接端口</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token comment" spellcheck="true">#Redis数据库索引（默认为0）</span><span class="token attr-name">spring.redis.database</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true">#连接超时时间（毫秒）</span><span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span><span class="token attr-value">1800000</span><span class="token comment" spellcheck="true">#连接池最大连接数（使用负值表示没有限制）</span><span class="token attr-name">spring.redis.lettuce.pool.max-active</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token comment" spellcheck="true">#最大阻塞等待时间(负数表示没限制)</span><span class="token attr-name">spring.redis.lettuce.pool.max-wait</span><span class="token punctuation">=</span><span class="token attr-value">-1</span><span class="token comment" spellcheck="true">#连接池中的最大空闲连接</span><span class="token attr-name">spring.redis.lettuce.pool.max-idle</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token comment" spellcheck="true">#连接池中的最小空闲连接</span><span class="token attr-name">spring.redis.lettuce.pool.min-idle</span><span class="token punctuation">=</span><span class="token attr-value">0</span></code></pre><h6 id="创建redis的配置类RedisConfig-java"><a href="#创建redis的配置类RedisConfig-java" class="headerlink" title="创建redis的配置类RedisConfig.java"></a>创建redis的配置类RedisConfig.java</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>CacheManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>CachingConfigurerSupport<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableCaching<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>RedisSerializationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>RedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">;</span><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisSerializer<span class="token operator">&lt;</span>String<span class="token operator">></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//key序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//value序列化</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//value hashmap序列化</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CacheManager <span class="token function">cacheManager</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisSerializer<span class="token operator">&lt;</span>String<span class="token operator">></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解决查询缓存转换异常的问题</span>        ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 配置序列化（解决乱码的问题）,过期时间600秒</span>        RedisCacheConfiguration config <span class="token operator">=</span> RedisCacheConfiguration<span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisCacheManager cacheManager <span class="token operator">=</span> RedisCacheManager<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="使用redis"><a href="#使用redis" class="headerlink" title="使用redis"></a>使用redis</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>script<span class="token punctuation">.</span>DefaultRedisScript<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/redisTest"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"testLockLua"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLockLua</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 声明一个uuid ,将做为一个value 放入我们的key所对应的值中</span>        String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 定义一个锁：lua 脚本可以使用同一把锁，来实现删除！</span>        String skuId <span class="token operator">=</span> <span class="token string">"25"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 访问skuId 为25号的商品 100008348542</span>        String locKey <span class="token operator">=</span> <span class="token string">"lock:"</span> <span class="token operator">+</span> skuId<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 锁住的是每个商品的数据</span>        <span class="token comment" spellcheck="true">// 3 获取锁</span>        Boolean lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>locKey<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第一种： lock 与过期时间中间不写任何的代码。</span>        <span class="token comment" spellcheck="true">// redisTemplate.expire("lock",10, TimeUnit.SECONDS);//设置过期时间</span>        <span class="token comment" spellcheck="true">// 如果true</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 执行的业务逻辑开始</span>            <span class="token comment" spellcheck="true">// 获取缓存中的num 数据</span>            Object value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果是空直接返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 不是空 如果说在这出现了异常！ 那么delete 就删除失败！ 也就是说锁永远存在！</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使num 每次+1 放入缓存</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*使用lua脚本来锁*/</span>            <span class="token comment" spellcheck="true">// 定义lua 脚本</span>            String script <span class="token operator">=</span> <span class="token string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用redis执行lua执行</span>            DefaultRedisScript<span class="token operator">&lt;</span>Long<span class="token operator">></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redisScript<span class="token punctuation">.</span><span class="token function">setScriptText</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置一下返回值类型 为Long</span>            <span class="token comment" spellcheck="true">// 因为删除判断的时候，返回的0,给其封装为数据类型。如果不封装那么默认返回String 类型，</span>            <span class="token comment" spellcheck="true">// 那么返回字符串与0 会有发生错误。</span>            redisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 第一个要是script 脚本 ，第二个需要判断的key，第三个就是key所对应的值。</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>locKey<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 其他线程等待</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 睡眠</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 睡醒了之后，调用方法。</span>                <span class="token function">testLockLua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"testLock"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1获取锁，setne</span>        Boolean lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">,</span> uuid<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2获取锁成功、查询num的值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>            Object value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.1判断num为空return</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//2.2有值就转成成int</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.3把redis的num加1</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.4释放锁，del</span>            <span class="token comment" spellcheck="true">//判断比较uuid值是否一样</span>            String lockUuid <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lockUuid<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3获取锁失败、每隔0.1秒再获取</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> String <span class="token function">testRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置值到redis</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从redis获取值</span>        String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Redis配置 </tag>
            
            <tag> Redis哨兵模式 </tag>
            
            <tag> Redis主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis事务与数据源</title>
      <link href="/jojoblog.github.io/2022/08/23/mybatis-shi-wu-yu-shu-ju-yuan/"/>
      <url>/jojoblog.github.io/2022/08/23/mybatis-shi-wu-yu-shu-ju-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="transactionManager"><a href="#transactionManager" class="headerlink" title="transactionManager"></a>transactionManager</h2><p>transactionManager：mybatis提交事务，回顾事务的方式</p><p>​type：事务处理的类型</p><p>​1）JDBC：表示mybatis底层是调用JDBC中的Connection对象的，commit，rollback</p><p>​2）MANAGED：把mybatis的事务处理委托给其他的容器（一个服务器软件，一个框架（Spring））</p><h2 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h2><p>DataSource：表示数据源，java体系中，规定了javax.sql.DataSource都是数据源，数据源都是connection对象</p><p>​type用来指定数据源的类型</p><p>​1）POOLED：使用连接池，mybatis会创建 PooledDataSource 类</p><p>​2）UPOOLED: 不使用连接池，每次执行 sql 的时候，先创建连接，再使用连接，最后关闭连接。</p><p>​不使用连接池，mybatis会创建一个 UnPooledDataSource 来管理 connection 对象的使用</p>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> MyBatis事务 </tag>
            
            <tag> MyBatis数据源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaIO流</title>
      <link href="/jojoblog.github.io/2022/08/23/javaio-liu/"/>
      <url>/jojoblog.github.io/2022/08/23/javaio-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、IO流"><a href="#一、IO流" class="headerlink" title="一、IO流"></a>一、IO流</h1><h2 id="IO流的概述和分类"><a href="#IO流的概述和分类" class="headerlink" title="IO流的概述和分类"></a>IO流的概述和分类</h2><h3 id="IO流概述"><a href="#IO流概述" class="headerlink" title="IO流概述"></a>IO流概述</h3><ul><li><p>IO：输入/输出（Input / Ouput）</p></li><li><p>​      流：是一种抽象概念，是对数据传输的总称。也就是说数据在设备间的传输称为流，流的本质是数据传输。</p></li><li><p>​       IO流就是用来处理设备间数据传输问题的</p><p>​                  常见的应用：文件复制，文件上传，文件下载</p></li></ul><h3 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a>IO流的分类</h3><ul><li><p>按照数据的流向</p><p>​输入流：读数据</p><p>​输出流：写数据</p></li><li><p>按照数据的类型</p><p>​字节流</p><p>​字节输入流  ； 字节输出流</p><p>​字符流</p><p>​字符输入流  ； 字符输出流</p><p>一般来说，我们说的IO流分类是按照数据类型来分的</p></li></ul><h2 id="各种IO流"><a href="#各种IO流" class="headerlink" title="各种IO流"></a>各种IO流</h2><h3 id="1、File类"><a href="#1、File类" class="headerlink" title="1、File类"></a>1、File类</h3><h4 id="File类的构造方法"><a href="#File类的构造方法" class="headerlink" title="File类的构造方法"></a>File类的构造方法</h4><ul><li>File（String  pathname）                    通过将给定的路径字符串装换为抽象的路径名来创建新的File实例</li><li>File（String  parent，String child）    从父路径名字符串和子路径名字符串创建新的File实例</li><li>File  （File parent，String  child）       从父抽象路径和子路径名字字符串创建新的File实例</li></ul><h4 id="File类的创建功能"><a href="#File类的创建功能" class="headerlink" title="File类的创建功能"></a>File类的创建功能</h4><ul><li>public boolean createNewFile()           当具有该名称的文件不存在时，创建一个由该抽象路径命名的新空文件</li><li>public boolean mkdir()                          创建此抽象路径名命名的目录</li><li>public boolean mkdirs()                          创建由此抽象路径命名的目录，包括任何必需但不存在的父目录</li></ul><p>注意：不能根据路径名判断是否是路径还是文件，应该根据调用的方法判断</p><h4 id="File类的判断和获取功能"><a href="#File类的判断和获取功能" class="headerlink" title="File类的判断和获取功能"></a>File类的判断和获取功能</h4><ul><li>public boolean isDirectory()                  测试此抽象路径名表示的 File 是否为目录</li><li>public boolean isFile()                             测试此抽象路径名表示的File是否为文件</li><li>public boolean exists()                            测试此抽象路径名表示的File是否存在</li><li>public String  getAbsolutePath()             返回此抽象路径名的绝对路径名字符串</li><li>public String  getPath()                            将此路径名转化为路径名字符串</li><li>public String  getName()                          返回此抽象路径名表示的文件或目录的名称</li><li>public  String[]  list                                    返回此抽象路径名表示的目录中的文件和目录的名称的字符串数组</li><li>public File[]  listFiles()                                返回此抽象路径名表示的文件和目录的File对象数组</li></ul><h4 id="File-类的删除功能"><a href="#File-类的删除功能" class="headerlink" title="File 类的删除功能"></a>File 类的删除功能</h4><ul><li>public boolean delete()                            删除由此路径名表示的文件或者目录</li></ul><p>注意：如果是删除目录，目录中存在你内容，应该先删除内部文件 ，在删除目录</p><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>递归概述：以编程的角度来看，递归是指方法定义中调用方法本身的现象</p><p>递归解决问题的思路：</p><p>把一个复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解。递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算。</p><p>递归要解决问题要找到两个内容：</p><ul><li><p>递归出口 ： 否则会出现内存溢出</p></li><li><p>递归规则 ： 与原问题相似的规模较小的问题</p><p>用递归求阶乘</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">File_text5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用方法</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">jc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5 的阶乘是："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用于递归求阶乘，参数为一个int类型的变量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">jc</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在方法内判断该变量的值是否为 1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//是，返回 1</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//不是，返回 n*(n-1)</span>            <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token function">jc</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果</span><span class="token comment" spellcheck="true">//5 的阶乘是：120</span></code></pre></li></ul><h5 id="案例：遍历文件目录"><a href="#案例：遍历文件目录" class="headerlink" title="案例：遍历文件目录"></a>案例：遍历文件目录</h5><ul><li><p>需求：给定一个路径（D:\\itcast），请通过递归完成遍历该目录下的所有内容，并把所有文件的绝对路径输出在控制台</p><p>思路：</p><ol><li><p>根据给定的路径创建一个File对象</p></li><li><p>定义一个方法，用于获取给定目录下的所有内容，参数为第1步创建的File对象</p></li><li><p>获取给定的File目录下所有文件或者目录的File数组</p></li><li><p>遍历该File数组，得到每一个File对象</p></li><li><p>判断该File对象是否是目录</p><p>​是：递归调用</p><p>​不是：获取绝对路径输出在控制台</p></li><li><p>调用方法</p></li></ol></li><li><p>代码块</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> itheima<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">File_text6</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据给定的路径创建一个File对象</span>        File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\itcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法</span>        <span class="token function">getAllFilePath</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个方法，用于获取给定目录下的内容，参数为第1步创建的File对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getAllFilePath</span><span class="token punctuation">(</span>File srcFile<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取给定的File目录下所有文件或者目录的File数组</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> fileArray  <span class="token operator">=</span> srcFile<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历该File数组，得到每一个File对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileArray <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> fileArray<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断该File对象是否是目录</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//是：递归调用</span>                    <span class="token function">getAllFilePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//不是：获取绝对路径输出在控制台</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果</span><span class="token comment" spellcheck="true">//D:\itcast\java.txt</span><span class="token comment" spellcheck="true">//D:\itcast\javaSE\javase.txt</span><span class="token comment" spellcheck="true">//D:\itcast\javase.txt</span></code></pre></li></ul><pre><code></code></pre><h3 id="2、字节流"><a href="#2、字节流" class="headerlink" title="2、字节流"></a>2、字节流</h3><h4 id="字节流写数据"><a href="#字节流写数据" class="headerlink" title="字节流写数据"></a>字节流写数据</h4><h5 id="字节流抽象基类"><a href="#字节流抽象基类" class="headerlink" title="字节流抽象基类"></a>字节流抽象基类</h5><ul><li>InputStream： 这个抽象类是表示字节输入流的所有类的超类</li><li>OutputStream： 这个抽象类是表示字节输出流的所有类的超类</li><li>子类名特点：子类名称都是以其父类名作为子类名的后缀</li></ul><h5 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h5><ul><li>FileOutputStream：文件输出流用于数据写入File</li><li>FileOutputStream（String   name）：   创建文件输出流以指定的名称写入文件</li></ul><h5 id="使用字节输出流写数据的步骤"><a href="#使用字节输出流写数据的步骤" class="headerlink" title="使用字节输出流写数据的步骤"></a>使用字节输出流写数据的步骤</h5><ul><li>创建字节输出流对象（调用系统功能创建了文件，创建字节输出流对象，让字节输出流对象指向文件）</li><li>调用字节输出流对象的写数据方法</li><li>释放资源（关闭此文件输出流并释放与此流相关联的任何系统资源）</li></ul><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputStream1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建字节输出流对象</span>        <span class="token comment" spellcheck="true">//FileOutputStream(String   name)：   创建文件输出流以指定的名称写入文件</span>        FileOutputStream  fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\JAVAdaima\\myfile\\src\\fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            做了三件事：                A：调用系统功能创建了文件                B：创建了字节输出流对象                C：让字节输出流对象指向创建好的文件        */</span>        <span class="token comment" spellcheck="true">//void  write (int b) : 将指定的字节写入此文件输出流中</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        fos.write(57);</span><span class="token comment" spellcheck="true">//        fos.write(55);</span>        <span class="token comment" spellcheck="true">//最后都要释放资源</span>        <span class="token comment" spellcheck="true">//void close () : 关闭此文件输出流并释放与此流相关联的任何系统资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="字节流写数据的3种方式"><a href="#字节流写数据的3种方式" class="headerlink" title="字节流写数据的3种方式"></a>字节流写数据的3种方式</h5><ul><li><p>void  write(int b)     将指定的字节写入此文件输出流，一次写入一个字节数据</p></li><li><p>void  write(byte[]  b)      将b.length字节从指定的字节数组写入此文件输出流，一次写一个字节数组数据</p></li><li><p>void   write(byte[]  b, int off ,int len)    将len字节从指定的字节数组开始，从偏移量off开始写入此文件输出流，一次写入一个字节数组的部分数据</p></li><li><p>代码块</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//FileOutputStream (String name) : 创建文件输出流以指定的名称写入文件</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\JAVAdaima\\MYByteStream\\fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//new File(name)</span><span class="token comment" spellcheck="true">//        FileOutputStream fos = new FileOutputStream(new File("MYByteStream\\fos.txt"));</span><span class="token comment" spellcheck="true">//        File file = new File("MYByteStream\\fos.txt");</span><span class="token comment" spellcheck="true">//        FileOutputStream fos2= new FileOutputStream(file);</span><span class="token comment" spellcheck="true">//        FileOutputStream fos2 = new FileOutputStream(new File("MYByteStream\\fos.txt"));</span>        <span class="token comment" spellcheck="true">//void  write(int b)     将指定的字节写入此文件输出流</span><span class="token comment" spellcheck="true">//        fos.write(97);</span><span class="token comment" spellcheck="true">//        fos.write(98);</span><span class="token comment" spellcheck="true">//        fos.write(99);</span><span class="token comment" spellcheck="true">//        fos.write(100);</span><span class="token comment" spellcheck="true">//        fos.write(101);</span>        <span class="token comment" spellcheck="true">//void  write(byte[]  b)      将b.length字节从指定的字节数组写入此文件输出流</span><span class="token comment" spellcheck="true">//        byte[] bys =  {97,98,99,100,101};</span>        <span class="token comment" spellcheck="true">//byte[]   getBytes()  :  返回字符串对应的字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        fos.write(bys);</span>        <span class="token comment" spellcheck="true">//void   write(byte[]  b, int off ,int len)    将len字节从指定的字节数组开始，从偏移量off开始写入此文件输出流</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>bys<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//释放资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="字节流写数据的个小问题"><a href="#字节流写数据的个小问题" class="headerlink" title="字节流写数据的个小问题"></a>字节流写数据的个小问题</h5><h6 id="字节流写数据如何换行"><a href="#字节流写数据如何换行" class="headerlink" title="字节流写数据如何换行"></a>字节流写数据如何换行</h6><ul><li><p>写完数据后，加换行符</p><pre><code>Windows：\r\n</code></pre><p>​Linux：  \n</p><p>​Mac：\r</p></li></ul><h6 id="字节流写数据如何实现追加写入"><a href="#字节流写数据如何实现追加写入" class="headerlink" title="字节流写数据如何实现追加写入"></a>字节流写数据如何实现追加写入</h6><ul><li><p>​ public  FileOutputStream(String   name  ，boolean   append)</p></li><li><p>创建文件输出流以指定的名称写入文件。如果第二个参数为 true  ,则字节将写入文件的末尾而不是开头</p></li><li><p>代码块</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建字节输出流对象</span><span class="token comment" spellcheck="true">//        FileOutputStream fos = new FileOutputStream("D:\\JAVAdaima\\MYByteStream\\fos.txt");</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\JAVAdaima\\MYByteStream\\fos.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="字节流写数据加异常处理"><a href="#字节流写数据加异常处理" class="headerlink" title="字节流写数据加异常处理"></a>字节流写数据加异常处理</h5><ul><li><p>finally：在异常处理时提供finally块来执行所有清除操作。比如说IO流中的释放资源</p></li><li><p>特点：被finally控制的语句一定会执行，除非JVM退出</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    可能出现异常的代码；<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">{</span>    异常的处理代码；<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    执行所有的清除操作；<span class="token punctuation">}</span></code></pre></li></ul><h6 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建字节输出流对象</span>        FileOutputStream fos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\JAVAdaima\\MYByteStream\\fos.txt"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fos <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="字节流读数据"><a href="#字节流读数据" class="headerlink" title="字节流读数据"></a>字节流读数据</h4><h5 id="字节流读数据（一次读取一个字节）"><a href="#字节流读数据（一次读取一个字节）" class="headerlink" title="字节流读数据（一次读取一个字节）"></a>字节流读数据（一次读取一个字节）</h5><ul><li><p>FileInputStream  ： 从文件系统中的文件获取输入字节</p></li><li><p>FileInputStream(String  name) :    通过打开与实际文件的链接来创建一个FileInputStream，该文件由文件系统中的路径名 name 命名</p></li><li><p>代码块</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建字节输入流对象</span>        <span class="token comment" spellcheck="true">//FileInputStream(String name)</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\JAVAdaima\\MYByteStream\\fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用字节输入流对象的读数据方法</span>        <span class="token comment" spellcheck="true">//int read()  ：  从该输入流读取一个字符串的数据</span>        <span class="token comment" spellcheck="true">/*        //第一次读数据        int by  = fis.read();        System.out.println(by);        System.out.println((char)by);        //第二次读数据        by  = fis.read();        System.out.println(by);        System.out.println((char)by);        //再多读两次        by  = fis.read();        System.out.println(by);        by  = fis.read();        System.out.println(by);        //如果到达文件的末尾：-1        */</span>        <span class="token comment" spellcheck="true">/*        int by = fis.read();        while (by != -1) {            System.out.print((char) by);            by = fis.read();        }        */</span>        <span class="token comment" spellcheck="true">//优化上面的程序</span>        <span class="token keyword">int</span> by<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            fis.read() : 读数据            by=fis.read()  :  把读到的数据赋值给by            by ！= -1    ： 判断读取到的数据是否是 -1         */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>by <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="字节流读数据（一次读取一个字节数组）"><a href="#字节流读数据（一次读取一个字节数组）" class="headerlink" title="字节流读数据（一次读取一个字节数组）"></a>字节流读数据（一次读取一个字节数组）</h5><h6 id="代码块-1"><a href="#代码块-1" class="headerlink" title="代码块"></a>代码块</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A003</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建字节输入流对象</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\JAVAdaima\\MYByteStream\\fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用字节输出流对象的读取数据方法</span>        <span class="token comment" spellcheck="true">//int read (byte[] b) : 从该输入流读取最多 b.length 个字节的数据到一个字节数组</span>        <span class="token comment" spellcheck="true">/*        byte[] bys = new byte[5];        //第一次读取数据        int len = fis.read(bys);        System.out.println(len);        //String (byte[] bytes)        System.out.println(new String(bys, 0, len));        //第二次读取数据        len = fis.read(bys);        System.out.println(len);        System.out.println(new String(bys, 0, len));        //第三次读取数据        len = fis.read(bys);        System.out.println(len);        System.out.println(new String(bys, 0, len));        //再多读取两次        len = fis.read(bys);        System.out.println(len);        len = fis.read(bys);        System.out.println(len);         */</span>        <span class="token comment" spellcheck="true">//优化代码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><h5 id="字节缓冲流-1"><a href="#字节缓冲流-1" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h5><ul><li>BufferOutputStream    :  该类实现缓冲输出流。通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统被调用</li><li>BufferInputStream  ：    创建 BufferInputStream  将创建一个内部缓冲区数组，当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次填充很多字节</li></ul><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><ul><li>字节缓冲输出流  ：   BufferedOutputStream( OutputStream  out)</li><li>字节缓冲输入流   ：   BufferedInputStream( InputStream   in)</li></ul><h6 id="为什么构造方法需要的是字节流？而不是具体点的文件或者路径？"><a href="#为什么构造方法需要的是字节流？而不是具体点的文件或者路径？" class="headerlink" title="为什么构造方法需要的是字节流？而不是具体点的文件或者路径？"></a>为什么构造方法需要的是字节流？而不是具体点的文件或者路径？</h6><ul><li>​    字节缓冲流仅仅提供缓冲区，而真正的读写数据还得依靠基本的字节流对象进行操作</li></ul><h6 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima4<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ACS1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        // 字节缓冲输出流： BufferedOutputStream(OutputStream out)//        FileOutputStream fos = new FileOutputStream("D:\\JAVAdaima\\MYByteStream\\fos1.txt");//        BufferedOutputStream bos = new BufferedOutputStream(fos);        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("D:\\JAVAdaima\\MYByteStream\\fos1.txt"));        //写数据        bos.write("Hello\r\n".getBytes());        bos.write("World\r\n".getBytes());        //释放资源        bos.close();         */</span>        <span class="token comment" spellcheck="true">//字节缓冲输入流：BufferedInputStream( InputStream in)</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\JAVAdaima\\MYByteStream\\fos1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//一次读取一个字节数据</span>        <span class="token keyword">int</span> by<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>by <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//一次读取一个字节数组的数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放资源</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="案例：字节流复制文本文件"><a href="#案例：字节流复制文本文件" class="headerlink" title="案例：字节流复制文本文件"></a>案例：字节流复制文本文件</h5><h6 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h6><p>把 “ D:\itcast\java.txt “ 复制到模块目录下的  “ java.txt “ </p><h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><ol><li><p>复制文本文件，其实就是把文本文件的内容从文件中读取出来( 数据源 ) ，然后写入另一个文本文件中 ( 目的地 )</p></li><li><p>数据源：</p><pre><code>D:\\itcast\\java.txt  ------读数据-----InputStream------FileInputStream</code></pre></li><li><p>目的地：</p><pre><code>MYByteStream\\java.txt-----写数据-----OutputStream------FileOutputStream</code></pre></li></ol><h6 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h6><ul><li>根据数据源创建字节输入流对象</li><li>根据目的地创建字节输出流对象</li><li>读写数据，复制文本文件（ 一次读取一个字节 ， 一次写入一个字节）</li><li>释放资源</li></ul><h6 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A002</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据数据源创建字节输入流对象</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\itcast\\java.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据目的地创建字节输出流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\JAVAdaima\\MYByteStream\\src\\java.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读写数据，复制文本文件（ 一次读取一个字节 ， 一次写入一个字节）</span>        <span class="token keyword">int</span> by<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>by<span class="token operator">=</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="案例：字节流复制图片"><a href="#案例：字节流复制图片" class="headerlink" title="案例：字节流复制图片"></a>案例：字节流复制图片</h5><h6 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h6><p>把 “ D:\\itcast\\511.png “  复制到模块目录下的  “ 511.png”</p><h6 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h6><ul><li>根据数据源创建字节输入流对象</li><li>根据目的地创建字节输出流对象</li><li>读写数据，复制文本文件（ 一次读取一个字节数组 ， 一次写入一个字节数组）</li><li>释放资源</li></ul><h6 id="代码块-2"><a href="#代码块-2" class="headerlink" title="代码块"></a>代码块</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A004</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据数据源创建字节输入流对象</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\itcast\\511.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据目的地创建字节输出流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\JAVAdaima\\MYByteStream\\511.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读写数据，复制图片(一次读取一个字节数组， 一次写入一个字节数组)</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="案例：复制视频"><a href="#案例：复制视频" class="headerlink" title="案例：复制视频"></a>案例：复制视频</h5><h6 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h6><p>把  “ D:\\itcast\\123.avi”  复制到模块目录下的  “ 123.avi “</p><h6 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h6><ul><li>根据数据源创建字节输入流对象</li><li>根据目的地创建字节输出流对象</li><li>读写数据，复制视频</li><li>释放资源</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/jojoblog.github.io/2022/08/23/mysql-suo-yin/"/>
      <url>/jojoblog.github.io/2022/08/23/mysql-suo-yin/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h1><p>[TOC]</p><h2 id="一、数据库性能下降的问题"><a href="#一、数据库性能下降的问题" class="headerlink" title="一、数据库性能下降的问题"></a>一、数据库性能下降的问题</h2><h3 id="数据库性能下降的表现"><a href="#数据库性能下降的表现" class="headerlink" title="数据库性能下降的表现"></a>数据库性能下降的表现</h3><ol><li>SQL慢</li><li>执行时间长</li><li>等待时间长</li></ol><h3 id="数据库性能下降的原因"><a href="#数据库性能下降的原因" class="headerlink" title="数据库性能下降的原因"></a>数据库性能下降的原因</h3><ol><li><p>查询数据过多</p></li><li><p>关联了太多的表，太多<strong>join</strong></p></li><li><p>没有利用索引</p><ol><li><p>单值索引</p></li><li><p>复合索引</p><p>条件多时，可以建共同索引（混合索引）。混合索引一般会优先使用。</p><p>有些情况下，索引不一定会被使用</p></li></ol></li><li><p>服务器调优以及各个参数设置（缓冲、线程数等）**[不重要，由专门DBA负责]**</p></li></ol><h2 id="二、常见的Join查询"><a href="#二、常见的Join查询" class="headerlink" title="二、常见的Join查询"></a>二、常见的Join查询</h2><h3 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h3><h4 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h4><img src="/jojoblog.github.io/2022/08/23/mysql-suo-yin/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E5%9B%BE.jpg" class=""><h4 id="机读"><a href="#机读" class="headerlink" title="机读"></a>机读</h4><p><span style="color:red;font-size:20px;">注意：</span>  不同版本的SQL的执行顺序会有所不同</p><img src="/jojoblog.github.io/2022/08/23/mysql-suo-yin/SQL%E6%9C%BA%E8%AF%BB%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E5%9B%BE.jpg" class=""><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><img src="/jojoblog.github.io/2022/08/23/mysql-suo-yin/SQL%E8%A7%A3%E6%9E%90%E5%9B%BE.jpg" class=""><h3 id="Join图"><a href="#Join图" class="headerlink" title="Join图"></a>Join图</h3><h4 id="joins图"><a href="#joins图" class="headerlink" title="joins图"></a>joins图</h4><h4 id="共有与独有"><a href="#共有与独有" class="headerlink" title="共有与独有"></a>共有与独有</h4><h5 id="共有"><a href="#共有" class="headerlink" title="共有"></a>共有</h5><p>满足 students.id = classes.stuid 的叫共有</p><h5 id="独有"><a href="#独有" class="headerlink" title="独有"></a>独有</h5><p>student表中所有不满足 students.id = classes.stuid 的叫连接关系的数据</p><h3 id="建表SQL"><a href="#建表SQL" class="headerlink" title="建表SQL"></a>建表SQL</h3><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE `t_dept` ( `id` INT(11) NOT NULL AUTO_INCREMENT, `deptName` VARCHAR(30) DEFAULT NULL, `address` VARCHAR(40) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; CREATE TABLE `t_emp` ( `id` INT(11) NOT NULL AUTO_INCREMENT, `name` VARCHAR(20) DEFAULT NULL,  `age` INT(3) DEFAULT NULL, `deptId` INT(11) DEFAULT NULL, PRIMARY KEY (`id`), KEY `fk_dept_id` (`deptId`) #CONSTRAINT `fk_dept_id` FOREIGN KEY (`deptId`) REFERENCES `t_dept` (`id`)) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;   INSERT INTO t_dept(deptName,address) VALUES('华山','华山');INSERT INTO t_dept(deptName,address) VALUES('丐帮','洛阳');INSERT INTO t_dept(deptName,address) VALUES('峨眉','峨眉山');INSERT INTO t_dept(deptName,address) VALUES('武当','武当山');INSERT INTO t_dept(deptName,address) VALUES('明教','光明顶'); INSERT INTO t_dept(deptName,address) VALUES('少林','少林寺'); INSERT INTO t_emp(NAME,age,deptId) VALUES('风清扬',90,1);INSERT INTO t_emp(NAME,age,deptId) VALUES('岳不群',50,1);INSERT INTO t_emp(NAME,age,deptId) VALUES('令狐冲',24,1);  INSERT INTO t_emp(NAME,age,deptId) VALUES('洪七公',70,2);INSERT INTO t_emp(NAME,age,deptId) VALUES('乔峰',35,2); INSERT INTO t_emp(NAME,age,deptId) VALUES('灭绝师太',70,3);INSERT INTO t_emp(NAME,age,deptId) VALUES('周芷若',20,3);   INSERT INTO t_emp(NAME,age,deptId) VALUES('张三丰',100,4); INSERT INTO t_emp(NAME,age,deptId) VALUES('张无忌',25,5); INSERT INTO t_emp(NAME,age,deptId) VALUES('韦小宝',18,null); </code></pre><h3 id="7种JOIN"><a href="#7种JOIN" class="headerlink" title="7种JOIN"></a>7种JOIN</h3><pre class=" language-mysql"><code class="language-mysql"> # 1 A、B两表共有select * from t_emp a inner join t_dept b on a.deptId = b.id; # 2 A、B两表共有+A的独有select * from t_emp a left join t_dept b on a.deptId = b.id; # 3 A、B两表共有+B的独有 select * from t_emp a right join t_dept b on a.deptId = b.id; # 4 A的独有 select * from t_emp a left join t_dept b on a.deptId = b.id where b.id is null;  # 5 B的独有select * from t_emp a right join t_dept b on a.deptId = b.id where a.deptId is null;   # 6 AB全有#MySQL Full Join的实现 因为MySQL不支持FULL JOIN,下面是替代方法 #left join + union(可去除重复数据)+ right joinSELECT * FROM t_emp A LEFT JOIN t_dept B ON A.deptId = B.idUNIONSELECT * FROM t_emp A RIGHT JOIN t_dept B ON A.deptId = B.id#这里因为要联合的缘故，不能考虑到小表驱动大表的情况。只能用right join。要保证查询出来的数字要一致。# 7 A的独有+B的独有        * FROM t_emp A LEFT JOIN t_dept B ON A.deptId = B.id WHERE B.`id` IS NULLUNIONSELECT * FROM t_emp A RIGHT JOIN t_dept B ON A.deptId = B.id WHERE A.`deptId` IS NULL;</code></pre><h3 id="子查询与Join区别："><a href="#子查询与Join区别：" class="headerlink" title="子查询与Join区别："></a>子查询与Join区别：</h3><h4 id="思想上的区别："><a href="#思想上的区别：" class="headerlink" title="思想上的区别："></a>思想上的区别：</h4><h5 id="子查询理解："><a href="#子查询理解：" class="headerlink" title="子查询理解："></a>子查询理解：</h5><p>①先知道需要查询并将数据拿出来(若from 后的表也是一个子查询结果)。②在去寻找满足判断条件的数据(where,on,having 后的参数等)。而这些查询条件通常是通过子查询获得的。</p><p>子查询是一种根据结果找条件的倒推的顺序。比较好理解与判断<br>例题中：“人物”在t_emp 表中，所以第一个from 是t_emp 表。(也可以直接将子查询方法 from 后面(因为本题中的子查询中也有select 的数据),所以任然需要上述的推导过程)</p><h5 id="join理解："><a href="#join理解：" class="headerlink" title="join理解："></a>join理解：</h5><p>执行完第一步后的结果为一张新表。在将新表与 t_emp 进行下一步的 left join 关联。<br>先推出如何获得条件，再像算数题一样一步一步往下 join。可以交换顺序，但只能是因为条件间不相互关联时才能交换顺序。<br>join 比 子查询难一点<br>join 能用到索引，但是子查询出来的表会使索引失效。</p><h4 id="求所有人物对应的掌门"><a href="#求所有人物对应的掌门" class="headerlink" title="求所有人物对应的掌门:"></a>求所有人物对应的掌门:</h4><h5 id="t-dept-表"><a href="#t-dept-表" class="headerlink" title="t_dept 表"></a>t_dept 表</h5><p>id  deptName  address       CEO<br> 1       华山派          华山          2<br>…</p><h5 id="t-emp-表"><a href="#t-emp-表" class="headerlink" title="t_emp 表"></a>t_emp 表</h5><p>id  name     age  deptId<br>1  风清扬     90         1<br>…</p><h5 id="1-使用子查询-不推荐，影响后续用索引"><a href="#1-使用子查询-不推荐，影响后续用索引" class="headerlink" title="1.使用子查询(不推荐，影响后续用索引)"></a>1.使用子查询(不推荐，影响后续用索引)</h5><p>步骤：a.创建子查询  查询出每个门派对应的ceo<br>         b. 根据t_emp 对应的 deptId 关联子查询表查询出所有人物对应的 ceo</p><p>SELECT a.name,f.deptName,f.name FROM t_emp a<br>LEFT JOIN (SELECT d.<code>id</code>,e.<code>name</code> ,d.<code>deptName</code> FROM t_dept d<br>LEFT JOIN t_emp e<br>ON d.<code>CEO</code>=e.<code>id</code>) f<br>ON a.deptId = f.id</p><h5 id="2-使用join-推荐"><a href="#2-使用join-推荐" class="headerlink" title="2.使用join(推荐)"></a>2.使用join(推荐)</h5><p>步骤:a. 关联出每个人物对应的门派<br>       b.通过门派的 ceo 关联对应的掌门</p><p>SELECT e.<code>name</code>, d.<code>deptName</code>,f.<code>name</code> ceo FROM t_dept d<br>RIGHT JOIN t_emp e<br>ON d.<code>id</code> = e.<code>deptId</code>   ##第一步 —&gt;得到关联了部门的一张新的联合表<br>LEFT JOIN t_emp f<br>ON d.<code>CEO</code>=f.<code>id</code>       ##第二步  —&gt;通过新的联合表中的数据与另一张表关联</p><p>SELECT d.<code>deptName</code>, e.<code>name</code> CEO,d.<code>id</code>,f.name<br> FROM t_dept d<br>LEFT JOIN  t_emp e    //上述两个 join 交换了顺序并不影响执行。前提是两个 join 间不是依赖关系。且都跟<br>ON d.<code>CEO</code>=e.<code>id</code><br>LEFT JOIN t_emp f<br>ON f.deptId = d.<code>id</code></p><h2 id="三、索引概念"><a href="#三、索引概念" class="headerlink" title="三、索引概念"></a>三、索引概念</h2><h3 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h3><p>MySQL官方对索引的定义为：<span style="color:red;">索引（Index） </span>是帮助MySQL高效获取数据的<strong>数据结构</strong>。</p><p>可以得到索引的本质：<span style="color:red;">索引 是数据结构</span></p><p>索引的目的在于提高查询效率</p><h3 id="排好序的快速查找数据结构"><a href="#排好序的快速查找数据结构" class="headerlink" title="排好序的快速查找数据结构"></a><span style="color:red;">排好序的快速查找数据结构</span></h3><h4 id="详解（重要）"><a href="#详解（重要）" class="headerlink" title="详解（重要）"></a>详解（重要）</h4><p> 在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，<br>这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。下图就是一种可能的索引方式示例：</p><img src="/jojoblog.github.io/2022/08/23/mysql-suo-yin/%E4%B8%80%E7%A7%8D%E5%8F%AF%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95%E6%96%B9%E5%BC%8F%E7%A4%BA%E4%BE%8B%E5%9B%BE.jpg" class=""><p>左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址<br> 为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在一定的复杂度内获取到相应数据，从而快速的检索出符合条件的记录。<br>二叉树弊端之一：二叉树很可能会发生两边不平衡的情况。<br>B-TREE: (B:balance)  会自动根据两边的情况自动调节，使两端无限趋近于平衡状态。可以使性能最稳定。(myisam使用的方式)<br>    B-TREE弊端：(<strong>插入/修改</strong>操作多时，B-TREE会不断调整平衡，消耗性能)从侧面说明了索引不是越多越好。<br><span style="color:red;"><strong>B+TREE:Innodb 所使用的索引</strong> </span> </p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p style="font-size:18px;color:purple">数据本身之外，数据库还维护着一个满足特定查找算法的数据结构，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法，这种数据结构就是索引。</p><h3 id="索引的保存"><a href="#索引的保存" class="headerlink" title="索引的保存"></a>索引的保存</h3><p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。</p><h3 id="常见的索引"><a href="#常见的索引" class="headerlink" title="常见的索引"></a>常见的索引</h3><p><span style="color:red;">我们平常所说的索引，如果没有特别指明，都是指B树（多路搜索树，并不一定是二叉的）结构组织的索引。 </span> 其中<span style="color:blue;">聚集索引、次要索引、覆盖索引、复合索引、前缀索引、唯一索引</span>默认都是使用 <strong>B+树</strong>索引，统称索引。当然，除了B+树这种类型的索引之外，还有哈希索引（hash index）等。</p><h2 id="四、索引的优势与劣势"><a href="#四、索引的优势与劣势" class="headerlink" title="四、索引的优势与劣势"></a>四、索引的优势与劣势</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li>通过索引查找数据库数据，可以提高数据检索的效率，降低数据库的IO成本。</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗。</li></ol><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ol><li><p>索引实际上也是一张表，该表保存了主键和索引字段，并指向实体表的记录，所以索引列也是要占使用空间的</p></li><li><p>虽然索引列<span style="color:red;">&nbsp;大大提高了查询速度&nbsp;</span> ，但同时却会<span style="color:red;">&nbsp;降低更新表的速度&nbsp;</span> ，如对表进行 INSERT、UPDATE、DELETE。</p><p>因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新之后添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</p></li><li><p><span style="color:red;"><strong>索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花费时间建立最优秀的索引，或优化查询语句</strong> </span></p></li></ol><h2 id="五、MySQL索引结构"><a href="#五、MySQL索引结构" class="headerlink" title="五、MySQL索引结构"></a>五、MySQL索引结构</h2><h3 id="BTree索引"><a href="#BTree索引" class="headerlink" title="BTree索引"></a>BTree索引</h3><p><span style="color:red;font-size:20px;"><strong>BTree索引——Myisam的普通索引</strong></span>  </p><h4 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h4><p>【初始化介绍】<br>一颗b树，浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个<strong>数据项</strong>（深蓝色所示）和<strong>指针</strong>（黄色所示），<br>如磁盘块1包含数据项17和35，包含指针P1、P2、P3，<br>P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。<br><span style="color:red;"><strong>真实的数据存在于叶子节点</strong> </span> 真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。<br><span style="color:red;">非叶子节点不存储真实的数据，只存储指引搜索方向的数据项 </span> ，如17、35并不真实存在于数据表中。</p><p>【查找过程】<br>如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。</p><h4 id="关于时间复杂度"><a href="#关于时间复杂度" class="headerlink" title="关于时间复杂度"></a>关于时间复杂度</h4><p>同一问题可用不同算法解决，而一个算法的质量优劣将影响到算法乃至程序的效率。算法分析的目的在于选择合适算法和改进算法。</p><img src="/jojoblog.github.io/2022/08/23/mysql-suo-yin/%E4%B8%8D%E5%90%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8D%E5%90%8C%E6%93%8D%E4%BD%9C%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%9B%BE.jpg" class=""><img src="/jojoblog.github.io/2022/08/23/mysql-suo-yin/%E4%B8%8D%E5%90%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%8F%98%E5%8C%96%E8%B6%8B%E5%8A%BF%E5%9B%BE.jpg" class=""><p>1  N  logN 分别表示数据与查询次数之间的关系。<br>常数  1<em>c 表示查询最快的方式。查询次数不随数据的增加而增加<br>变量 N 表示查询次数随数据数量的增加而增加<br>对数 logN 表示查询次数与数据数量成对数关系。 介于常数与 N 之间。<br>n</em>logN 表示使用的复合方法。</p><h3 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B+Tree索引"></a>B+Tree索引</h3><p><span style="color:red;font-size:20px;"><strong>B+Tree索引——innodb的普通索引</strong></span>  </p><h4 id="原理图-1"><a href="#原理图-1" class="headerlink" title="原理图"></a>原理图</h4><img src="/jojoblog.github.io/2022/08/23/mysql-suo-yin/B+Tree%E5%8E%9F%E7%90%86%E5%9B%BE.jpg" class=""><p>B+TREE 第二级的 数据并不能直接取出来，只作索引使用。在内存有限的情况下，查询效率高于 B-TREE<br>B-TREE 第二级可以直接取出来，树形结构比较重，在内存无限大的时候有优势。</p><h4 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a>B树和B+树的区别</h4><p>B+Tree与B-Tree 的区别：结论在内存有限的情况下，B+TREE 永远比 B-TREE好。无限内存则后者方便</p><p>　1）B-树的关键字和记录是放在一起的，叶子节点可以看作外部节点，不包含任何信息；B+树叶子节点中只有关键字和指向下一个节点的索引，记录只放在叶子节点中。(一次查询可能进行两次i/o操作)<br>　 2）在B-树中，越靠近根节点的记录查找时间越快，只要找到关键字即可确定记录的存在；而B+树中每个记录的查找时间基本是一样的，都需要从根节点走到叶子节点，而且在叶子节点中还要再比较关键字。从这个角度看B-树的性能好像要比B+树好，而在实际应用中却是B+树的性能要好些。因为B+树的非叶子节点不存放实际的数据，这样每个节点可容纳的元素个数比B-树多，树高比B-树小，这样带来的好处是减少磁盘访问次数。尽管B+树找到一个记录所需的比较次数要比B-树多，但是一次磁盘访问的时间相当于成百上千次内存比较的时间，因此实际中B+树的性能可能还会好些，而且B+树的叶子节点使用指针连接在一起，方便顺序遍历（例如查看一个目录下的所有文件，一个表中的所有记录等），这也是很多数据库和文件系统使用B+树的缘故。<br>　<br>思考：为什么说B+树比B-树更适合实际应用中操作系统的文件索引和数据库索引？ </p><ol><li>B+树的磁盘读写代价更低<br>B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。 </li><li>B+树的查询效率更加稳定<br>由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</li></ol><h3 id="聚簇索引与非聚簇索引"><a href="#聚簇索引与非聚簇索引" class="headerlink" title="聚簇索引与非聚簇索引"></a>聚簇索引与非聚簇索引</h3><p>聚簇索引并不是一种单独的索引类型，而是一种<strong>数据存储方式</strong>。<br>术语‘聚簇’表示<strong>数据行和相邻的键值进错的存储在一起</strong>。</p><p>如下图，左侧的索引就是聚簇索引，因为数据行在磁盘的排列和索引排序保持一致。</p><img src="/jojoblog.github.io/2022/08/23/mysql-suo-yin/%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E4%B8%8E%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E5%9B%BE.jpg" class=""><h4 id="聚簇索引的好处："><a href="#聚簇索引的好处：" class="headerlink" title="聚簇索引的好处："></a>聚簇索引的好处：</h4><p>按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，数据库不用从多个数据块中提取数据，所以节省了大量的io操作。</p><h4 id="聚簇索引的限制："><a href="#聚簇索引的限制：" class="headerlink" title="聚簇索引的限制："></a>聚簇索引的限制：</h4><ul><li>对于mysql数据库目前<strong>只有innodb数据引擎支持聚簇索引</strong>，而Myisam并不支持聚簇索引。</li><li>由于数据物理存储排序方式只能有一种，所以每个Mysql的表只能有一个聚簇索引。一般情况下就是该表的<strong>主键</strong>。</li><li><strong>为了充分利用聚簇索引的聚簇的特性，所以innodb表的主键列尽量选用有序的顺序id，而不建议用无序的id，比如uuid这种。（参考聚簇索引的好处。）</strong></li></ul><p> 这里说明了主键索引为何采用自增的方式：1、业务需求，有序。2、能使用到聚簇索引</p><h3 id="full-text全文索引"><a href="#full-text全文索引" class="headerlink" title="full-text全文索引"></a>full-text全文索引</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>全文索引（也称全文检索）是目前搜索引擎使用的一种关键技术。它能够利用【分词技术】等多种算法智能分析出文本文字中关键词的频率和重要性，然后按照一定的算法规则智能地筛选出我们想要的搜索结果。</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE `article` (  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,  `title` varchar(200) DEFAULT NULL,  `content` text,  PRIMARY KEY (`id`),  FULLTEXT KEY `title` (`title`,`content`)) ENGINE=MyISAM DEFAULT CHARSET=utf8;</code></pre><p>不同于like方式的的查询：<br>SELECT * FROM article WHERE content LIKE ‘%查询字符串%’;<br>全文索引用match+against方式查询：<br>SELECT * FROM article WHERE MATCH(title,content) AGAINST (‘查询字符串’);</p><p>明显的提高查询效率。</p><h4 id="限制："><a href="#限制：" class="headerlink" title="限制："></a>限制：</h4><p>mysql5.6.4以前只有Myisam支持，5.6.4版本以后innodb才支持，但是官方版本不支持中文分词，需要第三方分词插件。<br>5.7以后官方支持中文分词。</p><p>随着大数据时代的到来，关系型数据库应对全文索引的需求已力不从心，逐渐被 solr,elasticSearch等专门的搜索引擎所替代。</p><h3 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h3><p>Hash索引只有Memory, NDB两种引擎支持，Memory引擎默认支持Hash索引，如果多个hash值相同，出现哈希碰撞，那么索引以链表方式存储。<br><strong>NoSql采用此中索引结构。</strong></p><h3 id="R-Tree索引"><a href="#R-Tree索引" class="headerlink" title="R-Tree索引"></a>R-Tree索引</h3><p>R-Tree在mysql很少使用，仅支持geometry数据类型，支持该类型的存储引擎只有myisam、bdb、innodb、ndb、archive几种。</p><p>相对于b-tree，r-tree的优势在于范围查找。</p><h2 id="MySQL索引分类"><a href="#MySQL索引分类" class="headerlink" title="MySQL索引分类"></a>MySQL索引分类</h2><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p><strong>设定为主键后数据库会自动建立索引，innodb为聚簇索引。</strong></p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE customer (id INT(10) UNSIGNED  AUTO_INCREMENT ,customer_no VARCHAR(200),customer_name VARCHAR(200),  PRIMARY KEY(id) );# unsigned (无符号的)# 使用  AUTO_INCREMENT 关键字的列必须有索引(只要有索引就行)。 CREATE TABLE customer2 (id INT(10) UNSIGNED   ,customer_no VARCHAR(200),customer_name VARCHAR(200),  PRIMARY KEY(id) ); # 单独建主键索引：ALTER TABLE customer  add PRIMARY KEY customer(customer_no);   # 删除建主键索引：ALTER TABLE customer  drop PRIMARY KEY ;   # 修改建主键索引：# 必须先删除掉(drop)原索引，再新建(add)索引</code></pre><h3 id="单值索引"><a href="#单值索引" class="headerlink" title="单值索引"></a>单值索引</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p><strong>即一个索引只包含单个列（字段），一个表中可以有多个单列索引。</strong></p><h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h4><p>索引建立成哪种索引类型？<br>根据数据引擎类型自动选择的索引类型<br>除开 <strong>innodb 引擎主键默认为聚簇索引</strong> 外。 <strong>innodb 的索引都采用的 B+TREE；</strong><br><strong>myisam 则都采用的 B-TREE索引</strong></p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><pre class=" language-mysql"><code class="language-mysql"># 随表一起建索引：CREATE TABLE customer (id INT(10) UNSIGNED  AUTO_INCREMENT ,customer_no VARCHAR(200),customer_name VARCHAR(200),  PRIMARY KEY(id),  KEY (customer_name)  );# 随表一起建立的索引 索引名同 列名(customer_name)# 单独建单值索引：CREATE  INDEX idx_customer_name ON customer(customer_name);  # 删除索引：DROP INDEX idx_customer_name ;</code></pre><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p><strong>索引列的值必须唯一，但允许有空值。</strong></p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><pre class=" language-mysql"><code class="language-mysql"># 随表一起建索引：CREATE TABLE customer (id INT(10) UNSIGNED  AUTO_INCREMENT ,customer_no VARCHAR(200),customer_name VARCHAR(200),  PRIMARY KEY(id),  KEY (customer_name),  UNIQUE (customer_no));# 建立 唯一索引时必须保证所有的值是唯一的（除了null），若有重复数据，会报错。   # 单独建唯一索引：CREATE UNIQUE INDEX idx_customer_no ON customer(customer_no);  # 删除索引：DROP INDEX idx_customer_no on customer ;</code></pre><h3 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h3><h4 id="复合索引和单值索引的区别"><a href="#复合索引和单值索引的区别" class="headerlink" title="复合索引和单值索引的区别"></a>复合索引和单值索引的区别</h4><p>复合索引：</p><pre class=" language-mysql"><code class="language-mysql">create index idx_no_name on emp(no,name);  # no 与  name 有同一个索引 idx_no_name</code></pre><p>单值索引：</p><pre class=" language-mysql"><code class="language-mysql">create index idx_no on emp(no);create index idx_name on emp(name);</code></pre><h4 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h4><p><strong>即一个索引包含多个列</strong></p><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><p>在数据库操作期间，复合索引比单值索引所需要的开销更小(对于相同的多个列建索引)<br>当表的行数远大于索引列的数目时可以使用复合索引</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><pre class=" language-mysql"><code class="language-mysql"># 随表一起建索引：CREATE TABLE customer (id INT(10) UNSIGNED  AUTO_INCREMENT ,customer_no VARCHAR(200),customer_name VARCHAR(200),  PRIMARY KEY(id),  KEY (customer_name),  UNIQUE (customer_name),  KEY (customer_no,customer_name)); # 单独建索引：CREATE  INDEX idx_no_name ON customer(customer_no,customer_name);  # 删除索引：DROP INDEX idx_no_name  on customer ;</code></pre><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p><span style="color:red;font-size:20px;font-weight:bold;">ALTER mytable ADD [UniQUE] INDEX [indexName] ON (columnname(length));</span>  </p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><span style="color:red;font-size:20px;font-weight:bold;">&nbsp;DROP INDEX&nbsp;[indexName] ON mytable;&nbsp;</span>  </p><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><p><span style="color:red;font-size:20px;font-weight:bold;">&nbsp;SHOW INDEX FROM table_naem\G&nbsp;</span>  </p><p><strong>结果图：</strong></p><img src="/jojoblog.github.io/2022/08/23/mysql-suo-yin/%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%9C%E5%9B%BE.jpg" class=""><p><strong>表中字段解析：</strong></p><p> non_unique: 是否是唯一索引  1：是   0：不是<br>seq_in_index:列 在索引中的 序列。针对符合索引(一个索引对应多个列)。针对同一个复合索引 按照创建复合索引时的顺序进行排序<br>collation:<br>cardinality:<br>sub_part:<br>packed:<br>Null:是否允许 null 值<br>comment:<br>index_comment:</p><h4 id="使用ALTER命令"><a href="#使用ALTER命令" class="headerlink" title="使用ALTER命令"></a>使用ALTER命令</h4><pre class=" language-mysql"><code class="language-mysql"># 有四种方式来添加数据表的索引：ALTER TABLE tbl_name ADD PRIMARY KEY (column_list);# 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。 ALTER TABLE tbl_name ADD UNIQUE index_name (column_list);# 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。 ALTER TABLE tbl_name ADD INDEX index_name (column_list);# 添加普通索引，索引值可出现多次。 ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list);# 该语句指定了索引为 FULLTEXT ，用于全文索引。</code></pre><h2 id="六、需要创建索引的情况"><a href="#六、需要创建索引的情况" class="headerlink" title="六、需要创建索引的情况"></a>六、需要创建索引的情况</h2><ol><li><p>主键自动建立唯一索引</p></li><li><p>频繁作为<strong>查询条件</strong>的字段应该创建索引（where后面的语句）</p></li><li><p>查询中其与其他表关联的字段，外键关系建立索引</p><p>A 表关联 B 表：A join B  。  on 后面的连接条件 既 A 表查询 B 表的条件。所以 B 表被关联的字段建立索引能大大提高查询效率<br>因为在 join 中，join 左边的表会用每一个字段去遍历 B 表的所有的关联数据，相当于一个查询操作</p></li><li><p>单键/组合索引的选择问题，<strong>在高并发下倾向创建组合索引</strong></p></li><li><p><strong>查询中排序的字段</strong>，排序字段若通过索引去访问将大大提高排序速度</p><p>group by 和 order by 后面的字段有索引大大提高效率</p></li><li><p>查询中统计或者分组字段</p></li></ol><h2 id="七、不需要创建索引的情况"><a href="#七、不需要创建索引的情况" class="headerlink" title="七、不需要创建索引的情况"></a>七、不需要创建索引的情况</h2><ol><li><p>表记录太少</p></li><li><p>经常增删改的表 </p><p>原因： 索引提高了查询速度，但同时会降低更新表的速度，如对表INSERT、UPDATE、DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</p></li><li><p>Where条件里用不到的字段不创建索引，因为索引建多了影响 <strong>增删改 的效率</strong></p></li><li><p>数据重复且且分布均匀的表字段，因此应该只为最经常排序的数据建立索引。<span style="color:red;">注意，&nbsp;</span>如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</p><img src="/jojoblog.github.io/2022/08/23/mysql-suo-yin/%E6%9F%90%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%88%97%E5%8C%85%E5%90%AB%E5%A4%A7%E9%87%8F%E9%87%8D%E5%A4%8D%E5%86%85%E5%AE%B9%E7%B4%A2%E5%BC%95%E6%95%88%E6%9E%9C%E5%9B%BE.jpg" class=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQLIndex </tag>
            
            <tag> MySQLGrammar </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的简单上手</title>
      <link href="/jojoblog.github.io/2022/08/23/git-de-jian-dan-shang-shou/"/>
      <url>/jojoblog.github.io/2022/08/23/git-de-jian-dan-shang-shou/</url>
      
        <content type="html"><![CDATA[<h1 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h1><h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><h5 id="显示当前Git配置信息"><a href="#显示当前Git配置信息" class="headerlink" title="显示当前Git配置信息"></a>显示当前Git配置信息</h5><pre class=" language-git"><code class="language-git"><span class="token command">$ git config<span class="token parameter"> --list</span></span>credential.helper=osxkeychaincore.repositoryformatversion=0core.filemode=truecore.bare=falsecore.logallrefupdates=truecore.ignorecase=truecore.precomposeunicode=true</code></pre><h5 id="编辑Git配置文件"><a href="#编辑Git配置文件" class="headerlink" title="编辑Git配置文件"></a>编辑Git配置文件</h5><pre class=" language-git"><code class="language-git"><span class="token command">$ git config<span class="token parameter"> -e</span>    # 针对当前仓库 </span><span class="token comment" spellcheck="true"># 或者</span><span class="token command">$ git config<span class="token parameter"> -e</span><span class="token parameter"> --global</span>   # 针对系统上所有仓库</span></code></pre><h5 id="设置交代码时的用户信息"><a href="#设置交代码时的用户信息" class="headerlink" title="设置交代码时的用户信息"></a>设置交代码时的用户信息</h5><pre class=" language-git"><code class="language-git"><span class="token command">$ git config<span class="token parameter"> --global</span> user.name </span><span class="token string">"runoob"</span><span class="token command">$ git config<span class="token parameter"> --global</span> user.email test@runoob.com</span></code></pre><h3 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h3><h5 id="一个简单的操作步骤："><a href="#一个简单的操作步骤：" class="headerlink" title="一个简单的操作步骤："></a>一个简单的操作步骤：</h5><pre class=" language-git"><code class="language-git"><span class="token command">$ git init      # 初始化仓库。</span><span class="token command">$ git add .     # 添加文件到暂存区。</span><span class="token command">$ git commit    # 将暂存区内容添加到仓库中。</span></code></pre><h5 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库:"></a>初始化仓库:</h5><pre class=" language-git"><code class="language-git">$ mkdir runoob$ cd runoob/<span class="token command">$ git init</span>Initialized empty Git repository in /Users/tianqixin/www/runoob/.git/<span class="token comment" spellcheck="true"># 初始化空 Git 仓库完毕。</span></code></pre><h5 id="拷贝一份远程仓库"><a href="#拷贝一份远程仓库" class="headerlink" title="拷贝一份远程仓库"></a>拷贝一份远程仓库</h5><pre class=" language-git"><code class="language-git"><span class="token comment" spellcheck="true"># git clone [url]</span><span class="token command">$ git clone https://github.com/tianqixin/runoob-git-test</span>Cloning into <span class="token string">'runoob-git-test'</span>...remote: Enumerating objects: 12, done.remote: Total 12 (delta 0), reused 0 (delta 0), pack-reused 12Unpacking objects: 100% (12/12), done.</code></pre><h5 id="查看仓库有变更的文件"><a href="#查看仓库有变更的文件" class="headerlink" title="查看仓库有变更的文件:"></a>查看仓库有变更的文件:</h5><pre class=" language-git"><code class="language-git"><span class="token command">$ git status</span>On branch masterInitial commitChanges to be committed:  (use <span class="token string">"git rm --cached &lt;file>..."</span> to unstage)    new file:   README    new file:   hello.php    <span class="token comment" spellcheck="true"># 通常我们使用 -s 参数来获得简短的输出结果：</span><span class="token command">$ git status<span class="token parameter"> -s</span></span>AM READMEA  hello.php</code></pre><h5 id="将文件添加到暂存区："><a href="#将文件添加到暂存区：" class="headerlink" title="将文件添加到暂存区："></a>将文件添加到暂存区：</h5><pre class=" language-git"><code class="language-git"><span class="token comment" spellcheck="true"># 添加一个或多个文件到暂存区：</span>git add [file1] [file2] ...<span class="token comment" spellcheck="true"># 添加指定目录到暂存区，包括子目录：</span>git add [dir]<span class="token comment" spellcheck="true"># 添加当前目录下的所有文件到暂存区：</span>git add .<span class="token comment" spellcheck="true"># 以下实例我们添加两个文件：</span>$ touch README                # 创建文件$ touch hello.php             # 创建文件$ lsREADME        hello.php<span class="token command">$ git status<span class="token parameter"> -s</span></span>?? README?? hello.php$ </code></pre><h5 id="将暂存区内容添加到本地仓库中："><a href="#将暂存区内容添加到本地仓库中：" class="headerlink" title="将暂存区内容添加到本地仓库中："></a>将暂存区内容添加到本地仓库中：</h5><pre class=" language-git"><code class="language-git"><span class="token comment" spellcheck="true"># 提交暂存区到本地仓库中:</span>git commit -m [message]<span class="token comment" spellcheck="true"># [message] 可以是一些备注信息。</span><span class="token comment" spellcheck="true"># 提交暂存区的指定文件到仓库区：</span><span class="token command">$ git commit [file1] [file2] ...<span class="token parameter"> -m</span> [message]</span><span class="token comment" spellcheck="true"># -a 参数设置修改文件后不需要执行 git add 命令，直接来提交</span><span class="token command">$ git commit<span class="token parameter"> -a</span></span></code></pre><h5 id="从远程获取代码库："><a href="#从远程获取代码库：" class="headerlink" title="从远程获取代码库："></a>从远程获取代码库：</h5><pre class=" language-git"><code class="language-git"><span class="token comment" spellcheck="true"># 从远端仓库提取数据并尝试合并到当前分支：</span>git merge<span class="token comment" spellcheck="true"># 该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支。</span><span class="token comment" spellcheck="true"># 假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行:</span>git fetch [alias]<span class="token comment" spellcheck="true"># 以上命令告诉 Git 去获取它有你没有的数据，然后你可以执行：</span>git merge [alias]/[branch]</code></pre><h5 id="从远程获取代码并合并本地的版本："><a href="#从远程获取代码并合并本地的版本：" class="headerlink" title="从远程获取代码并合并本地的版本："></a>从远程获取代码并合并本地的版本：</h5><pre class=" language-git"><code class="language-git"><span class="token comment" spellcheck="true"># git pull 其实就是 git fetch 和 git merge FETCH_HEAD 的简写。</span><span class="token comment" spellcheck="true"># 命令格式如下：</span>git pull &lt;远程主机名> &lt;远程分支名>:&lt;本地分支名><span class="token comment" spellcheck="true"># 更新操作：</span><span class="token command">$ git pull</span><span class="token command">$ git pull origin</span><span class="token comment" spellcheck="true"># 将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。</span>git pull origin master:brantest<span class="token comment" spellcheck="true"># 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</span>git pull origin master</code></pre><h5 id="从将本地的分支版本上传到远程并合并："><a href="#从将本地的分支版本上传到远程并合并：" class="headerlink" title="从将本地的分支版本上传到远程并合并："></a>从将本地的分支版本上传到远程并合并：</h5><pre class=" language-git"><code class="language-git"><span class="token comment" spellcheck="true"># 命令格式如下：</span>git push &lt;远程主机名> &lt;本地分支名>:&lt;远程分支名><span class="token comment" spellcheck="true"># 如果本地分支名与远程分支名相同，则可以省略冒号：</span>git push &lt;远程主机名> &lt;本地分支名><span class="token comment" spellcheck="true"># 实例</span><span class="token comment" spellcheck="true"># 以下命令将本地的 master 分支推送到 origin 主机的 master 分支。</span><span class="token command">$ git push origin master</span><span class="token comment" spellcheck="true"># 相等于：</span><span class="token command">$ git push origin master:master</span><span class="token comment" spellcheck="true"># 如果本地版本与远程版本有差异，但又要强制推送可以使用 --force 参数：</span>git push --force origin master<span class="token comment" spellcheck="true"># 删除主机的分支可以使用 --delete 参数，以下命令表示删除 origin 主机的 master 分支：</span>git push origin --delete master</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitQuick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法</title>
      <link href="/jojoblog.github.io/2022/08/22/markdown-yu-fa/"/>
      <url>/jojoblog.github.io/2022/08/22/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdowm"><a href="#Markdowm" class="headerlink" title="Markdowm"></a>Markdowm</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用 # 号标记<br>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 三级标题</span><span class="token title important"><span class="token punctuation">####</span> 四级标题</span><span class="token title important"><span class="token punctuation">#####</span> 五级标题</span><span class="token title important"><span class="token punctuation">######</span> 六级标题</span></code></pre><p>效果（从三级标题开始演示）：</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。</p><p>屈平疾王听之不聪也，谗谄之蔽明也，邪曲之害公也，方正之不容也，故忧愁幽思而作《离骚》。“离骚”者，犹离忧也。夫天者，人之始也；父母者，人之本也。人穷则反本，故劳苦倦极，未尝不呼天也；疾痛惨怛，未尝不呼父母也。屈平正道直行，竭忠尽智，以事其君，谗人间之，可谓穷矣。信而见疑，忠而被谤，能无怨乎？屈平之作《离骚》，盖自怨生也。《国风》好色而不淫，《小雅》怨诽而不乱。若《离骚》者，可谓兼之矣。上称帝喾，下道齐桓，中述汤、武，以刺世事。明道德之广崇，治乱之条贯，靡不毕见。其文约，其辞微，其志洁，其行廉。其称文小而其指极大，举类迩而见义远。其志洁，故其称物芳；其行廉，故死而不容。自疏濯淖污泥之中，蝉蜕于浊秽，以浮游尘埃之外，不获世之滋垢，皭然泥而不滓者也。推此志也，虽与日月争光可也。</p><h6 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h6><pre class=" language-markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span>斜体文本<span class="token punctuation">*</span></span><span class="token italic"><span class="token punctuation">_</span>斜体文本<span class="token punctuation">_</span></span><span class="token bold"><span class="token punctuation">**</span>粗体文本<span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span>粗体文本<span class="token punctuation">__</span></span><span class="token bold"><span class="token punctuation">**</span>*粗斜体文本<span class="token punctuation">**</span></span>*<span class="token bold"><span class="token punctuation">__</span>_粗斜体文本<span class="token punctuation">__</span></span>_</code></pre><p>效果：</p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p><h6 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h6><pre class=" language-markdowm"><code class="language-markdowm">**** * ******- - -----------</code></pre><p>效果：</p><hr><hr><hr><hr><hr><h6 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h6><pre class=" language-markdowm"><code class="language-markdowm">RUNOOB.COMGOOGLE.COM~~BAIDU.COM~~</code></pre><p>效果：<br><del>BAIDU.COM</del></p><h6 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h6><pre class=" language-markdowm"><code class="language-markdowm"><u> 带下划线文本 </u></code></pre><p>效果：<br><u>带下划线文本</u></p><h6 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h6><pre class=" language-markdowm"><code class="language-markdowm">创建脚注格式类似这样 [^RUNOOB]。[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！</code></pre><p>效果：<br>创建脚注格式类似这样 [^RUNOOB]。</p><p>[^RUNOOB]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><pre class=" language-markdowm"><code class="language-markdowm">* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项</code></pre><p>效果：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表使用数字并加上 . 号来表示，如：</p><pre class=" language-markdowm"><code class="language-markdowm">1. 第一项2. 第二项3. 第三项</code></pre><p>效果：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><pre class=" language-markdowm"><code class="language-markdowm">1. 第一项：    - 第一项嵌套的第一个元素    - 第一项嵌套的第二个元素2. 第二项：    - 第二项嵌套的第一个元素    - 第二项嵌套的第二个元素</code></pre><p>效果</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><h6 id="区块使用"><a href="#区块使用" class="headerlink" title="区块使用"></a>区块使用</h6><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p><pre class=" language-markdowm"><code class="language-markdowm">> 区块引用> 菜鸟教程> 学的不仅是技术更是梦想</code></pre><p>效果：</p><blockquote><p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote><h6 id="区块嵌套"><a href="#区块嵌套" class="headerlink" title="区块嵌套"></a>区块嵌套</h6><pre class=" language-markdowm"><code class="language-markdowm">> 最外层> > 第一层嵌套> > > 第二层嵌套</code></pre><p>效果：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h6 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h6><pre class=" language-markdowm"><code class="language-markdowm">> 区块中使用列表> 1. 第一项> 2. 第二项> + 第一项> + 第二项> + 第三项</code></pre><p>效果：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><h6 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h6><p>如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。</p><p>列表中使用区块实例如下：</p><pre class=" language-markdowm"><code class="language-markdowm">* 第一项    > 菜鸟教程    > 学的不仅是技术更是梦想* 第二项</code></pre><p>效果：</p><ul><li><p>第一项</p><blockquote><p>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote></li><li><p>第二项</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：</p><pre class=" language-markdowm"><code class="language-markdowm">`printf()` 函数</code></pre><p>效果：<br><code>printf()</code> 函数</p><h4 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h4><p>代码区块使用 4 个空格或者一个制表符（Tab 键）。</p><p>实例如下：</p><pre class=" language-markdowm"><code class="language-markdowm">    $(document).ready(function () {    alert('RUNOOB');});</code></pre><p>你也可以用 ‘’ ``` “ 包裹一段代码，并指定一种语言（也可以不指定）：<strong>推荐使用</strong></p><pre class=" language-markdowm"><code class="language-markdowm">\`\`\`javascript$(document).ready(function () {    alert('RUNOOB');});\`\`\`</code></pre><p>效果：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'RUNOOB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接使用方法如下：</p><blockquote><p>[链接名称](链接地址)</p><p>或者</p><p>&lt;链接地址&gt;</p></blockquote><p>链接使用方法如下：</p><pre class=" language-markdown"><code class="language-markdown">这是一个链接 <span class="token url">[菜鸟教程](https://www.runoob.com)</span>或直接使用链接地址：&lt;https://www.runoob.com></code></pre><p>效果：<br>这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a><br>或<br>直接使用链接地址：</p><p><a href="https://www.runoob.com/">https://www.runoob.com</a></p><h4 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h4><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><pre class=" language-markdowm"><code class="language-markdowm">这个链接用 1 作为网址变量 [Google][1]这个链接用 runoob 作为网址变量 [Runoob][runoob]然后在文档的结尾为变量赋值（网址）  [1]: http://www.google.com/  [runoob]: http://www.runoob.com/</code></pre><p>效果：</p><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>Markdown 图片语法格式如下：</p><pre class=" language-markdowm"><code class="language-markdowm">![alt 属性文本](图片地址)![alt 属性文本](图片地址 "可选标题")使用实例：![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png "RUNOOB")</code></pre><ul><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li></ul><p>效果：</p><p><img src="/jojoblog.github.io/MarkDown%E8%AF%AD%E6%B3%95/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="/jojoblog.github.io/MarkDown%E8%AF%AD%E6%B3%95/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p><p>当然，你也可以像网址那样对图片网址使用变量:</p><pre class=" language-markdowm"><code class="language-markdowm">这个链接用 1 作为网址变量 [RUNOOB][1].然后在文档的结尾为变量赋值（网址）[1]: http://static.runoob.com/images/runoob-logo.png</code></pre><p>效果</p><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">RUNOOB</a>.<br>然后在文档的结尾为变量赋值（网址）</p><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://static.runoob.com/images/runoob-logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><pre class=" language-markdowm"><code class="language-markdowm">|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |</code></pre><p>效果：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p>我们可以设置表格的对齐方式：</p><blockquote><p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐</p></blockquote><pre class=" language-markdowm"><code class="language-markdowm">| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |</code></pre><p>效果：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h4 id="支持html元素"><a href="#支持html元素" class="headerlink" title="支持html元素"></a>支持html元素</h4><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。<br>目前支持的 HTML 元素有：<kbd> <b> <i> <em> <sup> <sub> <br>等 ，如：</sub></sup></em></i></b></kbd></p><b><i><em><pre class=" language-markdowm"><code class="language-markdowm">使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</code></pre><p>效果：<br>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><pre class=" language-markdowm"><code class="language-markdowm">**文本加粗** \*\* 正常显示星号 \*\*</code></pre><p>效果：<br><strong>文本加粗</strong><br>** 正常显示星号 **</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><blockquote><p>\   反斜线<br>`   反引号<br>*   星号<br>_   下划线<br>{}  花括号<br>[]  方括号<br>()  小括号<br>#   井字号<br>+   加号<br>-   减号<br>.   英文句点<br>!   感叹号</p></blockquote><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p>Markdown Preview Enhanced 使用 KaTeX 或者 MathJax 来渲染数学表达式。</p><p>KaTeX 拥有比 MathJax 更快的性能，但是它却少了很多 MathJax 拥有的特性。你可以查看 KaTeX supported functions/symbols 来了解 KaTeX 支持那些符号和函数。</p><p>默认下的分隔符：</p><blockquote><p>$…$ 或者 (…) 中的数学表达式将会在行内显示。<br>$$…$$ 或者 […] 或者 ```math 中的数学表达式将会在块内显示。</p></blockquote><pre class=" language-markdowm"><code class="language-markdowm">$$\begin{Bmatrix}   a & b \\   c & d\end{Bmatrix}$$$$\begin{CD}   A @>a>> B \\@VbVV @AAcA \\   C @= D\end{CD}$$</code></pre><hr><p>效果图：<br>$$<br>\begin{Bmatrix}<br>   a &amp; b \<br>   c &amp; d<br>\end{Bmatrix}<br>$$</p><p>$$<br>\begin{CD}<br>   A @&gt;a&gt;&gt; B \<br>@VbVV @AAcA \<br>   C @= D<br>\end{CD}<br>$$</p><hr><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><h4 id="横向流程图"><a href="#横向流程图" class="headerlink" title="横向流程图"></a>横向流程图</h4><p>代码：</p><pre class=" language-markdown"><code class="language-markdown">```mermaidgraph LRA[方形] -->B(圆角)<span class="token code keyword">    B --> C{条件a}</span><span class="token code keyword">    C -->|a=1| D[结果1]</span><span class="token code keyword">    C -->|a=2| E[结果2]</span><span class="token code keyword">    F[横向流程图]</span>```</code></pre><p>效果：</p><pre class=" language-mermaid"><code class="language-mermaid">graph LRA[方形] -->B(圆角)    B --> C{条件a}    C -->|a=1| D[结果1]    C -->|a=2| E[结果2]    F[横向流程图]</code></pre><hr><h4 id="竖向流程图"><a href="#竖向流程图" class="headerlink" title="竖向流程图"></a>竖向流程图</h4><pre class=" language-markdowm"><code class="language-markdowm">```mermaidgraph TDA[方形] --> B(圆角)    B --> C{条件a}    C --> |a=1| D[结果1]    C --> |a=2| E[结果2]    F[竖向流程图]```</code></pre><p>效果图：</p><pre class=" language-mermaid"><code class="language-mermaid">graph TDA[方形] --> B(圆角)    B --> C{条件a}    C --> |a=1| D[结果1]    C --> |a=2| E[结果2]    F[竖向流程图]</code></pre><hr><h4 id="标准流程图"><a href="#标准流程图" class="headerlink" title="标准流程图"></a>标准流程图</h4><p>代码：</p><pre class=" language-markdowm"><code class="language-markdowm">```flowst=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st->op->condcond(yes)->io->econd(no)->sub1(right)->op```</code></pre><p>效果图：</p><pre class=" language-flow"><code class="language-flow">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st->op->condcond(yes)->io->econd(no)->sub1(right)->op</code></pre><hr><h4 id="标准流程图（横向）"><a href="#标准流程图（横向）" class="headerlink" title="标准流程图（横向）"></a>标准流程图（横向）</h4><p>代码：</p><pre class=" language-markdowm"><code class="language-markdowm">```flowst=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st(right)->op(right)->condcond(yes)->io(bottom)->econd(no)->sub1(right)->op```</code></pre><p>效果图：</p><pre class=" language-flow"><code class="language-flow">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st(right)->op(right)->condcond(yes)->io(bottom)->econd(no)->sub1(right)->op</code></pre><hr><h4 id="UML时序图"><a href="#UML时序图" class="headerlink" title="UML时序图"></a>UML时序图</h4><p>代码</p><pre class=" language-markdowm"><code class="language-markdowm">```sequence对象A->对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象A->对象B: 你真的好吗？```</code></pre><p>效果图：</p><pre class=" language-sequence"><code class="language-sequence">对象A->对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象A->对象B: 你真的好吗？</code></pre><hr><h4 id="复杂UML时序图"><a href="#复杂UML时序图" class="headerlink" title="复杂UML时序图"></a>复杂UML时序图</h4><p>代码：</p><pre class=" language-markdowm"><code class="language-markdowm">```sequenceTitle: 标题：复杂使用对象A->对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象B->小三: 你好吗小三-->>对象A: 对象B找我了对象A->对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩```</code></pre><p>效果图：</p><pre class=" language-sequence"><code class="language-sequence">Title: 标题：复杂使用对象A->对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象B->小三: 你好吗小三-->>对象A: 对象B找我了对象A->对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩</code></pre><hr><h4 id="标准UML时序图"><a href="#标准UML时序图" class="headerlink" title="标准UML时序图"></a>标准UML时序图</h4><p>代码：</p><pre class=" language-markdowm"><code class="language-markdowm">```mermaid%% 时序图例子,-> 直线，-->虚线，->>实线箭头  sequenceDiagram    participant 张三    participant 李四    张三->王五: 王五你好吗？    loop 健康检查        王五->王五: 与疾病战斗    end    Note right of 王五: 合理 食物 <br/>看医生...    李四-->>张三: 很好!    王五->李四: 你怎么样?    李四-->王五: 很好!```</code></pre><p>效果图：</p><pre class=" language-mermaid"><code class="language-mermaid">%% 时序图例子,-> 直线，-->虚线，->>实线箭头  sequenceDiagram    participant 张三    participant 李四    张三->王五: 王五你好吗？    loop 健康检查        王五->王五: 与疾病战斗    end    Note right of 王五: 合理 食物 <br/>看医生...    李四-->>张三: 很好!    王五->李四: 你怎么样?    李四-->王五: 很好!</code></pre><hr><h4 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h4><p>代码：</p><pre class=" language-markdowm"><code class="language-markdowm">```mermaid%% 语法示例        gantt        dateFormat  YYYY-MM-DD        title 软件开发甘特图        section 设计        需求                      :done,    des1, 2014-01-06,2014-01-08        原型                      :active,  des2, 2014-01-09, 3d        UI设计                     :         des3, after des2, 5d    未来任务                     :         des4, after des3, 5d        section 开发        学习准备理解需求                      :crit, done, 2014-01-06,24h        设计框架                             :crit, done, after des2, 2d        开发                                 :crit, active, 3d        未来任务                              :crit, 5d        耍                                   :2d        section 测试        功能测试                              :active, a1, after des3, 3d        压力测试                               :after a1  , 20h        测试报告                               : 48h```</code></pre><p>效果图：</p><pre class=" language-mermaid"><code class="language-mermaid">%% 语法示例        gantt        dateFormat  YYYY-MM-DD        title 软件开发甘特图        section 设计        需求                      :done,    des1, 2014-01-06,2014-01-08        原型                      :active,  des2, 2014-01-09, 3d        UI设计                     :         des3, after des2, 5d    未来任务                     :         des4, after des3, 5d        section 开发        学习准备理解需求                      :crit, done, 2014-01-06,24h        设计框架                             :crit, done, after des2, 2d        开发                                 :crit, active, 3d        未来任务                              :crit, 5d        耍                                   :2d        section 测试        功能测试                              :active, a1, after des3, 3d        压力测试                               :after a1  , 20h        测试报告                               : 48h</code></pre><hr><h4 id="竖向流程图-1"><a href="#竖向流程图-1" class="headerlink" title="竖向流程图"></a>竖向流程图</h4><pre class=" language-markdowm"><code class="language-markdowm"></code></pre><h4 id="竖向流程图-2"><a href="#竖向流程图-2" class="headerlink" title="竖向流程图"></a>竖向流程图</h4><pre class=" language-markdowm"><code class="language-markdowm"></code></pre><h4 id="竖向流程图-3"><a href="#竖向流程图-3" class="headerlink" title="竖向流程图"></a>竖向流程图</h4><pre class=" language-markdowm"><code class="language-markdowm"></code></pre></em></i></b>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
          <category> MDGrammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> MDGrammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>All Hello World</title>
      <link href="/jojoblog.github.io/2022/08/22/all-hello-world/"/>
      <url>/jojoblog.github.io/2022/08/22/all-hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Java-Quick-Start-Test"><a href="#Java-Quick-Start-Test" class="headerlink" title="Java Quick Start Test"></a>Java Quick Start Test</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="C-Quick-Start-Test"><a href="#C-Quick-Start-Test" class="headerlink" title="C Quick Start Test"></a>C Quick Start Test</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 我的第一个 C 程序 */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Python-Quick-Start-Test"><a href="#Python-Quick-Start-Test" class="headerlink" title="Python Quick Start Test"></a>Python Quick Start Test</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span></code></pre><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我的第一个 JavaScript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HelloWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HelloWorld </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/jojoblog.github.io/2022/07/08/hello-world/"/>
      <url>/jojoblog.github.io/2022/07/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
